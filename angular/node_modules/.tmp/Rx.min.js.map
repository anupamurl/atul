{"version":3,"sources":["../rxjs/src/observable/BoundCallbackObservable.ts","../rxjs/src/observable/bindCallback.ts","../rxjs/src/add/observable/bindCallback.ts","../rxjs/src/observable/BoundNodeCallbackObservable.ts","../rxjs/src/observable/bindNodeCallback.ts","../rxjs/src/add/observable/bindNodeCallback.ts","../rxjs/src/observable/combineLatest.ts","../rxjs/src/add/observable/combineLatest.ts","../rxjs/src/observable/concat.ts","../rxjs/src/add/observable/concat.ts","../rxjs/src/observable/DeferObservable.ts","../rxjs/src/observable/defer.ts","../rxjs/src/add/observable/defer.ts","../rxjs/src/observable/empty.ts","../rxjs/src/add/observable/empty.ts","../rxjs/src/observable/ForkJoinObservable.ts","../rxjs/src/observable/forkJoin.ts","../rxjs/src/add/observable/forkJoin.ts","../rxjs/src/observable/from.ts","../rxjs/src/add/observable/from.ts","../rxjs/src/observable/FromEventObservable.ts","../rxjs/src/observable/fromEvent.ts","../rxjs/src/add/observable/fromEvent.ts","../rxjs/src/observable/FromEventPatternObservable.ts","../rxjs/src/observable/fromEventPattern.ts","../rxjs/src/add/observable/fromEventPattern.ts","../rxjs/src/observable/fromPromise.ts","../rxjs/src/add/observable/fromPromise.ts","../rxjs/src/observable/GenerateObservable.ts","../rxjs/src/observable/generate.ts","../rxjs/src/add/observable/generate.ts","../rxjs/src/observable/IfObservable.ts","../rxjs/src/observable/if.ts","../rxjs/src/add/observable/if.ts","../rxjs/src/observable/IntervalObservable.ts","../rxjs/src/observable/interval.ts","../rxjs/src/add/observable/interval.ts","../rxjs/src/observable/merge.ts","../rxjs/src/add/observable/merge.ts","../rxjs/src/observable/race.ts","../rxjs/src/add/observable/race.ts","../rxjs/src/observable/NeverObservable.ts","../rxjs/src/observable/never.ts","../rxjs/src/add/observable/never.ts","../rxjs/src/observable/of.ts","../rxjs/src/add/observable/of.ts","../rxjs/src/observable/onErrorResumeNext.ts","../rxjs/src/add/observable/onErrorResumeNext.ts","../rxjs/src/observable/PairsObservable.ts","../rxjs/src/observable/pairs.ts","../rxjs/src/add/observable/pairs.ts","../rxjs/src/observable/RangeObservable.ts","../rxjs/src/observable/range.ts","../rxjs/src/add/observable/range.ts","../rxjs/src/observable/UsingObservable.ts","../rxjs/src/observable/using.ts","../rxjs/src/add/observable/using.ts","../rxjs/src/observable/ErrorObservable.ts","../rxjs/src/observable/throw.ts","../rxjs/src/add/observable/throw.ts","../rxjs/src/observable/TimerObservable.ts","../rxjs/src/observable/timer.ts","../rxjs/src/add/observable/timer.ts","../rxjs/src/observable/zip.ts","../rxjs/src/add/observable/zip.ts","../rxjs/src/observable/dom/ajax.ts","../rxjs/src/add/observable/dom/ajax.ts","../rxjs/src/util/assign.ts","../rxjs/src/observable/dom/WebSocketSubject.ts","../rxjs/src/observable/dom/webSocket.ts","../rxjs/src/add/observable/dom/webSocket.ts","../rxjs/src/operator/buffer.ts","../rxjs/src/add/operator/buffer.ts","../rxjs/src/operator/bufferCount.ts","../rxjs/src/add/operator/bufferCount.ts","../rxjs/src/operator/bufferTime.ts","../rxjs/src/add/operator/bufferTime.ts","../rxjs/src/operator/bufferToggle.ts","../rxjs/src/add/operator/bufferToggle.ts","../rxjs/src/operator/bufferWhen.ts","../rxjs/src/add/operator/bufferWhen.ts","../rxjs/src/operator/catch.ts","../rxjs/src/add/operator/catch.ts","../rxjs/src/operator/combineAll.ts","../rxjs/src/add/operator/combineAll.ts","../rxjs/src/operator/combineLatest.ts","../rxjs/src/add/operator/combineLatest.ts","../rxjs/src/add/operator/concat.ts","../rxjs/src/operator/concatAll.ts","../rxjs/src/add/operator/concatAll.ts","../rxjs/src/operator/concatMap.ts","../rxjs/src/add/operator/concatMap.ts","../rxjs/src/operator/concatMapTo.ts","../rxjs/src/add/operator/concatMapTo.ts","../rxjs/src/operator/count.ts","../rxjs/src/add/operator/count.ts","../rxjs/src/operator/dematerialize.ts","../rxjs/src/add/operator/dematerialize.ts","../rxjs/src/operator/debounce.ts","../rxjs/src/add/operator/debounce.ts","../rxjs/src/operator/debounceTime.ts","../rxjs/src/add/operator/debounceTime.ts","../rxjs/src/operator/defaultIfEmpty.ts","../rxjs/src/add/operator/defaultIfEmpty.ts","../rxjs/src/operator/delay.ts","../rxjs/src/add/operator/delay.ts","../rxjs/src/operator/delayWhen.ts","../rxjs/src/add/operator/delayWhen.ts","../rxjs/src/util/Set.ts","../rxjs/src/operator/distinct.ts","../rxjs/src/add/operator/distinct.ts","../rxjs/src/add/operator/distinctUntilChanged.ts","../rxjs/src/operator/distinctUntilChanged.ts","../rxjs/src/operator/distinctUntilKeyChanged.ts","../rxjs/src/add/operator/distinctUntilKeyChanged.ts","../rxjs/src/operator/do.ts","../rxjs/src/add/operator/do.ts","../rxjs/src/operator/exhaust.ts","../rxjs/src/add/operator/exhaust.ts","../rxjs/src/operator/exhaustMap.ts","../rxjs/src/add/operator/exhaustMap.ts","../rxjs/src/operator/expand.ts","../rxjs/src/add/operator/expand.ts","../rxjs/src/operator/elementAt.ts","../rxjs/src/add/operator/elementAt.ts","../rxjs/src/add/operator/filter.ts","../rxjs/src/operator/finally.ts","../rxjs/src/add/operator/finally.ts","../rxjs/src/add/operator/find.ts","../rxjs/src/operator/find.ts","../rxjs/src/operator/findIndex.ts","../rxjs/src/add/operator/findIndex.ts","../rxjs/src/operator/first.ts","../rxjs/src/add/operator/first.ts","../rxjs/src/util/MapPolyfill.ts","../rxjs/src/util/Map.ts","../rxjs/src/util/FastMap.ts","../rxjs/src/operator/groupBy.ts","../rxjs/src/add/operator/groupBy.ts","../rxjs/src/util/noop.ts","../rxjs/src/operator/ignoreElements.ts","../rxjs/src/add/operator/ignoreElements.ts","../rxjs/src/operator/isEmpty.ts","../rxjs/src/add/operator/isEmpty.ts","../rxjs/src/operator/audit.ts","../rxjs/src/add/operator/audit.ts","../rxjs/src/operator/auditTime.ts","../rxjs/src/add/operator/auditTime.ts","../rxjs/src/operator/last.ts","../rxjs/src/add/operator/last.ts","../rxjs/src/operator/let.ts","../rxjs/src/add/operator/let.ts","../rxjs/src/operator/every.ts","../rxjs/src/add/operator/every.ts","../rxjs/src/add/operator/map.ts","../rxjs/src/operator/mapTo.ts","../rxjs/src/add/operator/mapTo.ts","../rxjs/src/operator/materialize.ts","../rxjs/src/add/operator/materialize.ts","../rxjs/src/operator/max.ts","../rxjs/src/add/operator/max.ts","../rxjs/src/operator/merge.ts","../rxjs/src/add/operator/merge.ts","../rxjs/src/add/operator/mergeAll.ts","../rxjs/src/operator/mergeMap.ts","../rxjs/src/add/operator/mergeMap.ts","../rxjs/src/operator/mergeMapTo.ts","../rxjs/src/add/operator/mergeMapTo.ts","../rxjs/src/operator/mergeScan.ts","../rxjs/src/add/operator/mergeScan.ts","../rxjs/src/operator/min.ts","../rxjs/src/add/operator/min.ts","../rxjs/src/add/operator/multicast.ts","../rxjs/src/add/operator/observeOn.ts","../rxjs/src/observable/PromiseObservable.ts","../rxjs/src/observable/IteratorObservable.ts","../rxjs/src/observable/ArrayLikeObservable.ts","../rxjs/src/observable/FromObservable.ts","../rxjs/src/operator/onErrorResumeNext.ts","../rxjs/src/add/operator/onErrorResumeNext.ts","../rxjs/src/operator/pairwise.ts","../rxjs/src/add/operator/pairwise.ts","../rxjs/src/util/not.ts","../rxjs/src/operator/filter.ts","../rxjs/src/operator/partition.ts","../rxjs/src/add/operator/partition.ts","../rxjs/src/operator/pluck.ts","../rxjs/src/add/operator/pluck.ts","../rxjs/src/operator/publish.ts","../rxjs/src/add/operator/publish.ts","../rxjs/src/operator/publishBehavior.ts","../rxjs/src/add/operator/publishBehavior.ts","../rxjs/src/operator/publishReplay.ts","../rxjs/src/add/operator/publishReplay.ts","../rxjs/src/operator/publishLast.ts","../rxjs/src/add/operator/publishLast.ts","../rxjs/src/operator/race.ts","../rxjs/src/add/operator/race.ts","../rxjs/src/operator/reduce.ts","../rxjs/src/add/operator/reduce.ts","../rxjs/src/operator/repeat.ts","../rxjs/src/add/operator/repeat.ts","../rxjs/src/operator/repeatWhen.ts","../rxjs/src/add/operator/repeatWhen.ts","../rxjs/src/operator/retry.ts","../rxjs/src/add/operator/retry.ts","../rxjs/src/operator/retryWhen.ts","../rxjs/src/add/operator/retryWhen.ts","../rxjs/src/operator/sample.ts","../rxjs/src/add/operator/sample.ts","../rxjs/src/operator/sampleTime.ts","../rxjs/src/add/operator/sampleTime.ts","../rxjs/src/operator/scan.ts","../rxjs/src/add/operator/scan.ts","../rxjs/src/operator/sequenceEqual.ts","../rxjs/src/add/operator/sequenceEqual.ts","../rxjs/src/operator/share.ts","../rxjs/src/add/operator/share.ts","../rxjs/src/operator/multicast.ts","../rxjs/src/operator/shareReplay.ts","../rxjs/src/add/operator/shareReplay.ts","../rxjs/src/operator/single.ts","../rxjs/src/add/operator/single.ts","../rxjs/src/operator/skip.ts","../rxjs/src/add/operator/skip.ts","../rxjs/src/operator/skipLast.ts","../rxjs/src/add/operator/skipLast.ts","../rxjs/src/operator/skipUntil.ts","../rxjs/src/add/operator/skipUntil.ts","../rxjs/src/operator/skipWhile.ts","../rxjs/src/add/operator/skipWhile.ts","../rxjs/src/operator/mergeAll.ts","../rxjs/src/operator/concat.ts","../rxjs/src/operator/startWith.ts","../rxjs/src/add/operator/startWith.ts","../rxjs/src/observable/SubscribeOnObservable.ts","../rxjs/src/operator/subscribeOn.ts","../rxjs/src/add/operator/subscribeOn.ts","../rxjs/src/operator/switch.ts","../rxjs/src/add/operator/switch.ts","../rxjs/src/operator/switchMap.ts","../rxjs/src/add/operator/switchMap.ts","../rxjs/src/operator/switchMapTo.ts","../rxjs/src/add/operator/switchMapTo.ts","../rxjs/src/operator/take.ts","../rxjs/src/add/operator/take.ts","../rxjs/src/operator/takeLast.ts","../rxjs/src/add/operator/takeLast.ts","../rxjs/src/operator/takeUntil.ts","../rxjs/src/add/operator/takeUntil.ts","../rxjs/src/operator/takeWhile.ts","../rxjs/src/add/operator/takeWhile.ts","../rxjs/src/add/operator/throttle.ts","../rxjs/src/operator/throttle.ts","../rxjs/src/operator/throttleTime.ts","../rxjs/src/add/operator/throttleTime.ts","../rxjs/src/add/operator/timeInterval.ts","../rxjs/src/operator/timeout.ts","../rxjs/src/add/operator/timeout.ts","../rxjs/src/util/isDate.ts","../rxjs/src/operator/timeoutWith.ts","../rxjs/src/add/operator/timeoutWith.ts","../rxjs/src/add/operator/timestamp.ts","../rxjs/src/operator/toArray.ts","../rxjs/src/add/operator/toArray.ts","../rxjs/src/operator/toPromise.ts","../rxjs/src/add/operator/toPromise.ts","../rxjs/src/operator/window.ts","../rxjs/src/add/operator/window.ts","../rxjs/src/operator/windowCount.ts","../rxjs/src/add/operator/windowCount.ts","../rxjs/src/util/isNumeric.ts","../rxjs/src/operator/windowTime.ts","../rxjs/src/add/operator/windowTime.ts","../rxjs/src/operator/windowToggle.ts","../rxjs/src/add/operator/windowToggle.ts","../rxjs/src/operator/windowWhen.ts","../rxjs/src/add/operator/windowWhen.ts","../rxjs/src/operator/withLatestFrom.ts","../rxjs/src/add/operator/withLatestFrom.ts","../rxjs/src/add/operator/zip.ts","../rxjs/src/observable/ScalarObservable.ts","../rxjs/src/observable/EmptyObservable.ts","../rxjs/src/util/isScheduler.ts","../rxjs/src/observable/ArrayObservable.ts","../rxjs/src/OuterSubscriber.ts","../rxjs/src/util/isArrayLike.ts","../rxjs/src/util/isPromise.ts","../rxjs/src/InnerSubscriber.ts","../rxjs/src/util/subscribeToResult.ts","../rxjs/src/operator/zip.ts","../rxjs/src/operator/zipAll.ts","../rxjs/src/add/operator/zipAll.ts","../rxjs/src/AsyncSubject.ts","../rxjs/src/operator/observeOn.ts","../rxjs/src/ReplaySubject.ts","../rxjs/src/BehaviorSubject.ts","../rxjs/src/observable/ConnectableObservable.ts","../rxjs/src/util/EmptyError.ts","../rxjs/src/util/ArgumentOutOfRangeError.ts","../rxjs/src/util/TimeoutError.ts","../rxjs/src/operator/timeInterval.ts","../rxjs/src/operator/timestamp.ts","../rxjs/src/Notification.ts","../rxjs/src/testing/ColdObservable.ts","../rxjs/src/util/ObjectUnsubscribedError.ts","../rxjs/src/SubjectSubscription.ts","../rxjs/src/Subject.ts","../rxjs/src/testing/SubscriptionLoggable.ts","../rxjs/src/util/applyMixins.ts","../rxjs/src/testing/HotObservable.ts","../rxjs/src/testing/SubscriptionLog.ts","../rxjs/src/testing/TestScheduler.ts","../rxjs/src/scheduler/VirtualTimeScheduler.ts","../rxjs/src/util/toSubscriber.ts","../rxjs/src/Observable.ts","../rxjs/src/Observer.ts","../rxjs/src/Subscriber.ts","../rxjs/src/operator/map.ts","../rxjs/src/observable/dom/AjaxObservable.ts","../rxjs/src/util/Immediate.ts","../rxjs/src/scheduler/AsapAction.ts","../rxjs/src/scheduler/AsapScheduler.ts","../rxjs/src/scheduler/asap.ts","../rxjs/src/scheduler/async.ts","../rxjs/src/scheduler/QueueAction.ts","../rxjs/src/scheduler/QueueScheduler.ts","../rxjs/src/scheduler/queue.ts","../rxjs/src/util/isArray.ts","../rxjs/src/util/isObject.ts","../rxjs/src/util/isFunction.ts","../rxjs/src/util/tryCatch.ts","../rxjs/src/util/errorObject.ts","../rxjs/src/util/UnsubscriptionError.ts","../rxjs/src/Subscription.ts","../rxjs/src/scheduler/Action.ts","../rxjs/src/scheduler/AsyncAction.ts","../rxjs/src/util/AnimationFrame.ts","../rxjs/src/scheduler/AnimationFrameAction.ts","../rxjs/src/Scheduler.ts","../rxjs/src/scheduler/AsyncScheduler.ts","../rxjs/src/scheduler/AnimationFrameScheduler.ts","../rxjs/src/scheduler/animationFrame.ts","../rxjs/src/symbol/rxSubscriber.ts","../rxjs/src/symbol/iterator.ts","../rxjs/src/util/root.ts","../rxjs/src/symbol/observable.ts","../rxjs/src/Rx.ts"],"names":["dispatchNext","arg","value","subject","next","complete","dispatchError","err","error","Observable_1","$__require","tryCatch_1","errorObject_1","AsyncSubject_1","BoundCallbackObservable","_super","callbackFunc","selector","args","context","scheduler","call","this","__extends","create","func","undefined","_i","arguments","length","prototype","_subscribe","subscriber","schedule","dispatch","source","AsyncSubject","handler","handlerFn","innerArgs","result_1","tryCatch","apply","errorObject","e","concat","subscribe","state","self","result_2","add","Observable","exports","BoundCallbackObservable_1","bindCallback","bindCallback_1","_a","shift","BoundNodeCallbackObservable","BoundNodeCallbackObservable_1","bindNodeCallback","bindNodeCallback_1","combineLatest","observables","project","isScheduler_1","isScheduler","pop","isArray_1","isArray","ArrayObservable_1","ArrayObservable","lift","combineLatest_1","CombineLatestOperator","concat_1","concatStatic","subscribeToResult_1","OuterSubscriber_1","DeferObservable","observableFactory","DeferSubscriber","destination","factory","tryDefer","_callFactory","_error","result","subscribeToResult","OuterSubscriber","DeferObservable_1","defer","defer_1","EmptyObservable_1","empty","EmptyObservable","empty_1","ForkJoinObservable","sources","resultSelector","ForkJoinSubscriber","completed","haveValues","len","total","values","Array","i","innerSubscription","outerIndex","notifyNext","outerValue","innerValue","innerIndex","innerSub","_hasValue","notifyComplete","ForkJoinObservable_1","forkJoin","forkJoin_1","FromObservable_1","from","FromObservable","from_1","isNodeStyleEventEmitter","sourceObj","addListener","removeListener","isJQueryStyleEventEmitter","on","off","isNodeList","toString","isHTMLCollection","isEventTarget","addEventListener","removeEventListener","isFunction_1","Subscription_1","Object","FromEventObservable","eventName","options","target","isFunction","setupSubscription","unsubscribe","source_1","source_2","TypeError","source_3","Subscription","FromEventObservable_1","fromEvent","fromEvent_1","FromEventPatternObservable","addHandler","removeHandler","_this","_callSelector","retValue","_callAddHandler","errorSubscriber","FromEventPatternObservable_1","fromEventPattern","fromEventPattern_1","PromiseObservable_1","fromPromise","PromiseObservable","fromPromise_1","selfSelector","GenerateObservable","initialState","condition","iterate","initialStateOrOptions","resultSelectorOrObservable","conditionResult","closed","needIterate","GenerateObservable_1","generate","generate_1","IfObservable","thenSource","elseSource","IfSubscriber","tryIf","_complete","IfObservable_1","_if","if_1","if","isNumeric_1","async_1","IntervalObservable","period","async","isNumeric","index","IntervalObservable_1","interval","interval_1","merge_1","merge","mergeStatic","race_1","race","raceStatic","noop_1","NeverObservable","noop","NeverObservable_1","never","never_1","of","of_1","onErrorResumeNext_1","onErrorResumeNext","onErrorResumeNextStatic","obj","keys","key","PairsObservable","idx","PairsObservable_1","pairs","pairs_1","RangeObservable","start","count","_count","RangeObservable_1","range","range_1","UsingObservable","resourceFactory","resource","UsingSubscriber","tryUse","UsingObservable_1","using","using_1","ErrorObservable","syncErrorThrowable","ErrorObservable_1","_throw","throw_1","throw","isDate_1","TimerObservable","dueTime","Number","isDate","now","initialDelay","action","TimerObservable_1","timer","timer_1","zip_1","zip","zipStatic","AjaxObservable_1","ajax","AjaxObservable","ajax_1","assignImpl","k","hasOwnProperty","getAssign","root","assign","root_1","Subject_1","Subscriber_1","ReplaySubject_1","assign_1","WebSocketSubject","urlConfigOrSource","WebSocketCtor","WebSocket","_output","Subject","url","Error","ReplaySubject","JSON","parse","data","operator","sock","_resetState","socket","multiplex","subMsg","unsubMsg","messageFilter","observer","subscription","x","_connectSocket","protocol","binaryType","readyState","close","onopen","openObserver","queue","Subscriber","send","closingObserver","code","reason","onerror","onclose","closeObserver","wasClean","onmessage","observers","AnonymousSubject","WebSocketSubject_1","webSocket","webSocket_1","buffer","closingNotifier","BufferOperator","BufferSubscriber","_next","push","buffer_1","bufferCount","bufferSize","startBufferEvery","BufferCountOperator","subscriberClass","BufferSkipCountSubscriber","BufferCountSubscriber","buffers","splice","bufferCount_1","bufferTime","bufferTimeSpan","bufferCreationInterval","maxBufferSize","POSITIVE_INFINITY","BufferTimeOperator","dispatchBufferTimeSpanOnly","prevContext","closeContext","openContext","closeAction","dispatchBufferCreation","dispatchBufferClose","BufferTimeSubscriber","Context","contexts","timespanOnly","timeSpanOnlyState","closeState","creationState","filledBufferContext","onBufferFull","_unsubscribe","remove","indexOf","bufferTime_1","bufferToggle","openings","closingSelector","BufferToggleOperator","BufferToggleSubscriber","closeBuffer","openBuffer","trySubscribe","bufferToggle_1","bufferWhen","BufferWhenOperator","BufferWhenSubscriber","subscribing","closingSubscription","bufferWhen_1","_catch","CatchOperator","caught","CatchSubscriber","isStopped","err2","_unsubscribeAndRecycle","catch_1","catch","combineAll","combineAll_1","slice","unshift","none","CombineLatestSubscriber","active","observable","toRespond","unused","oldVal","_tryProject","concatAll","mergeAll_1","MergeAllOperator","concatAll_1","concatMap","mergeMap_1","MergeMapOperator","concatMap_1","concatMapTo","innerObservable","mergeMapTo_1","MergeMapToOperator","concatMapTo_1","predicate","CountOperator","CountSubscriber","_tryPredicate","count_1","dematerialize","DeMaterializeOperator","DeMaterializeSubscriber","observe","dematerialize_1","debounce","durationSelector","DebounceOperator","DebounceSubscriber","hasValue","durationSubscription","_tryNext","emitValue","duration","debounce_1","debounceTime","DebounceTimeOperator","debouncedNext","DebounceTimeSubscriber","debouncedSubscription","lastValue","clearDebounce","debounceTime_1","defaultIfEmpty","defaultValue","DefaultIfEmptyOperator","DefaultIfEmptySubscriber","isEmpty","defaultIfEmpty_1","delay","absoluteDelay","delayFor","Math","abs","DelayOperator","Notification_1","DelaySubscriber","errored","time","notification","delay_1","max","_schedule","scheduleNotification","message","DelayMessage","Notification","createNext","createComplete","delayWhen","delayDurationSelector","subscriptionDelay","SubscriptionDelayObservable","DelayWhenOperator","DelayWhenSubscriber","delayNotifierSubscriptions","removeSubscription","tryComplete","notifyError","delayNotifier","tryDelay","subscriptionIdx","notifierSubscription","SubscriptionDelaySubscriber","parent","sourceSubscribed","subscribeToSource","delayWhen_1","minimalSetImpl","MinimalSet","_values","has","defineProperty","clear","Set","distinct","keySelector","flushes","DistinctOperator","Set_1","DistinctSubscriber","_useKeySelector","_finalizeNext","distinct_1","distinctUntilChanged_1","distinctUntilChanged","compare","DistinctUntilChangedOperator","DistinctUntilChangedSubscriber","hasKey","y","Boolean","distinctUntilKeyChanged","distinctUntilKeyChanged_1","_do","nextOrObserver","DoOperator","DoSubscriber","safeSubscriber","syncErrorThrown","syncErrorValue","do_1","do","exhaust","SwitchFirstOperator","SwitchFirstSubscriber","hasCompleted","hasSubscription","exhaust_1","exhaustMap","SwitchFirstMapOperator","SwitchFirstMapSubscriber","tryNext","trySelectResult","exhaustMap_1","expand","concurrent","ExpandOperator","ExpandSubscriber","subscribeToProjection","expand_1","elementAt","ElementAtOperator","ArgumentOutOfRangeError_1","ArgumentOutOfRangeError","ElementAtSubscriber","elementAt_1","filter_1","filter","_finally","callback","FinallyOperator","FinallySubscriber","finally_1","finally","find_1","find","thisArg","FindValueOperator","yieldIndex","FindValueSubscriber","findIndex","findIndex_1","first","FirstOperator","EmptyError_1","FirstSubscriber","_emitted","_emit","_tryResultSelector","_emitFinal","EmptyError","first_1","MapPolyfill","size","_keys","get","set","delete","forEach","cb","MapPolyfill_1","Map","FastMap","groupBy","elementSelector","subjectSelector","GroupByOperator","Map_1","FastMap_1","GroupBySubscriber","groups","attemptedToUnsubscribe","_group","element","group","groupedObservable","GroupedObservable","GroupDurationSubscriber","removeGroup","groupSubject","refCountSubscription","InnerRefCountSubscription","groupBy_1","ignoreElements","IgnoreElementsOperator","IgnoreElementsSubscriber","ignoreElements_1","IsEmptyOperator","IsEmptySubscriber","isEmpty_1","audit","AuditOperator","AuditSubscriber","throttled","clearThrottle","audit_1","auditTime","AuditTimeOperator","AuditTimeSubscriber","auditTime_1","last","LastOperator","LastSubscriber","last_1","letProto","let_1","let","letBind","every","EveryOperator","EverySubscriber","everyValueMatch","every_1","map_1","map","mapTo","MapToOperator","MapToSubscriber","mapTo_1","materialize","MaterializeOperator","MaterializeSubscriber","createError","materialize_1","comparer","reduce_1","ReduceOperator","max_1","mergeAll","mergeMap","MergeMapSubscriber","_innerSub","ish","_notifyResultSelector","flatMap","mergeMapTo","MergeMapToSubscriber","flatMapTo","mergeScan","accumulator","seed","MergeScanOperator","MergeScanSubscriber","acc","mergeScan_1","min","min_1","multicast_1","multicast","observeOn_1","observeOn","promise","_isScalar","then","setTimeout","getIterator","iterator_1","iterator","StringIterator","ArrayIterator","toLength","o","isNaN","numberIsFinite","sign","floor","maxSafeInteger","isFinite","valueAsNumber","IteratorObservable","hasError","done","return","str","charAt","arr","pow","ScalarObservable_1","ArrayLikeObservable","arrayLike","ScalarObservable","isArrayLike_1","isPromise_1","IteratorObservable_1","ArrayLikeObservable_1","observable_1","isPromise","isArrayLike","ObserveOnSubscriber","nextSources","OnErrorResumeNextOperator","OnErrorResumeNextSubscriber","subscribeToNextSource","pairwise","PairwiseOperator","PairwiseSubscriber","hasPrev","prev","pairwise_1","not","pred","notPred","FilterOperator","FilterSubscriber","partition","not_1","partition_1","pluck","properties","plucker","props","currentProp","p","pluck_1","publish","publish_1","publishBehavior","BehaviorSubject_1","BehaviorSubject","publishBehavior_1","publishReplay","windowTime","publishReplay_1","publishLast","publishLast_1","RaceOperator","RaceSubscriber","hasFirst","subscriptions","reduce","hasSeed","ReduceSubscriber","_tryReduce","repeat","RepeatOperator","RepeatSubscriber","repeat_1","repeatWhen","notifier","RepeatWhenOperator","RepeatWhenSubscriber","sourceIsBeingSubscribedTo","retries","retriesSubscription","subscribeToRetries","notifications","repeatWhen_1","retry","RetryOperator","RetrySubscriber","retry_1","retryWhen","RetryWhenOperator","RetryWhenSubscriber","errors","retryWhen_1","sample","SampleOperator","sampleSubscriber","SampleSubscriber","sample_1","sampleTime","SampleTimeOperator","dispatchNotification","SampleTimeSubscriber","sampleTime_1","scan","ScanOperator","ScanSubscriber","_seed","scan_1","sequenceEqual","compareTo","comparor","SequenceEqualOperator","SequenceEqualSubscriber","_b","_oneComplete","SequenceEqualCompareToSubscriber","emit","checkValues","_c","a","b","areEqual","nextB","sequenceEqual_1","shareSubjectFactory","share","refCount","share_1","subjectOrSubjectFactory","subjectFactory","MulticastOperator","connectable","ConnectableObservable_1","connectableObservableDescriptor","shareReplay","_isComplete","shareReplay_1","single","SingleOperator","SingleSubscriber","seenValue","applySingleValue","singleValue","single_1","skip","SkipOperator","SkipSubscriber","skip_1","skipLast","SkipLastOperator","_skipCount","SkipLastSubscriber","_ring","skipCount","currentIndex","ring","oldValue","skipLast_1","skipUntil","SkipUntilOperator","SkipUntilSubscriber","isInnerStopped","skipUntil_1","skipWhile","SkipWhileOperator","SkipWhileSubscriber","skipping","tryCallPredicate","skipWhile_1","MergeAllSubscriber","startWith","array","startWith_1","asap_1","SubscribeOnObservable","delayTime","asap","subscribeOn","SubscribeOnOperator","SubscribeOnObservable_1","subscribeOn_1","_switch","SwitchOperator","SwitchSubscriber","unsubscribeInner","switch_1","switch","switchMap","SwitchMapOperator","SwitchMapSubscriber","_tryNotifyNext","switchMap_1","switchMapTo","SwitchMapToOperator","SwitchMapToSubscriber","inner","tryResultSelector","switchMapTo_1","take","TakeOperator","TakeSubscriber","take_1","takeLast","TakeLastOperator","TakeLastSubscriber","takeLast_1","takeUntil","TakeUntilOperator","TakeUntilSubscriber","takeUntil_1","takeWhile","TakeWhileOperator","TakeWhileSubscriber","nextOrComplete","predicateResult","takeWhile_1","throttle_1","throttle","config","defaultThrottleConfig","ThrottleOperator","leading","trailing","ThrottleSubscriber","_leading","_trailing","_hasTrailingValue","_trailingValue","tryDurationSelector","_sendTrailing","throttleTime","ThrottleTimeOperator","ThrottleTimeSubscriber","throttleTime_1","timeInterval_1","timeInterval","timeout","due","absoluteTimeout","waitFor","TimeoutOperator","TimeoutError_1","TimeoutError","errorInstance","TimeoutSubscriber","scheduleTimeout","dispatchTimeout","timeout_1","Date","timeoutWith","withObservable","TimeoutWithOperator","TimeoutWithSubscriber","timeoutWith_1","timestamp_1","timestamp","toArray","ToArrayOperator","ToArraySubscriber","toArray_1","toPromise","PromiseCtor","Rx","Promise","resolve","reject","toPromise_1","window","windowBoundaries","WindowOperator","windowSubscriber","WindowSubscriber","sourceSubscription","openWindow","prevWindow","newWindow","window_1","windowCount","windowSize","startWindowEvery","WindowCountOperator","WindowCountSubscriber","windows","c","windowCount_1","val","parseFloat","windowTimeSpan","windowCreationInterval","maxWindowSize","WindowTimeOperator","dispatchWindowTimeSpanOnly","closeWindow","dispatchWindowCreation","timeSpanState","dispatchWindowClose","WindowTimeSubscriber","CountedSubject","_numberOfNextedValues","numberOfNextedValues","window_2","windowTime_1","windowToggle","WindowToggleOperator","WindowToggleSubscriber","openSubscription","windowToggle_1","windowWhen","unsubscribeClosingNotification","closingNotification","windowWhen_1","withLatestFrom","WithLatestFromOperator","WithLatestFromSubscriber","found","withLatestFrom_1","zipProto","InnerSubscriber","outerSubscriber","InnerSubscriber_1","item","obs","isObject_1","isObject","msg","ZipOperator","ZipSubscriber","iterators","StaticArrayIterator","StaticIterator","ZipBufferIterator","stillUnsubscribed","notifyInactive","checkIterators","shouldComplete","nextResult","isComplete","zipAll","zipAll_1","hasNext","thrownError","EMPTY","ObserveOnOperator","scheduleMessage","ObserveOnMessage","queue_1","ObjectUnsubscribedError_1","SubjectSubscription_1","_events","_bufferSize","_windowTime","_getNow","ReplayEvent","_trimBufferThenGetEvents","ObjectUnsubscribedError","SubjectSubscription","eventsCount","spliceCount","_value","getValue","ConnectableObservable","_refCount","getSubject","_subject","connect","connection","_connection","ConnectableSubscriber","RefCountOperator","connectableProto","writable","SubjectSubscriber","refCounter","RefCountSubscriber","sharedConnection","name","stack","TimeIntervalOperator","TimeInterval","TimeIntervalSubscriber","lastTime","span","TimestampOperator","Timestamp","TimestampSubscriber","kind","accept","toObservable","undefinedValueNotification","completeNotification","SubscriptionLoggable_1","applyMixins_1","ColdObservable","messages","logSubscribedFrame","logUnsubscribedFrame","scheduleMessages","messagesLength","frame","applyMixins","SubscriptionLoggable","subscriberIndex","rxSubscriber_1","rxSubscriber","copy","_trySubscribe","asObservable","SubscriptionLog_1","SubscriptionLog","subscriptionLogs","oldSubscriptionLog","subscribedFrame","derivedCtor","baseCtors","baseCtor","propertyKeys","getOwnPropertyNames","j","len2","name_1","HotObservable","setup","unsubscribedFrame","ColdObservable_1","HotObservable_1","VirtualTimeScheduler_1","defaultMaxFrame","TestScheduler","assertDeepEqual","VirtualAction","hotObservables","coldObservables","flushTests","createTime","marbles","frameTimeFactor","createColdObservable","parseMarbles","cold","createHotObservable","materializeInnerObservable","outerFrame","expectObservable","unsubscriptionMarbles","actual","flushTest","ready","unsubscriptionFrame","parseMarblesAsSubscriptions","toBe","errorValue","expected","expectSubscriptions","actualSubscriptionLogs","marblesArray","flush","readyFlushTests","test","groupStart","subscriptionFrame","materializeInnerObservables","testMessages","subIndex","frameOffset","VirtualTimeScheduler","AsyncAction_1","AsyncScheduler_1","SchedulerAction","maxFrames","actions","execute","AsyncScheduler","work","id","requestAsyncId","sort","sortActions","recycleAsyncId","_execute","AsyncAction","toSubscriber","Observer_1","toSubscriber_1","observerOrNext","sink","destinationOrNext","SafeSubscriber","_parent","_parents","_parentSubscriber","bind","_context","__tryOrSetError","__tryOrUnsub","wrappedComplete","fn","MapOperator","MapSubscriber","getCORSRequest","XMLHttpRequest","XDomainRequest","getXMLHttpRequest","progId","progIds","ActiveXObject","ajaxGet","headers","method","ajaxPost","body","ajaxDelete","ajaxPut","ajaxPatch","ajaxGetJSON","responseType","response","urlOrRequest","request","createXHR","crossDomain","withCredentials","prop","AjaxSubscriber","post","put","patch","getJSON","FormData","serializeBody","xhr","AjaxResponse","user","password","setupEvents","open","setHeaders","contentType","splitIndex","substring","encodeURI","join","stringify","setRequestHeader","xhrTimeout","progressSubscriber","AjaxTimeoutError","xhrReadyStateChange","status_1","status","responseText","AjaxError","ontimeout","upload","xhrProgress_1","onprogress","xhrError_1","onreadystatechange","abort","originalEvent","responseXML","ImmediateDefinition","setImmediate","clearImmediate","nextHandle","tasksByHandle","currentlyRunningATask","canUseProcessNextTick","createProcessNextTickSetImmediate","canUsePostMessage","createPostMessageSetImmediate","canUseMessageChannel","createMessageChannelSetImmediate","canUseReadyStateChange","createReadyStateChangeSetImmediate","createSetTimeoutSetImmediate","ci","handle","instance","identify","process","MessageChannel","document","createElement","postMessage","importScripts","postMessageIsAsynchronous_1","oldOnMessage","partiallyApplied","Function","addFromSetImmediateArguments","nextTick","runIfPresent","messagePrefix","random","onGlobalMessage","globalMessageHandler","event","task","channel","port1","port2","doc","html","documentElement","script","removeChild","appendChild","Immediate","Immediate_1","AsapAction","scheduled","AsapScheduler","AsapAction_1","AsapScheduler_1","QueueAction","QueueScheduler","QueueAction_1","QueueScheduler_1","tryCatcher","tryCatchTarget","UnsubscriptionError","flattenUnsubscriptionErrors","errs","UnsubscriptionError_1","_subscriptions","hasErrors","trial","sub","teardown","_addParent","tmp","subscriptionIndex","Action","Action_1","pending","setInterval","clearInterval","RequestAnimationFrameDefinition","requestAnimationFrame","cancelAnimationFrame","mozRequestAnimationFrame","mozCancelAnimationFrame","webkitRequestAnimationFrame","webkitCancelAnimationFrame","msRequestAnimationFrame","msCancelAnimationFrame","oRequestAnimationFrame","oCancelAnimationFrame","clearTimeout","AnimationFrame","AnimationFrame_1","AnimationFrameAction","Scheduler","Scheduler_1","AnimationFrameScheduler","AnimationFrameAction_1","AnimationFrameScheduler_1","animationFrame","Symbol","for","$$rxSubscriber","symbolIteratorPonyfill","$$iterator","__window","__self","WorkerGlobalScope","__global","global","_root","getSymbolObservable","$$observable","TestScheduler_1","animationFrame_1"],"mappings":"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","file":"Rx.min.js","sourcesContent":["import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { IScheduler } from '../Scheduler';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create(callbackFunc: (callback: () => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<void>;\n  static create<R>(callbackFunc: (callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<R>(callbackFunc: (callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a callback API to a function that returns an Observable.\n   *\n   * <span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\n   * it will return a function `g` that when called as `g(x)` will output an\n   * Observable.</span>\n   *\n   * `bindCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, but the\n   * last parameter must be a callback function that `func` calls when it is\n   * done.\n   *\n   * The output of `bindCallback` is a function that takes the same parameters\n   * as `func`, except the last one (the callback). When the output function\n   * is called with arguments, it will return an Observable. If `func` function\n   * calls its callback with one argument, the Observable will emit that value.\n   * If on the other hand callback is called with multiple values, resulting\n   * Observable will emit an array with these arguments.\n   *\n   * It is very important to remember, that input function `func` is not called\n   * when output function is, but rather when Observable returned by output\n   * function is subscribed. This means if `func` makes AJAX request, that request\n   * will be made every time someone subscribes to resulting Observable, but not before.\n   *\n   * Optionally, selector function can be passed to `bindObservable`. That function\n   * takes the same arguments as callback, and returns value\n   * that will be emitted by Observable instead of callback parameters themselves.\n   * Even though by default multiple arguments passed to callback appear in the stream as array,\n   * selector function will be called with arguments directly, just as callback would.\n   * This means you can imagine default selector (when one is not provided explicitly)\n   * as function that aggregates all its arguments into array, or simply returns first argument,\n   * if there is only one.\n   *\n   * Last optional parameter - {@link Scheduler} - can be used to control when call\n   * to `func` happens after someone subscribes to Observable, as well as when results\n   * passed to callback will be emitted. By default subscription to Observable calls `func`\n   * synchronously, but using `Scheduler.async` as last parameter will defer call to input function,\n   * just like wrapping that call in `setTimeout` with time `0` would. So if you use async Scheduler\n   * and call `subscribe` on output Observable, all function calls that are currently executing,\n   * will end before `func` is invoked.\n   *\n   * When it comes to emitting results passed to callback, by default they are emitted\n   * immediately after `func` invokes callback. In particular, if callback is called synchronously,\n   * then subscription to resulting Observable will call `next` function synchronously as well.\n   * If you want to defer that call, using `Scheduler.async` will, again, do the job.\n   * This means that by using `Scheduler.async` you can, in a sense, ensure that `func`\n   * always calls its callback asynchronously, thus avoiding terrifying Zalgo.\n   *\n   * Note that Observable created by output function will always emit only one value\n   * and then complete right after. Even if `func` calls callback multiple times, values from\n   * second and following calls will never appear in the stream. If you need to\n   * listen for multiple calls, you probably want to use {@link fromEvent} or\n   * {@link fromEventPattern} instead.\n   *\n   * If `func` depends on some context (`this` property), that context will be set\n   * to the same context that output function has at call time. In particular, if `func`\n   * is called as method of some object, in order to preserve proper behaviour,\n   * it is recommended to set context of output function to that object as well,\n   * provided `func` is not already bound.\n   *\n   * If input function calls its callback in \"node style\" (i.e. first argument to callback is\n   * optional error parameter signaling whether call failed or not), {@link bindNodeCallback}\n   * provides convenient error handling and probably is a better choice.\n   * `bindCallback` will treat such functions without any difference and error parameter\n   * (whether passed or not) will always be interpreted as regular callback argument.\n   *\n   *\n   * @example <caption>Convert jQuery's getJSON to an Observable API</caption>\n   * // Suppose we have jQuery.getJSON('/my/url', callback)\n   * var getJSONAsObservable = Rx.Observable.bindCallback(jQuery.getJSON);\n   * var result = getJSONAsObservable('/my/url');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   *\n   * @example <caption>Receive array of arguments passed to callback</caption>\n   * someFunction((a, b, c) => {\n   *   console.log(a); // 5\n   *   console.log(b); // 'some string'\n   *   console.log(c); // {someProperty: 'someValue'}\n   * });\n   *\n   * const boundSomeFunction = Rx.Observable.bindCallback(someFunction);\n   * boundSomeFunction().subscribe(values => {\n   *   console.log(values) // [5, 'some string', {someProperty: 'someValue'}]\n   * });\n   *\n   *\n   * @example <caption>Use bindCallback with selector function</caption>\n   * someFunction((a, b, c) => {\n   *   console.log(a); // 'a'\n   *   console.log(b); // 'b'\n   *   console.log(c); // 'c'\n   * });\n   *\n   * const boundSomeFunction = Rx.Observable.bindCallback(someFunction, (a, b, c) => a + b + c);\n   * boundSomeFunction().subscribe(value => {\n   *   console.log(value) // 'abc'\n   * });\n   *\n   *\n   * @example <caption>Compare behaviour with and without async Scheduler</caption>\n   * function iCallMyCallbackSynchronously(cb) {\n   *   cb();\n   * }\n   *\n   * const boundSyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously);\n   * const boundAsyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously, null, Rx.Scheduler.async);\n   *\n   * boundSyncFn().subscribe(() => console.log('I was sync!'));\n   * boundAsyncFn().subscribe(() => console.log('I was async!'));\n   * console.log('This happened...');\n   *\n   * // Logs:\n   * // I was sync!\n   * // This happened...\n   * // I was async!\n   *\n   *\n   * @example <caption>Use bindCallback on object method</caption>\n   * const boundMethod = Rx.Observable.bindCallback(someObject.methodWithCallback);\n   * boundMethod.call(someObject) // make sure methodWithCallback has access to someObject\n   * .subscribe(subscriber);\n   *\n   *\n   * @see {@link bindNodeCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func Function with a callback as the last parameter.\n   * @param {function} [selector] A function which takes the arguments from the\n   * callback and maps those to a value to emit on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the callback would deliver.\n   * @static true\n   * @name bindCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: IScheduler): (...args: any[]) => Observable<T> {\n    return function(this: any, ...args: any[]): Observable<T> {\n      return new BoundCallbackObservable<T>(func, <any>selector, args, this, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              private context: any,\n              private scheduler: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n          } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(BoundCallbackObservable.dispatch, 0, { source: this, subscriber, context: this.context });\n    }\n  }\n\n  static dispatch<T>(state: { source: BoundCallbackObservable<T>, subscriber: Subscriber<T>, context: any }) {\n    const self = (<Subscription><any>this);\n    const { source, subscriber, context } = state;\n    const { callbackFunc, args, scheduler } = source;\n    let subject = source.subject;\n\n    if (!subject) {\n      subject = source.subject = new AsyncSubject<T>();\n\n      const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n        const source = (<any>handlerFn).source;\n        const { selector, subject } = source;\n        if (selector) {\n          const result = tryCatch(selector).apply(this, innerArgs);\n          if (result === errorObject) {\n            self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n          } else {\n            self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n          }\n        } else {\n          const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n          self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n        }\n      };\n      // use named function to pass values in without closure\n      (<any>handler).source = source;\n\n      const result = tryCatch(callbackFunc).apply(context, args.concat(handler));\n      if (result === errorObject) {\n        subject.error(errorObject.e);\n      }\n    }\n\n    self.add(subject.subscribe(subscriber));\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import {  BoundCallbackObservable  } from './BoundCallbackObservable';\n\nexport const bindCallback = BoundCallbackObservable.create;","import { Observable } from '../../Observable';\nimport { bindCallback as staticBindCallback } from '../../observable/bindCallback';\n\nObservable.bindCallback = staticBindCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindCallback: typeof staticBindCallback;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundNodeCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create<R>(callbackFunc: (callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a Node.js-style callback API to a function that returns an\n   * Observable.\n   *\n   * <span class=\"informal\">It's just like {@link bindCallback}, but the\n   * callback is expected to be of type `callback(error, result)`.</span>\n   *\n   * `bindNodeCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, but the\n   * last parameter must be a callback function that `func` calls when it is\n   * done. The callback function is expected to follow Node.js conventions,\n   * where the first argument to the callback is an error object, signaling\n   * whether call was successful. If that object is passed to callback, it means\n   * something went wrong.\n   *\n   * The output of `bindNodeCallback` is a function that takes the same\n   * parameters as `func`, except the last one (the callback). When the output\n   * function is called with arguments, it will return an Observable.\n   * If `func` calls its callback with error parameter present, Observable will\n   * error with that value as well. If error parameter is not passed, Observable will emit\n   * second parameter. If there are more parameters (third and so on),\n   * Observable will emit an array with all arguments, except first error argument.\n   *\n   * Optionally `bindNodeCallback` accepts selector function, which allows you to\n   * make resulting Observable emit value computed by selector, instead of regular\n   * callback arguments. It works similarly to {@link bindCallback} selector, but\n   * Node.js-style error argument will never be passed to that function.\n   *\n   * Note that `func` will not be called at the same time output function is,\n   * but rather whenever resulting Observable is subscribed. By default call to\n   * `func` will happen synchronously after subscription, but that can be changed\n   * with proper {@link Scheduler} provided as optional third parameter. Scheduler\n   * can also control when values from callback will be emitted by Observable.\n   * To find out more, check out documentation for {@link bindCallback}, where\n   * Scheduler works exactly the same.\n   *\n   * As in {@link bindCallback}, context (`this` property) of input function will be set to context\n   * of returned function, when it is called.\n   *\n   * After Observable emits value, it will complete immediately. This means\n   * even if `func` calls callback again, values from second and consecutive\n   * calls will never appear on the stream. If you need to handle functions\n   * that call callbacks multiple times, check out {@link fromEvent} or\n   * {@link fromEventPattern} instead.\n   *\n   * Note that `bindNodeCallback` can be used in non-Node.js environments as well.\n   * \"Node.js-style\" callbacks are just a convention, so if you write for\n   * browsers or any other environment and API you use implements that callback style,\n   * `bindNodeCallback` can be safely used on that API functions as well.\n   *\n   * Remember that Error object passed to callback does not have to be an instance\n   * of JavaScript built-in `Error` object. In fact, it does not even have to an object.\n   * Error parameter of callback function is interpreted as \"present\", when value\n   * of that parameter is truthy. It could be, for example, non-zero number, non-empty\n   * string or boolean `true`. In all of these cases resulting Observable would error\n   * with that value. This means usually regular style callbacks will fail very often when\n   * `bindNodeCallback` is used. If your Observable errors much more often then you\n   * would expect, check if callback really is called in Node.js-style and, if not,\n   * switch to {@link bindCallback} instead.\n   *\n   * Note that even if error parameter is technically present in callback, but its value\n   * is falsy, it still won't appear in array emitted by Observable or in selector function.\n   *\n   *\n   * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>\n   * import * as fs from 'fs';\n   * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);\n   * var result = readFileAsObservable('./roadNames.txt', 'utf8');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   *\n   * @example <caption>Use on function calling callback with multiple arguments</caption>\n   * someFunction((err, a, b) => {\n   *   console.log(err); // null\n   *   console.log(a); // 5\n   *   console.log(b); // \"some string\"\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n   * boundSomeFunction()\n   * .subscribe(value => {\n   *   console.log(value); // [5, \"some string\"]\n   * });\n   *\n   *\n   * @example <caption>Use with selector function</caption>\n   * someFunction((err, a, b) => {\n   *   console.log(err); // undefined\n   *   console.log(a); // \"abc\"\n   *   console.log(b); // \"DEF\"\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction, (a, b) => a + b);\n   * boundSomeFunction()\n   * .subscribe(value => {\n   *   console.log(value); // \"abcDEF\"\n   * });\n   *\n   *\n   * @example <caption>Use on function calling callback in regular style</caption>\n   * someFunction(a => {\n   *   console.log(a); // 5\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n   * boundSomeFunction()\n   * .subscribe(\n   *   value => {}             // never gets called\n   *   err => console.log(err) // 5\n   *);\n   *\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func Function with a Node.js-style callback as the last parameter.\n   * @param {function} [selector] A function which takes the arguments from the\n   * callback and maps those to a value to emit on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the Node.js callback would\n   * deliver.\n   * @static true\n   * @name bindNodeCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: IScheduler): (...args: any[]) => Observable<T> {\n    return function(this: any, ...args: any[]): Observable<T> {\n      return new BoundNodeCallbackObservable<T>(func, <any>selector, args, this, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              private context: any,\n              public scheduler: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          const err = innerArgs.shift();\n\n          if (err) {\n            subject.error(err);\n          } else if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n            } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(dispatch, 0, { source: this, subscriber, context: this.context });\n    }\n  }\n}\n\ninterface DispatchState<T> {\n  source: BoundNodeCallbackObservable<T>;\n  subscriber: Subscriber<T>;\n  context: any;\n}\n\nfunction dispatch<T>(this: Action<DispatchState<T>>, state: DispatchState<T>) {\n  const self = (<Subscription> this);\n  const { source, subscriber, context } = state;\n  // XXX: cast to `any` to access to the private field in `source`.\n  const { callbackFunc, args, scheduler } = source as any;\n  let subject = source.subject;\n\n  if (!subject) {\n    subject = source.subject = new AsyncSubject<T>();\n\n    const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n      const source = (<any>handlerFn).source;\n      const { selector, subject } = source;\n      const err = innerArgs.shift();\n\n      if (err) {\n        self.add(scheduler.schedule(dispatchError, 0, { err, subject }));\n      } else if (selector) {\n        const result = tryCatch(selector).apply(this, innerArgs);\n        if (result === errorObject) {\n          self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n        } else {\n          self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n        }\n      } else {\n        const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n        self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n      }\n    };\n    // use named function to pass values in without closure\n    (<any>handler).source = source;\n\n    const result = tryCatch(callbackFunc).apply(context, args.concat(handler));\n    if (result === errorObject) {\n      self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n    }\n  }\n\n  self.add(subject.subscribe(subscriber));\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import {  BoundNodeCallbackObservable  } from './BoundNodeCallbackObservable';\n\nexport const bindNodeCallback = BoundNodeCallbackObservable.create;","import { Observable } from '../../Observable';\nimport { bindNodeCallback as staticBindNodeCallback } from '../../observable/bindNodeCallback';\n\nObservable.bindNodeCallback = staticBindNodeCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindNodeCallback: typeof staticBindNodeCallback;\n  }\n}","import {  Observable, ObservableInput  } from '../Observable';\nimport {  IScheduler  } from '../Scheduler';\nimport {  isScheduler  } from '../util/isScheduler';\nimport {  isArray  } from '../util/isArray';\nimport {  ArrayObservable  } from './ArrayObservable';\nimport {  CombineLatestOperator  } from '../operator/combineLatest';\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function combineLatest<T, R>(v1: ObservableInput<T>, project: (v1: T) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R, scheduler?: IScheduler): Observable<R>;\n\nexport function combineLatest<T>(array: ObservableInput<T>[], scheduler?: IScheduler): Observable<T[]>;\nexport function combineLatest<R>(array: ObservableInput<any>[], scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T>(...observables: Array<ObservableInput<T> | IScheduler>): Observable<T[]>;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R) | IScheduler>): Observable<R>;\nexport function combineLatest<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R) | IScheduler>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable in order and,\n * whenever any Observable emits, collecting an array of the most recent\n * values from each Observable. So if you pass `n` Observables to operator,\n * returned Observable will always emit an array of `n` values, in order\n * corresponding to order of passed Observables (value from the first Observable\n * on the first place and so on).\n *\n * Static version of `combineLatest` accepts either an array of Observables\n * or each Observable can be put directly as an argument. Note that array of\n * Observables is good choice, if you don't know beforehand how many Observables\n * you will combine. Passing empty array will result in Observable that\n * completes immediately.\n *\n * To ensure output array has always the same length, `combineLatest` will\n * actually wait for all input Observables to emit at least once,\n * before it starts emitting results. This means if some Observable emits\n * values before other Observables started emitting, all that values but last\n * will be lost. On the other hand, is some Observable does not emit value but\n * completes, resulting Observable will complete at the same moment without\n * emitting anything, since it will be now impossible to include value from\n * completed Observable in resulting array. Also, if some input Observable does\n * not emit any value and never completes, `combineLatest` will also never emit\n * and never complete, since, again, it will wait for all streams to emit some\n * value.\n *\n * If at least one Observable was passed to `combineLatest` and all passed Observables\n * emitted something, resulting Observable will complete when all combined\n * streams complete. So even if some Observable completes, result of\n * `combineLatest` will still emit values when other Observables do. In case\n * of completed Observable, its value from now on will always be the last\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\n * will error immediately as well, and all other Observables will be unsubscribed.\n *\n * `combineLatest` accepts as optional parameter `project` function, which takes\n * as arguments all values that would normally be emitted by resulting Observable.\n * `project` can return any kind of value, which will be then emitted by Observable\n * instead of default array. Note that `project` does not take as argument that array\n * of values, but values themselves. That means default `project` can be imagined\n * as function that takes all its arguments and puts them into an array.\n *\n *\n * @example <caption>Combine two timer Observables</caption>\n * const firstTimer = Rx.Observable.timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\n * const secondTimer = Rx.Observable.timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\n * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n *\n *\n * @example <caption>Combine an array of Observables</caption>\n * const observables = [1, 5, 10].map(\n *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // emit 0 and then emit n after n seconds\n * );\n * const combined = Rx.Observable.combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0, 0] immediately\n * // [1, 0, 0] after 1s\n * // [1, 5, 0] after 5s\n * // [1, 5, 10] after 10s\n *\n *\n * @example <caption>Use project function to dynamically calculate the Body-Mass Index</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} observable1 An input Observable to combine with other Observables.\n * @param {ObservableInput} observable2 An input Observable to combine with other Observables.\n * More than one input Observables may be given as arguments\n * or an array of Observables may be given as the first argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @static true\n * @name combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<any | ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    (((...values: Array<any>) => R)) |\n                                                    IScheduler>): Observable<R> {\n  let project: (...values: Array<any>) => R =  null;\n  let scheduler: IScheduler = null;\n\n  if (isScheduler(observables[observables.length - 1])) {\n    scheduler = <IScheduler>observables.pop();\n  }\n\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <Array<Observable<any>>>observables[0];\n  }\n\n  return new ArrayObservable(observables, scheduler).lift(new CombineLatestOperator<T, R>(project));\n}","import { Observable } from '../../Observable';\nimport { combineLatest as combineLatestStatic } from '../../observable/combineLatest';\n\nObservable.combineLatest = combineLatestStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let combineLatest: typeof combineLatestStatic;\n  }\n}","import {  concatStatic  } from '../operator/concat';\n\nexport const concat = concatStatic;","import { Observable } from '../../Observable';\nimport { concat as concatStatic } from '../../observable/concat';\n\nObservable.concat = concatStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let concat: typeof concatStatic;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class DeferObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that, on subscribe, calls an Observable factory to\n   * make an Observable for each new Observer.\n   *\n   * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n   * is subscribed.\n   * </span>\n   *\n   * <img src=\"./img/defer.png\" width=\"100%\">\n   *\n   * `defer` allows you to create the Observable only when the Observer\n   * subscribes, and create a fresh Observable for each Observer. It waits until\n   * an Observer subscribes to it, and then it generates an Observable,\n   * typically with an Observable factory function. It does this afresh for each\n   * subscriber, so although each subscriber may think it is subscribing to the\n   * same Observable, in fact each subscriber gets its own individual\n   * Observable.\n   *\n   * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>\n   * var clicksOrInterval = Rx.Observable.defer(function () {\n   *   if (Math.random() > 0.5) {\n   *     return Rx.Observable.fromEvent(document, 'click');\n   *   } else {\n   *     return Rx.Observable.interval(1000);\n   *   }\n   * });\n   * clicksOrInterval.subscribe(x => console.log(x));\n   *\n   * // Results in the following behavior:\n   * // If the result of Math.random() is greater than 0.5 it will listen\n   * // for clicks anywhere on the \"document\"; when document is clicked it\n   * // will log a MouseEvent object to the console. If the result is less\n   * // than 0.5 it will emit ascending numbers, one every second(1000ms).\n   *\n   * @see {@link create}\n   *\n   * @param {function(): SubscribableOrPromise} observableFactory The Observable\n   * factory function to invoke for each Observer that subscribes to the output\n   * Observable. May also return a Promise, which will be converted on the fly\n   * to an Observable.\n   * @return {Observable} An Observable whose Observers' subscriptions trigger\n   * an invocation of the given Observable factory function.\n   * @static true\n   * @name defer\n   * @owner Observable\n   */\n  static create<T>(observableFactory: () => SubscribableOrPromise<T> | void): Observable<T> {\n    return new DeferObservable(observableFactory);\n  }\n\n  constructor(private observableFactory: () => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    return new DeferSubscriber(subscriber, this.observableFactory);\n  }\n}\n\nclass DeferSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private factory: () => SubscribableOrPromise<T> | void) {\n    super(destination);\n    this.tryDefer();\n  }\n\n  private tryDefer(): void {\n    try {\n      this._callFactory();\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private _callFactory(): void {\n    const result = this.factory();\n    if (result) {\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","import {  DeferObservable  } from './DeferObservable';\n\nexport const defer = DeferObservable.create;","import { Observable } from '../../Observable';\nimport { defer as staticDefer } from '../../observable/defer';\n\nObservable.defer = staticDefer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let defer: typeof staticDefer;\n  }\n}","import {  EmptyObservable  } from './EmptyObservable';\n\nexport const empty = EmptyObservable.create;","import { Observable } from '../../Observable';\nimport { empty as staticEmpty } from '../../observable/empty';\n\nObservable.empty = staticEmpty;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let empty: typeof staticEmpty;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { EmptyObservable } from './EmptyObservable';\nimport { isArray } from '../util/isArray';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ForkJoinObservable<T> extends Observable<T> {\n  constructor(private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super();\n  }\n\n  /* tslint:disable:max-line-length */\n  static create<T, T2>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>): Observable<[T, T2]>;\n  static create<T, T2, T3>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>): Observable<[T, T2, T3]>;\n  static create<T, T2, T3, T4>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>): Observable<[T, T2, T3, T4]>;\n  static create<T, T2, T3, T4, T5>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>): Observable<[T, T2, T3, T4, T5]>;\n  static create<T, T2, T3, T4, T5, T6>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n  static create<T, R>(v1: SubscribableOrPromise<T>, project: (v1: T) => R): Observable<R>;\n  static create<T, T2, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  static create<T, T2, T3, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  static create<T, T2, T3, T4, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n  static create<T>(sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(sources: SubscribableOrPromise<any>[]): Observable<R>;\n  static create<T, R>(sources: SubscribableOrPromise<T>[], project: (...values: Array<T>) => R): Observable<R>;\n  static create<R>(sources: SubscribableOrPromise<any>[], project: (...values: Array<any>) => R): Observable<R>;\n  static create<T>(...sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(...sources: SubscribableOrPromise<any>[]): Observable<R>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * @param sources\n   * @return {any}\n   * @static true\n   * @name forkJoin\n   * @owner Observable\n   */\n  static create<T>(...sources: Array<SubscribableOrPromise<any> |\n                                  Array<SubscribableOrPromise<any>> |\n                                  ((...values: Array<any>) => any)>): Observable<T> {\n    if (sources === null || arguments.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    let resultSelector: (...values: Array<any>) => any = null;\n    if (typeof sources[sources.length - 1] === 'function') {\n      resultSelector = <(...values: Array<any>) => any>sources.pop();\n    }\n\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`\n    if (sources.length === 1 && isArray(sources[0])) {\n      sources = <Array<SubscribableOrPromise<any>>>sources[0];\n    }\n\n    if (sources.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    return new ForkJoinObservable(<Array<SubscribableOrPromise<any>>>sources, resultSelector);\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ForkJoinSubscriber<T> extends OuterSubscriber<T, T> {\n  private completed = 0;\n  private total: number;\n  private values: any[];\n  private haveValues = 0;\n\n  constructor(destination: Subscriber<T>,\n              private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super(destination);\n\n    const len = sources.length;\n    this.total = len;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      const source = sources[i];\n      const innerSubscription = subscribeToResult(this, source, null, i);\n\n      if (innerSubscription) {\n        (<any> innerSubscription).outerIndex = i;\n        this.add(innerSubscription);\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values[outerIndex] = innerValue;\n    if (!(<any>innerSub)._hasValue) {\n      (<any>innerSub)._hasValue = true;\n      this.haveValues++;\n    }\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, T>): void {\n    const destination = this.destination;\n    const { haveValues, resultSelector, values } = this;\n    const len = values.length;\n\n    if (!(<any>innerSub)._hasValue) {\n      destination.complete();\n      return;\n    }\n\n    this.completed++;\n\n    if (this.completed !== len) {\n      return;\n    }\n\n    if (haveValues === len) {\n      const value = resultSelector ? resultSelector.apply(this, values) : values;\n      destination.next(value);\n    }\n\n    destination.complete();\n  }\n}","import {  ForkJoinObservable  } from './ForkJoinObservable';\n\nexport const forkJoin = ForkJoinObservable.create;","import { Observable } from '../../Observable';\nimport { forkJoin as staticForkJoin } from '../../observable/forkJoin';\n\nObservable.forkJoin = staticForkJoin;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let forkJoin: typeof staticForkJoin;\n  }\n}","import {  FromObservable  } from './FromObservable';\n\nexport const from = FromObservable.create;","import { Observable } from '../../Observable';\nimport { from as staticFrom } from '../../observable/from';\n\nObservable.from = staticFrom;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let from: typeof staticFrom;\n  }\n}","import { Observable } from '../Observable';\nimport { tryCatch } from '../util/tryCatch';\nimport { isFunction } from '../util/isFunction';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\nconst toString: Function = Object.prototype.toString;\n\nexport type NodeStyleEventEmitter = {\n  addListener: (eventName: string, handler: Function) => void;\n  removeListener: (eventName: string, handler: Function) => void;\n};\nfunction isNodeStyleEventEmitter(sourceObj: any): sourceObj is NodeStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\n\nexport type JQueryStyleEventEmitter = {\n  on: (eventName: string, handler: Function) => void;\n  off: (eventName: string, handler: Function) => void;\n};\nfunction isJQueryStyleEventEmitter(sourceObj: any): sourceObj is JQueryStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\n\nfunction isNodeList(sourceObj: any): sourceObj is NodeList {\n  return !!sourceObj && toString.call(sourceObj) === '[object NodeList]';\n}\n\nfunction isHTMLCollection(sourceObj: any): sourceObj is HTMLCollection {\n  return !!sourceObj && toString.call(sourceObj) === '[object HTMLCollection]';\n}\n\nfunction isEventTarget(sourceObj: any): sourceObj is EventTarget {\n  return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n\nexport type EventTargetLike = EventTarget | NodeStyleEventEmitter | JQueryStyleEventEmitter | NodeList | HTMLCollection;\n\nexport type EventListenerOptions = {\n  capture?: boolean;\n  passive?: boolean;\n  once?: boolean;\n} | boolean;\n\nexport type SelectorMethodSignature<T> = (...args: Array<any>) => T;\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventObservable<T> extends Observable<T> {\n\n  /* tslint:disable:max-line-length */\n  static create<T>(target: EventTargetLike, eventName: string): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, selector: SelectorMethodSignature<T>): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions, selector: SelectorMethodSignature<T>): Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Creates an Observable that emits events of a specific type coming from the\n   * given event target.\n   *\n   * <span class=\"informal\">Creates an Observable from DOM events, or Node\n   * EventEmitter events or others.</span>\n   *\n   * <img src=\"./img/fromEvent.png\" width=\"100%\">\n   *\n   * Creates an Observable by attaching an event listener to an \"event target\",\n   * which may be an object with `addEventListener` and `removeEventListener`,\n   * a Node.js EventEmitter, a jQuery style EventEmitter, a NodeList from the\n   * DOM, or an HTMLCollection from the DOM. The event handler is attached when\n   * the output Observable is subscribed, and removed when the Subscription is\n   * unsubscribed.\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * var clicks = Rx.Observable.fromEvent(document, 'click');\n   * clicks.subscribe(x => console.log(x));\n   *\n   * // Results in:\n   * // MouseEvent object logged to console everytime a click\n   * // occurs on the document.\n   *\n   * @see {@link from}\n   * @see {@link fromEventPattern}\n   *\n   * @param {EventTargetLike} target The DOMElement, event target, Node.js\n   * EventEmitter, NodeList or HTMLCollection to attach the event handler to.\n   * @param {string} eventName The event name of interest, being emitted by the\n   * `target`.\n   * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n   * @param {SelectorMethodSignature<T>} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEvent\n   * @owner Observable\n   */\n  static create<T>(target: EventTargetLike,\n                   eventName: string,\n                   options?: EventListenerOptions,\n                   selector?: SelectorMethodSignature<T>): Observable<T> {\n    if (isFunction(options)) {\n      selector = <any>options;\n      options = undefined;\n    }\n    return new FromEventObservable(target, eventName, selector, options);\n  }\n\n  constructor(private sourceObj: EventTargetLike,\n              private eventName: string,\n              private selector?: SelectorMethodSignature<T>,\n              private options?: EventListenerOptions) {\n    super();\n  }\n\n  private static setupSubscription<T>(sourceObj: EventTargetLike,\n                                      eventName: string,\n                                      handler: Function,\n                                      subscriber: Subscriber<T>,\n                                      options?: EventListenerOptions) {\n    let unsubscribe: () => void;\n    if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n      for (let i = 0, len = sourceObj.length; i < len; i++) {\n        FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n      }\n    } else if (isEventTarget(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addEventListener(eventName, <EventListener>handler, <boolean>options);\n      unsubscribe = () => source.removeEventListener(eventName, <EventListener>handler);\n    } else if (isJQueryStyleEventEmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.on(eventName, handler);\n      unsubscribe = () => source.off(eventName, handler);\n    } else if (isNodeStyleEventEmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addListener(eventName, handler);\n      unsubscribe = () => source.removeListener(eventName, handler);\n    } else {\n      throw new TypeError('Invalid event target');\n    }\n\n    subscriber.add(new Subscription(unsubscribe));\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const sourceObj = this.sourceObj;\n    const eventName = this.eventName;\n    const options = this.options;\n    const selector = this.selector;\n    let handler = selector ? (...args: any[]) => {\n      let result = tryCatch(selector)(...args);\n      if (result === errorObject) {\n        subscriber.error(errorObject.e);\n      } else {\n        subscriber.next(result);\n      }\n    } : (e: any) => subscriber.next(e);\n\n    FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\n  }\n}\n","import {  FromEventObservable  } from './FromEventObservable';\n\nexport const fromEvent = FromEventObservable.create;","import { Observable } from '../../Observable';\nimport { fromEvent as staticFromEvent } from '../../observable/fromEvent';\n\nObservable.fromEvent = staticFromEvent;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEvent: typeof staticFromEvent;\n  }\n}","import { isFunction } from '../util/isFunction';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventPatternObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable from an API based on addHandler/removeHandler\n   * functions.\n   *\n   * <span class=\"informal\">Converts any addHandler/removeHandler API to an\n   * Observable.</span>\n   *\n   * <img src=\"./img/fromEventPattern.png\" width=\"100%\">\n   *\n   * Creates an Observable by using the `addHandler` and `removeHandler`\n   * functions to add and remove the handlers, with an optional selector\n   * function to project the event arguments to a result. The `addHandler` is\n   * called when the output Observable is subscribed, and `removeHandler` is\n   * called when the Subscription is unsubscribed.\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * function addClickHandler(handler) {\n   *   document.addEventListener('click', handler);\n   * }\n   *\n   * function removeClickHandler(handler) {\n   *   document.removeEventListener('click', handler);\n   * }\n   *\n   * var clicks = Rx.Observable.fromEventPattern(\n   *   addClickHandler,\n   *   removeClickHandler\n   * );\n   * clicks.subscribe(x => console.log(x));\n   *\n   * @see {@link from}\n   * @see {@link fromEvent}\n   *\n   * @param {function(handler: Function): any} addHandler A function that takes\n   * a `handler` function as argument and attaches it somehow to the actual\n   * source of events.\n   * @param {function(handler: Function, signal?: any): void} [removeHandler] An optional function that\n   * takes a `handler` function as argument and removes it in case it was\n   * previously attached using `addHandler`. if addHandler returns signal to teardown when remove,\n   * removeHandler function will forward it.\n   * @param {function(...args: any): T} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEventPattern\n   * @owner Observable\n   */\n  static create<T>(addHandler: (handler: Function) => any,\n                   removeHandler?: (handler: Function, signal?: any) => void,\n                   selector?: (...args: Array<any>) => T) {\n    return new FromEventPatternObservable(addHandler, removeHandler, selector);\n  }\n\n  constructor(private addHandler: (handler: Function) => any,\n              private removeHandler?: (handler: Function, signal?: any) => void,\n              private selector?: (...args: Array<any>) => T) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const removeHandler = this.removeHandler;\n\n    const handler = !!this.selector ? (...args: Array<any>) => {\n      this._callSelector(subscriber, args);\n    } : function(e: any) { subscriber.next(e); };\n\n    const retValue = this._callAddHandler(handler, subscriber);\n\n    if (!isFunction(removeHandler)) {\n      return;\n    }\n\n    subscriber.add(new Subscription(() => {\n      //TODO: determine whether or not to forward to error handler\n      removeHandler(handler, retValue) ;\n    }));\n  }\n\n  private _callSelector(subscriber: Subscriber<T>, args: Array<any>): void {\n    try {\n      const result: T = this.selector(...args);\n      subscriber.next(result);\n    }\n    catch (e) {\n      subscriber.error(e);\n    }\n  }\n\n  private _callAddHandler(handler: (e: any) => void, errorSubscriber: Subscriber<T>): any | null {\n    try {\n      return this.addHandler(handler) || null;\n    }\n    catch (e) {\n      errorSubscriber.error(e);\n    }\n  }\n}","import {  FromEventPatternObservable  } from './FromEventPatternObservable';\n\nexport const fromEventPattern = FromEventPatternObservable.create;","import { Observable } from '../../Observable';\nimport { fromEventPattern as staticFromEventPattern } from '../../observable/fromEventPattern';\n\nObservable.fromEventPattern = staticFromEventPattern;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEventPattern: typeof staticFromEventPattern;\n  }\n}","import {  PromiseObservable  } from './PromiseObservable';\n\nexport const fromPromise = PromiseObservable.create;","import { Observable } from '../../Observable';\nimport { fromPromise as staticFromPromise } from '../../observable/fromPromise';\n\nObservable.fromPromise = staticFromPromise;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromPromise: typeof staticFromPromise;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Observable } from '../Observable' ;\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\n\nconst selfSelector = <T>(value: T) => value;\n\nexport type ConditionFunc<S> = (state: S) => boolean;\nexport type IterateFunc<S> = (state: S) => S;\nexport type ResultFunc<S, T> = (state: S) => T;\n\ninterface SchedulerState<T, S> {\n  needIterate?: boolean;\n  state: S;\n  subscriber: Subscriber<T>;\n  condition?: ConditionFunc<S>;\n  iterate: IterateFunc<S>;\n  resultSelector: ResultFunc<S, T>;\n}\n\nexport interface GenerateBaseOptions<S> {\n  /**\n   * Initial state.\n  */\n  initialState: S;\n  /**\n   * Condition function that accepts state and returns boolean.\n   * When it returns false, the generator stops.\n   * If not specified, a generator never stops.\n  */\n  condition?: ConditionFunc<S>;\n  /**\n   * Iterate function that accepts state and returns new state.\n   */\n  iterate: IterateFunc<S>;\n  /**\n   * IScheduler to use for generation process.\n   * By default, a generator starts immediately.\n  */\n  scheduler?: IScheduler;\n}\n\nexport interface GenerateOptions<T, S> extends GenerateBaseOptions<S> {\n  /**\n   * Result selection function that accepts state and returns a value to emit.\n   */\n  resultSelector: ResultFunc<S, T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class GenerateObservable<T, S> extends Observable<T> {\n  constructor(private initialState: S,\n              private condition: ConditionFunc<S>,\n              private iterate: IterateFunc<S>,\n              private resultSelector: ResultFunc<S, T>,\n              private scheduler?: IScheduler) {\n      super();\n  }\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1, x => x);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 2, 3, 5, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, x => x + 1, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {function (state: S): T} resultSelector Selector function for results produced in the sequence.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(initialState: S,\n                      condition: ConditionFunc<S>,\n                      iterate: IterateFunc<S>,\n                      resultSelector: ResultFunc<S, T>,\n                      scheduler?: IScheduler): Observable<T>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload uses state as an emitted value.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 1, 2, 4, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(initialState: S,\n                   condition: ConditionFunc<S>,\n                   iterate: IterateFunc<S>,\n                   scheduler?: IScheduler): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain initial state, iterate,\n   * condition and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateBaseOptions<S>} options Object that must contain initialState, iterate and might contain condition and scheduler.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(options: GenerateBaseOptions<S>): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain initial state, iterate,\n   * condition, result selector and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1,\n   *   resultSelector: x => x\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateOptions<T, S>} options Object that must contain initialState, iterate, resultSelector and might contain condition and scheduler.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(options: GenerateOptions<T, S>): Observable<T>\n\n  static create<T, S>(initialStateOrOptions: S | GenerateOptions<T, S>,\n                      condition?: ConditionFunc<S>,\n                      iterate?: IterateFunc<S>,\n                      resultSelectorOrObservable?: (ResultFunc<S, T>) | IScheduler,\n                      scheduler?: IScheduler): Observable<T> {\n    if (arguments.length == 1) {\n      return new GenerateObservable<T, S>(\n        (<GenerateOptions<T, S>>initialStateOrOptions).initialState,\n        (<GenerateOptions<T, S>>initialStateOrOptions).condition,\n        (<GenerateOptions<T, S>>initialStateOrOptions).iterate,\n        (<GenerateOptions<T, S>>initialStateOrOptions).resultSelector || selfSelector,\n        (<GenerateOptions<T, S>>initialStateOrOptions).scheduler);\n    }\n\n    if (resultSelectorOrObservable === undefined || isScheduler(resultSelectorOrObservable)) {\n      return new GenerateObservable<T, S>(\n        <S>initialStateOrOptions,\n        condition,\n        iterate,\n        selfSelector,\n        <IScheduler>resultSelectorOrObservable);\n    }\n\n    return new GenerateObservable<T, S>(\n      <S>initialStateOrOptions,\n      condition,\n      iterate,\n      <ResultFunc<S, T>>resultSelectorOrObservable,\n      <IScheduler>scheduler);\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription | Function | void {\n    let state = this.initialState;\n    if (this.scheduler) {\n      return this.scheduler.schedule<SchedulerState<T, S>>(GenerateObservable.dispatch, 0, {\n        subscriber,\n        iterate: this.iterate,\n        condition: this.condition,\n        resultSelector: this.resultSelector,\n        state });\n    }\n    const { condition, resultSelector, iterate } = this;\n    do {\n      if (condition) {\n        let conditionResult: boolean;\n        try {\n          conditionResult = condition(state);\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n        if (!conditionResult) {\n          subscriber.complete();\n          break;\n        }\n      }\n      let value: T;\n      try {\n        value = resultSelector(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      subscriber.next(value);\n      if (subscriber.closed) {\n        break;\n      }\n      try {\n        state = iterate(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } while (true);\n  }\n\n  private static dispatch<T, S>(state: SchedulerState<T, S>): Subscription | void {\n    const { subscriber, condition } = state;\n    if (subscriber.closed) {\n      return;\n    }\n    if (state.needIterate) {\n      try {\n        state.state = state.iterate(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } else {\n      state.needIterate = true;\n    }\n    if (condition) {\n      let conditionResult: boolean;\n      try {\n        conditionResult = condition(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      if (!conditionResult) {\n        subscriber.complete();\n        return;\n      }\n      if (subscriber.closed) {\n        return;\n      }\n    }\n    let value: T;\n    try {\n      value = state.resultSelector(state.state);\n    } catch (err) {\n      subscriber.error(err);\n      return;\n    }\n    if (subscriber.closed) {\n      return;\n    }\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n    return (<Action<SchedulerState<T, S>>><any>this).schedule(state);\n  }\n}\n","import { GenerateObservable } from './GenerateObservable';\n\nexport const generate = GenerateObservable.create;\n","import { Observable } from '../../Observable';\nimport { generate as staticGenerate } from '../../observable/generate';\n\nObservable.generate = staticGenerate;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let generate: typeof staticGenerate;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IfObservable<T, R> extends Observable<T> {\n\n  static create<T, R>(condition: () => boolean | void,\n                      thenSource?: SubscribableOrPromise<T> | void,\n                      elseSource?: SubscribableOrPromise<R> | void): Observable<T|R> {\n    return new IfObservable(condition, thenSource, elseSource);\n  }\n\n  constructor(private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T|R>): TeardownLogic {\n    const { condition, thenSource, elseSource } = this;\n\n    return new IfSubscriber(subscriber, condition, thenSource, elseSource);\n  }\n}\n\nclass IfSubscriber<T, R> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super(destination);\n    this.tryIf();\n  }\n\n  private tryIf(): void {\n    const { condition, thenSource, elseSource } = this;\n\n    let result: boolean;\n    try {\n      result = <boolean>condition();\n      const source = result ? thenSource : elseSource;\n\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      } else {\n        this._complete();\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}\n","import {  IfObservable  } from './IfObservable';\n\nexport const _if = IfObservable.create;","import { Observable } from '../../Observable';\nimport { _if } from '../../observable/if';\n\nObservable.if = _if;","import { Subscriber } from '../Subscriber';\nimport { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IntervalObservable extends Observable<number> {\n  /**\n   * Creates an Observable that emits sequential numbers every specified\n   * interval of time, on a specified IScheduler.\n   *\n   * <span class=\"informal\">Emits incremental numbers periodically in time.\n   * </span>\n   *\n   * <img src=\"./img/interval.png\" width=\"100%\">\n   *\n   * `interval` returns an Observable that emits an infinite sequence of\n   * ascending integers, with a constant interval of time of your choosing\n   * between those emissions. The first emission is not sent immediately, but\n   * only after the first period has passed. By default, this operator uses the\n   * `async` IScheduler to provide a notion of time, but you may pass any\n   * IScheduler to it.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n   * var numbers = Rx.Observable.interval(1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link delay}\n   *\n   * @param {number} [period=0] The interval size in milliseconds (by default)\n   * or the time unit determined by the scheduler's clock.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a sequential number each time\n   * interval.\n   * @static true\n   * @name interval\n   * @owner Observable\n   */\n  static create(period: number = 0,\n                scheduler: IScheduler = async): Observable<number> {\n    return new IntervalObservable(period, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { index, subscriber, period } = state;\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index += 1;\n\n    (<any> this).schedule(state, period);\n  }\n\n  constructor(private period: number = 0,\n              private scheduler: IScheduler = async) {\n    super();\n    if (!isNumeric(period) || period < 0) {\n      this.period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = async;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>) {\n    const index = 0;\n    const period = this.period;\n    const scheduler = this.scheduler;\n\n    subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n      index, subscriber, period\n    }));\n  }\n}\n","import {  IntervalObservable  } from './IntervalObservable';\n\nexport const interval = IntervalObservable.create;","import { Observable } from '../../Observable';\nimport { interval as staticInterval } from '../../observable/interval';\n\nObservable.interval = staticInterval;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let interval: typeof staticInterval;\n  }\n}","import {  mergeStatic  } from '../operator/merge';\n\nexport const merge = mergeStatic;","import { Observable } from '../../Observable';\nimport { merge as mergeStatic } from '../../observable/merge';\n\nObservable.merge = mergeStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let merge: typeof mergeStatic;\n  }\n}","import { raceStatic } from '../operator/race';\n\nexport const race = raceStatic;\n","import { Observable } from '../../Observable';\nimport { race as staticRace } from '../../observable/race';\n\nObservable.race = staticRace;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let race: typeof staticRace;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class NeverObservable<T> extends Observable<T> {\n  /**\n   * Creates an Observable that emits no items to the Observer.\n   *\n   * <span class=\"informal\">An Observable that never emits anything.</span>\n   *\n   * <img src=\"./img/never.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that emits\n   * neither values nor errors nor the completion notification. It can be used\n   * for testing purposes or for composing with other Observables. Please note\n   * that by never emitting a complete notification, this Observable keeps the\n   * subscription from being disposed automatically. Subscriptions need to be\n   * manually disposed.\n   *\n   * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>\n   * function info() {\n   *   console.log('Will not be called');\n   * }\n   * var result = Rx.Observable.never().startWith(7);\n   * result.subscribe(x => console.log(x), info, info);\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @return {Observable} A \"never\" Observable: never emits anything.\n   * @static true\n   * @name never\n   * @owner Observable\n   */\n  static create<T>() {\n    return new NeverObservable<T>();\n  }\n\n  constructor() {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): void {\n    noop();\n  }\n}\n","import {  NeverObservable  } from './NeverObservable';\n\nexport const never = NeverObservable.create;","import { Observable } from '../../Observable';\nimport { never as staticNever } from '../../observable/never';\n\nObservable.never = staticNever;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let never: typeof staticNever;\n  }\n}","import {  ArrayObservable  } from './ArrayObservable';\n\nexport const of = ArrayObservable.of;","import { Observable } from '../../Observable';\nimport { of as staticOf } from '../../observable/of';\n\nObservable.of = staticOf;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let of: typeof staticOf; //formOf an iceberg!\n  }\n}","import { onErrorResumeNextStatic } from '../operator/onErrorResumeNext';\n\nexport const onErrorResumeNext = onErrorResumeNextStatic;\n","import { Observable } from '../../Observable';\r\nimport { onErrorResumeNext as staticOnErrorResumeNext } from '../../observable/onErrorResumeNext';\r\n\r\nObservable.onErrorResumeNext = staticOnErrorResumeNext;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let onErrorResumeNext: typeof staticOnErrorResumeNext;\r\n  }\r\n}","import { IScheduler } from '../Scheduler';\r\nimport { Action } from '../scheduler/Action';\r\nimport { Observable } from '../Observable';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { TeardownLogic } from '../Subscription';\r\n\r\ninterface PairsContext<T> {\r\n  obj: Object;\r\n  keys: Array<string>;\r\n  length: number;\r\n  index: number;\r\n  subscriber: Subscriber<Array<string | T>>;\r\n}\r\n\r\nfunction dispatch<T>(this: Action<PairsContext<T>>, state: PairsContext<T>) {\r\n  const {obj, keys, length, index, subscriber} = state;\r\n\r\n  if (index === length) {\r\n    subscriber.complete();\r\n    return;\r\n  }\r\n\r\n  const key = keys[index];\r\n  subscriber.next([key, obj[key]]);\r\n\r\n  state.index = index + 1;\r\n\r\n  this.schedule(state);\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @extends {Ignored}\r\n * @hide true\r\n */\r\nexport class PairsObservable<T> extends Observable<Array<string | T>> {\r\n  private keys: Array<string>;\r\n\r\n  /**\r\n   * Convert an object into an observable sequence of [key, value] pairs\r\n   * using an optional IScheduler to enumerate the object.\r\n   *\r\n   * @example <caption>Converts a javascript object to an Observable</caption>\r\n   * var obj = {\r\n   *   foo: 42,\r\n   *   bar: 56,\r\n   *   baz: 78\r\n   * };\r\n   *\r\n   * var source = Rx.Observable.pairs(obj);\r\n   *\r\n   * var subscription = source.subscribe(\r\n   *   function (x) {\r\n   *     console.log('Next: %s', x);\r\n   *   },\r\n   *   function (err) {\r\n   *     console.log('Error: %s', err);\r\n   *   },\r\n   *   function () {\r\n   *     console.log('Completed');\r\n   *   });\r\n   *\r\n   * @param {Object} obj The object to inspect and turn into an\r\n   * Observable sequence.\r\n   * @param {Scheduler} [scheduler] An optional IScheduler to run the\r\n   * enumeration of the input sequence on.\r\n   * @returns {(Observable<Array<string | T>>)} An observable sequence of\r\n   * [key, value] pairs from the object.\r\n   */\r\n  static create<T>(obj: Object, scheduler?: IScheduler): Observable<Array<string | T>> {\r\n    return new PairsObservable<T>(obj, scheduler);\r\n  }\r\n\r\n  constructor(private obj: Object, private scheduler?: IScheduler) {\r\n    super();\r\n    this.keys = Object.keys(obj);\r\n  }\r\n\r\n  protected _subscribe(subscriber: Subscriber<Array<string | T>>): TeardownLogic {\r\n    const {keys, scheduler} = this;\r\n    const length = keys.length;\r\n\r\n    if (scheduler) {\r\n      return scheduler.schedule(dispatch, 0, {\r\n        obj: this.obj, keys, length, index: 0, subscriber\r\n      });\r\n    } else {\r\n      for (let idx = 0; idx < length; idx++) {\r\n        const key = keys[idx];\r\n        subscriber.next([key, this.obj[key]]);\r\n      }\r\n      subscriber.complete();\r\n    }\r\n  }\r\n}","import {  PairsObservable  } from './PairsObservable';\r\n\r\nexport const pairs = PairsObservable.create;","import { Observable } from '../../Observable';\r\nimport { pairs as staticPairs } from '../../observable/pairs';\r\n\r\nObservable.pairs = staticPairs;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let pairs: typeof staticPairs;\r\n  }\r\n}","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class RangeObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that emits a sequence of numbers within a specified\n   * range.\n   *\n   * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n   *\n   * <img src=\"./img/range.png\" width=\"100%\">\n   *\n   * `range` operator emits a range of sequential integers, in order, where you\n   * select the `start` of the range and its `length`. By default, uses no\n   * IScheduler and just delivers the notifications synchronously, but may use\n   * an optional IScheduler to regulate those deliveries.\n   *\n   * @example <caption>Emits the numbers 1 to 10</caption>\n   * var numbers = Rx.Observable.range(1, 10);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link interval}\n   *\n   * @param {number} [start=0] The value of the first integer in the sequence.\n   * @param {number} [count=0] The number of sequential integers to generate.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the notifications.\n   * @return {Observable} An Observable of numbers that emits a finite range of\n   * sequential integers.\n   * @static true\n   * @name range\n   * @owner Observable\n   */\n  static create(start: number = 0,\n                count: number = 0,\n                scheduler?: IScheduler): Observable<number> {\n    return new RangeObservable(start, count, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { start, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(start);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n    state.start = start + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  private start: number;\n  private _count: number;\n  private scheduler: IScheduler;\n\n  constructor(start: number,\n              count: number,\n              scheduler?: IScheduler) {\n    super();\n    this.start = start;\n    this._count = count;\n    this.scheduler = scheduler;\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    let index = 0;\n    let start = this.start;\n    const count = this._count;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(RangeObservable.dispatch, 0, {\n        index, count, start, subscriber\n      });\n    } else {\n      do {\n        if (index++ >= count) {\n          subscriber.complete();\n          break;\n        }\n        subscriber.next(start++);\n        if (subscriber.closed) {\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n","import {  RangeObservable  } from './RangeObservable';\n\nexport const range = RangeObservable.create;","import { Observable } from '../../Observable';\nimport { range as staticRange } from '../../observable/range';\n\nObservable.range = staticRange;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let range: typeof staticRange;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { AnonymousSubscription, TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class UsingObservable<T> extends Observable<T> {\n\n  static create<T>(resourceFactory: () => AnonymousSubscription | void,\n                   observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void): Observable<T> {\n    return new UsingObservable<T>(resourceFactory, observableFactory);\n  }\n\n  constructor(private resourceFactory: () => AnonymousSubscription | void,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const { resourceFactory, observableFactory } = this;\n\n    let resource: AnonymousSubscription;\n\n    try {\n      resource = <AnonymousSubscription>resourceFactory();\n      return new UsingSubscriber(subscriber, resource, observableFactory);\n    } catch (err) {\n      subscriber.error(err);\n    }\n  }\n}\n\nclass UsingSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private resource: AnonymousSubscription,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super(destination);\n    destination.add(resource);\n    this.tryUse();\n  }\n\n  private tryUse(): void {\n    try {\n      const source = this.observableFactory.call(this, this.resource);\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}","import {  UsingObservable  } from './UsingObservable';\n\nexport const using = UsingObservable.create;","import { Observable } from '../../Observable';\nimport { using as staticUsing } from '../../observable/using';\n\nObservable.using = staticUsing;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let using: typeof staticUsing;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\nexport interface DispatchArg {\n  error: any;\n  subscriber: any;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ErrorObservable extends Observable<any> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits an error notification.\n   *\n   * <span class=\"informal\">Just emits 'error', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/throw.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the error notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then emit an error.</caption>\n   * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @example <caption>Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x === 13 ?\n   *     Rx.Observable.throw('Thirteens are bad') :\n   *     Rx.Observable.of('a', 'b', 'c')\n   * );\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link of}\n   *\n   * @param {any} error The particular Error to pass to the error notification.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the error notification.\n   * @return {Observable} An error Observable: emits only the error notification\n   * using the given error argument.\n   * @static true\n   * @name throw\n   * @owner Observable\n   */\n  static create(error: any, scheduler?: IScheduler): ErrorObservable {\n    return new ErrorObservable(error, scheduler);\n  }\n\n  static dispatch(arg: DispatchArg) {\n    const { error, subscriber } = arg;\n    subscriber.error(error);\n  }\n\n  constructor(public error: any, private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    const error = this.error;\n    const scheduler = this.scheduler;\n\n    subscriber.syncErrorThrowable = true;\n\n    if (scheduler) {\n      return scheduler.schedule(ErrorObservable.dispatch, 0, {\n        error, subscriber\n      });\n    } else {\n      subscriber.error(error);\n    }\n  }\n}\n","import {  ErrorObservable  } from './ErrorObservable';\n\nexport const _throw = ErrorObservable.create;","import { Observable } from '../../Observable';\nimport { _throw } from '../../observable/throw';\n\nObservable.throw = _throw;","import { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isDate } from '../util/isDate';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class TimerObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that starts emitting after an `initialDelay` and\n   * emits ever increasing numbers after each `period` of time thereafter.\n   *\n   * <span class=\"informal\">Its like {@link interval}, but you can specify when\n   * should the emissions start.</span>\n   *\n   * <img src=\"./img/timer.png\" width=\"100%\">\n   *\n   * `timer` returns an Observable that emits an infinite sequence of ascending\n   * integers, with a constant interval of time, `period` of your choosing\n   * between those emissions. The first emission happens after the specified\n   * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n   * operator uses the `async` IScheduler to provide a notion of time, but you\n   * may pass any IScheduler to it. If `period` is not specified, the output\n   * Observable emits only one value, `0`. Otherwise, it emits an infinite\n   * sequence.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n   * var numbers = Rx.Observable.timer(3000, 1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @example <caption>Emits one number after five seconds</caption>\n   * var numbers = Rx.Observable.timer(5000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link interval}\n   * @see {@link delay}\n   *\n   * @param {number|Date} initialDelay The initial delay time to wait before\n   * emitting the first value of `0`.\n   * @param {number} [period] The period of time between emissions of the\n   * subsequent numbers.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a `0` after the\n   * `initialDelay` and ever increasing numbers after each `period` of time\n   * thereafter.\n   * @static true\n   * @name timer\n   * @owner Observable\n   */\n  static create(initialDelay: number | Date = 0,\n                period?: number | IScheduler,\n                scheduler?: IScheduler): Observable<number> {\n    return new TimerObservable(initialDelay, period, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, period, subscriber } = state;\n    const action = (<any> this);\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    } else if (period === -1) {\n      return subscriber.complete();\n    }\n\n    state.index = index + 1;\n    action.schedule(state, period);\n  }\n\n  private period: number = -1;\n  private dueTime: number = 0;\n  private scheduler: IScheduler;\n\n  constructor(dueTime: number | Date = 0,\n              period?: number | IScheduler,\n              scheduler?: IScheduler) {\n    super();\n\n    if (isNumeric(period)) {\n      this.period = Number(period) < 1 && 1 || Number(period);\n    } else if (isScheduler(period)) {\n      scheduler = <IScheduler> period;\n    }\n\n    if (!isScheduler(scheduler)) {\n      scheduler = async;\n    }\n\n    this.scheduler = scheduler;\n    this.dueTime = isDate(dueTime) ?\n      (+dueTime - this.scheduler.now()) :\n      (<number> dueTime);\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    const index = 0;\n    const { period, dueTime, scheduler } = this;\n\n    return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n      index, period, subscriber\n    });\n  }\n}\n","import {  TimerObservable  } from './TimerObservable';\n\nexport const timer = TimerObservable.create;","import { Observable } from '../../Observable';\nimport { timer as staticTimer } from '../../observable/timer';\n\nObservable.timer = staticTimer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let timer: typeof staticTimer;\n  }\n}","import {  zipStatic  } from '../operator/zip';\n\nexport const zip = zipStatic;","import { Observable } from '../../Observable';\nimport { zip as zipStatic } from '../../observable/zip';\n\nObservable.zip = zipStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let zip: typeof zipStatic;\n  }\n}","import {  AjaxObservable, AjaxCreationMethod  } from './AjaxObservable';\n\nexport const ajax: AjaxCreationMethod = AjaxObservable.create;","import { Observable } from '../../../Observable';\nimport { ajax as staticAjax } from '../../../observable/dom/ajax';\nimport { AjaxCreationMethod } from '../../../observable/dom/AjaxObservable';\n\nObservable.ajax = staticAjax;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let ajax: AjaxCreationMethod;\n  }\n}","import { root } from './root';\n\nexport function assignImpl(target: Object, ...sources: Object[]) {\n  const len = sources.length;\n  for (let i = 0; i < len; i++) {\n    const source = sources[i];\n    for (let k in source) {\n      if (source.hasOwnProperty(k)) {\n        target[k] = source[k];\n      }\n    }\n  }\n  return target;\n};\n\nexport function getAssign(root: any) {\n  return root.Object.assign || assignImpl;\n}\n\nexport const assign = getAssign(root);","import { Subject, AnonymousSubject } from '../../Subject';\nimport { Subscriber } from '../../Subscriber';\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { Operator } from '../../Operator';\nimport { root } from '../../util/root';\nimport { ReplaySubject } from '../../ReplaySubject';\nimport { Observer, NextObserver } from '../../Observer';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { assign } from '../../util/assign';\n\nexport interface WebSocketSubjectConfig {\n  url: string;\n  protocol?: string | Array<string>;\n  resultSelector?: <T>(e: MessageEvent) => T;\n  openObserver?: NextObserver<Event>;\n  closeObserver?: NextObserver<CloseEvent>;\n  closingObserver?: NextObserver<void>;\n  WebSocketCtor?: { new(url: string, protocol?: string|Array<string>): WebSocket };\n  binaryType?: 'blob' | 'arraybuffer';\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class WebSocketSubject<T> extends AnonymousSubject<T> {\n\n  url: string;\n  protocol: string|Array<string>;\n  socket: WebSocket;\n  openObserver: NextObserver<Event>;\n  closeObserver: NextObserver<CloseEvent>;\n  closingObserver: NextObserver<void>;\n  WebSocketCtor: { new(url: string, protocol?: string|Array<string>): WebSocket };\n  binaryType?: 'blob' | 'arraybuffer';\n\n  private _output: Subject<T>;\n\n  resultSelector(e: MessageEvent) {\n    return JSON.parse(e.data);\n  }\n\n  /**\n   * Wrapper around the w3c-compatible WebSocket object provided by the browser.\n   *\n   * @example <caption>Wraps browser WebSocket</caption>\n   *\n   * let socket$ = Observable.webSocket('ws://localhost:8081');\n   *\n   * socket$.subscribe(\n   *    (msg) => console.log('message received: ' + msg),\n   *    (err) => console.log(err),\n   *    () => console.log('complete')\n   *  );\n   *\n   * socket$.next(JSON.stringify({ op: 'hello' }));\n   *\n   * @example <caption>Wraps WebSocket from nodejs-websocket (using node.js)</caption>\n   *\n   * import { w3cwebsocket } from 'websocket';\n   *\n   * let socket$ = Observable.webSocket({\n   *   url: 'ws://localhost:8081',\n   *   WebSocketCtor: w3cwebsocket\n   * });\n   *\n   * socket$.subscribe(\n   *    (msg) => console.log('message received: ' + msg),\n   *    (err) => console.log(err),\n   *    () => console.log('complete')\n   *  );\n   *\n   * socket$.next(JSON.stringify({ op: 'hello' }));\n   *\n   * @param {string | WebSocketSubjectConfig} urlConfigOrSource the source of the websocket as an url or a structure defining the websocket object\n   * @return {WebSocketSubject}\n   * @static true\n   * @name webSocket\n   * @owner Observable\n   */\n  static create<T>(urlConfigOrSource: string | WebSocketSubjectConfig): WebSocketSubject<T> {\n    return new WebSocketSubject<T>(urlConfigOrSource);\n  }\n\n  constructor(urlConfigOrSource: string | WebSocketSubjectConfig | Observable<T>, destination?: Observer<T>) {\n    if (urlConfigOrSource instanceof Observable) {\n      super(destination, <Observable<T>> urlConfigOrSource);\n    } else {\n      super();\n      this.WebSocketCtor = root.WebSocket;\n      this._output = new Subject<T>();\n      if (typeof urlConfigOrSource === 'string') {\n        this.url = urlConfigOrSource;\n      } else {\n        // WARNING: config object could override important members here.\n        assign(this, urlConfigOrSource);\n      }\n      if (!this.WebSocketCtor) {\n        throw new Error('no WebSocket constructor can be found');\n      }\n      this.destination = new ReplaySubject();\n    }\n  }\n\n  lift<R>(operator: Operator<T, R>): WebSocketSubject<R> {\n    const sock = new WebSocketSubject<R>(this, <any> this.destination);\n    sock.operator = operator;\n    return sock;\n  }\n\n  private _resetState() {\n    this.socket = null;\n    if (!this.source) {\n      this.destination = new ReplaySubject();\n    }\n    this._output = new Subject<T>();\n  }\n\n  // TODO: factor this out to be a proper Operator/Subscriber implementation and eliminate closures\n  multiplex(subMsg: () => any, unsubMsg: () => any, messageFilter: (value: T) => boolean) {\n    const self = this;\n    return new Observable((observer: Observer<any>) => {\n      const result = tryCatch(subMsg)();\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        self.next(result);\n      }\n\n      let subscription = self.subscribe(x => {\n        const result = tryCatch(messageFilter)(x);\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else if (result) {\n          observer.next(x);\n        }\n      },\n        err => observer.error(err),\n        () => observer.complete());\n\n      return () => {\n        const result = tryCatch(unsubMsg)();\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else {\n          self.next(result);\n        }\n        subscription.unsubscribe();\n      };\n    });\n  }\n\n  private _connectSocket() {\n    const { WebSocketCtor } = this;\n    const observer = this._output;\n\n    let socket: WebSocket = null;\n    try {\n      socket = this.protocol ?\n        new WebSocketCtor(this.url, this.protocol) :\n        new WebSocketCtor(this.url);\n      this.socket = socket;\n      if (this.binaryType) {\n        this.socket.binaryType = this.binaryType;\n      }\n    } catch (e) {\n      observer.error(e);\n      return;\n    }\n\n    const subscription = new Subscription(() => {\n      this.socket = null;\n      if (socket && socket.readyState === 1) {\n        socket.close();\n      }\n    });\n\n    socket.onopen = (e: Event) => {\n      const openObserver = this.openObserver;\n      if (openObserver) {\n        openObserver.next(e);\n      }\n\n      const queue = this.destination;\n\n      this.destination = Subscriber.create(\n        (x) => socket.readyState === 1 && socket.send(x),\n        (e) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          if (e && e.code) {\n            socket.close(e.code, e.reason);\n          } else {\n            observer.error(new TypeError('WebSocketSubject.error must be called with an object with an error code, ' +\n              'and an optional reason: { code: number, reason: string }'));\n          }\n          this._resetState();\n        },\n        ( ) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          socket.close();\n          this._resetState();\n        }\n      );\n\n      if (queue && queue instanceof ReplaySubject) {\n        subscription.add((<ReplaySubject<T>>queue).subscribe(this.destination));\n      }\n    };\n\n    socket.onerror = (e: Event) => {\n      this._resetState();\n      observer.error(e);\n    };\n\n    socket.onclose = (e: CloseEvent) => {\n      this._resetState();\n      const closeObserver = this.closeObserver;\n      if (closeObserver) {\n        closeObserver.next(e);\n      }\n      if (e.wasClean) {\n        observer.complete();\n      } else {\n        observer.error(e);\n      }\n    };\n\n    socket.onmessage = (e: MessageEvent) => {\n      const result = tryCatch(this.resultSelector)(e);\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        observer.next(result);\n      }\n    };\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return source.subscribe(subscriber);\n    }\n    if (!this.socket) {\n      this._connectSocket();\n    }\n    let subscription = new Subscription();\n    subscription.add(this._output.subscribe(subscriber));\n    subscription.add(() => {\n      const { socket } = this;\n      if (this._output.observers.length === 0) {\n        if (socket && socket.readyState === 1) {\n          socket.close();\n        }\n        this._resetState();\n      }\n    });\n    return subscription;\n  }\n\n  unsubscribe() {\n    const { source, socket } = this;\n    if (socket && socket.readyState === 1) {\n      socket.close();\n      this._resetState();\n    }\n    super.unsubscribe();\n    if (!source) {\n      this.destination = new ReplaySubject();\n    }\n  }\n}\n","import {  WebSocketSubject  } from './WebSocketSubject';\n\nexport const webSocket = WebSocketSubject.create;","import { Observable } from '../../../Observable';\nimport { webSocket as staticWebSocket } from '../../../observable/dom/webSocket';\n\nObservable.webSocket = staticWebSocket;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let webSocket: typeof staticWebSocket;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(this: Observable<T>, closingNotifier: Observable<any>): Observable<T[]> {\n  return this.lift(new BufferOperator<T>(closingNotifier));\n}\n\nclass BufferOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingNotifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, closingNotifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, closingNotifier));\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    const buffer = this.buffer;\n    this.buffer = [];\n    this.destination.next(buffer);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { buffer } from '../../operator/buffer';\n\nObservable.prototype.buffer = buffer;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    buffer: typeof buffer;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(this: Observable<T>, bufferSize: number, startBufferEvery: number = null): Observable<T[]> {\n  return this.lift(new BufferCountOperator<T>(bufferSize, startBufferEvery));\n}\n\nclass BufferCountOperator<T> implements Operator<T, T[]> {\n  private subscriberClass: any;\n\n  constructor(private bufferSize: number, private startBufferEvery: number) {\n    if (!startBufferEvery || bufferSize === startBufferEvery) {\n      this.subscriberClass = BufferCountSubscriber;\n    } else {\n      this.subscriberClass = BufferSkipCountSubscriber;\n    }\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): TeardownLogic {\n    return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferCountSubscriber<T> extends Subscriber<T> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const buffer = this.buffer;\n\n    buffer.push(value);\n\n    if (buffer.length == this.bufferSize) {\n      this.destination.next(buffer);\n      this.buffer = [];\n    }\n  }\n\n  protected _complete(): void {\n    const buffer = this.buffer;\n    if (buffer.length > 0) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSkipCountSubscriber<T> extends Subscriber<T> {\n  private buffers: Array<T[]> = [];\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number, private startBufferEvery: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const { bufferSize, startBufferEvery, buffers, count } = this;\n\n    this.count++;\n    if (count % startBufferEvery === 0) {\n      buffers.push([]);\n    }\n\n    for (let i = buffers.length; i--; ) {\n      const buffer = buffers[i];\n      buffer.push(value);\n      if (buffer.length === bufferSize) {\n        buffers.splice(i, 1);\n        this.destination.next(buffer);\n      }\n    }\n  }\n\n  protected _complete(): void {\n    const { buffers, destination } = this;\n\n    while (buffers.length > 0) {\n      let buffer = buffers.shift();\n      if (buffer.length > 0) {\n        destination.next(buffer);\n      }\n    }\n    super._complete();\n  }\n\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferCount } from '../../operator/bufferCount';\n\nObservable.prototype.bufferCount = bufferCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferCount: typeof bufferCount;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\n\n/* tslint:disable:max-line-length */\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, scheduler?: IScheduler): Observable<T[]>;\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: IScheduler): Observable<T[]>;\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: IScheduler): Observable<T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number): Observable<T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: IScheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return this.lift(new BufferTimeOperator<T>(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n}\n\nclass BufferTimeOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferTimeSubscriber(\n      subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler\n    ));\n  }\n}\n\nclass Context<T> {\n  buffer: T[] = [];\n  closeAction: Subscription;\n}\n\ntype CreationState<T> = {\n  bufferTimeSpan: number;\n  bufferCreationInterval: number,\n  subscriber: BufferTimeSubscriber<T>;\n  scheduler: IScheduler;\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferTimeSubscriber<T> extends Subscriber<T> {\n  private contexts: Array<Context<T>> = [];\n  private timespanOnly: boolean;\n\n  constructor(destination: Subscriber<T[]>,\n              private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    const context = this.openContext();\n    this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n    if (this.timespanOnly) {\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    } else {\n      const closeState = { subscriber: this, context };\n      const creationState: CreationState<T> = { bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n    }\n  }\n\n  protected _next(value: T) {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    let filledBufferContext: Context<T>;\n    for (let i = 0; i < len; i++) {\n      const context = contexts[i];\n      const buffer = context.buffer;\n      buffer.push(value);\n      if (buffer.length == this.maxBufferSize) {\n        filledBufferContext = context;\n      }\n    }\n\n    if (filledBufferContext) {\n      this.onBufferFull(filledBufferContext);\n    }\n  }\n\n  protected _error(err: any) {\n    this.contexts.length = 0;\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts, destination } = this;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      destination.next(context.buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.contexts = null;\n  }\n\n  protected onBufferFull(context: Context<T>) {\n    this.closeContext(context);\n    const closeAction = context.closeAction;\n    closeAction.unsubscribe();\n    this.remove(closeAction);\n\n    if (!this.closed && this.timespanOnly) {\n      context = this.openContext();\n      const bufferTimeSpan = this.bufferTimeSpan;\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  openContext(): Context<T> {\n    const context: Context<T> = new Context<T>();\n    this.contexts.push(context);\n    return context;\n  }\n\n  closeContext(context: Context<T>) {\n    this.destination.next(context.buffer);\n    const contexts = this.contexts;\n\n    const spliceIndex = contexts ? contexts.indexOf(context) : -1;\n    if (spliceIndex >= 0) {\n      contexts.splice(contexts.indexOf(context), 1);\n    }\n  }\n}\n\nfunction dispatchBufferTimeSpanOnly(this: Action<any>, state: any) {\n  const subscriber: BufferTimeSubscriber<any> = state.subscriber;\n\n  const prevContext = state.context;\n  if (prevContext) {\n    subscriber.closeContext(prevContext);\n  }\n\n  if (!subscriber.closed) {\n    state.context = subscriber.openContext();\n    state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: BufferTimeSubscriber<T>;\n  context: Context<T>;\n}\n\nfunction dispatchBufferCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>) {\n  const { bufferCreationInterval, bufferTimeSpan, subscriber, scheduler } = state;\n  const context = subscriber.openContext();\n  const action = <Action<CreationState<T>>>this;\n  if (!subscriber.closed) {\n    subscriber.add(context.closeAction = scheduler.schedule<DispatchArg<T>>(dispatchBufferClose, bufferTimeSpan, { subscriber, context }));\n    action.schedule(state, bufferCreationInterval);\n  }\n}\n\nfunction dispatchBufferClose<T>(arg: DispatchArg<T>) {\n  const { subscriber, context } = arg;\n  subscriber.closeContext(context);\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferTime } from '../../operator/bufferTime';\n\nObservable.prototype.bufferTime = bufferTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferTime: typeof bufferTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(this: Observable<T>, openings: SubscribableOrPromise<O>,\n                                   closingSelector: (value: O) => SubscribableOrPromise<any>): Observable<T[]> {\n  return this.lift(new BufferToggleOperator<T, O>(openings, closingSelector));\n}\n\nclass BufferToggleOperator<T, O> implements Operator<T, T[]> {\n\n  constructor(private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  }\n}\n\ninterface BufferContext<T> {\n  buffer: T[];\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferToggleSubscriber<T, O> extends OuterSubscriber<T, O> {\n  private contexts: Array<BufferContext<T>> = [];\n\n  constructor(destination: Subscriber<T[]>,\n              private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any> | void) {\n    super(destination);\n    this.add(subscribeToResult(this, openings));\n  }\n\n  protected _next(value: T): void {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    for (let i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._error(err);\n  }\n\n  protected _complete(): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      this.destination.next(context.buffer);\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._complete();\n  }\n\n  notifyNext(outerValue: any, innerValue: O,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, O>): void {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, O>): void {\n    this.closeBuffer((<any> innerSub).context);\n  }\n\n  private openBuffer(value: O): void {\n    try {\n      const closingSelector = this.closingSelector;\n      const closingNotifier = closingSelector.call(this, value);\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private closeBuffer(context: BufferContext<T>): void {\n    const contexts = this.contexts;\n\n    if (contexts && context) {\n      const { buffer, subscription } = context;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  }\n\n  private trySubscribe(closingNotifier: any): void {\n    const contexts = this.contexts;\n\n    const buffer: Array<T> = [];\n    const subscription = new Subscription();\n    const context = { buffer, subscription };\n    contexts.push(context);\n\n    const innerSubscription = subscribeToResult(this, closingNotifier, <any>context);\n\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      (<any> innerSubscription).context = context;\n\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferToggle } from '../../operator/bufferToggle';\n\nObservable.prototype.bufferToggle = bufferToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferToggle: typeof bufferToggle;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(this: Observable<T>, closingSelector: () => Observable<any>): Observable<T[]> {\n  return this.lift(new BufferWhenOperator<T>(closingSelector));\n}\n\nclass BufferWhenOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferWhenSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[];\n  private subscribing: boolean = false;\n  private closingSubscription: Subscription;\n\n  constructor(destination: Subscriber<T[]>, private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openBuffer();\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  protected _complete() {\n    const buffer = this.buffer;\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.buffer = null;\n    this.subscribing = false;\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openBuffer();\n  }\n\n  notifyComplete(): void {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  }\n\n  openBuffer() {\n\n    let { closingSubscription } = this;\n\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n\n    const buffer = this.buffer;\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n\n    this.buffer = [];\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n\n    if (closingNotifier === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      closingSubscription = new Subscription();\n      this.closingSubscription = closingSubscription;\n      this.add(closingSubscription);\n      this.subscribing = true;\n      closingSubscription.add(subscribeToResult(this, closingNotifier));\n      this.subscribing = false;\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferWhen } from '../../operator/bufferWhen';\n\nObservable.prototype.bufferWhen = bufferWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferWhen: typeof bufferWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @method catch\n * @name catch\n * @owner Observable\n */\nexport function _catch<T, R>(this: Observable<T>, selector: (err: any, caught: Observable<T>) => ObservableInput<R>): Observable<T | R> {\n  const operator = new CatchOperator(selector);\n  const caught = this.lift<T>(operator);\n  return (operator.caught = caught);\n}\n\nclass CatchOperator<T, R> implements Operator<T, T | R> {\n  caught: Observable<T>;\n\n  constructor(private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CatchSubscriber<T, R> extends OuterSubscriber<T, T | R> {\n  constructor(destination: Subscriber<any>,\n              private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>,\n              private caught: Observable<T>) {\n    super(destination);\n  }\n\n  // NOTE: overriding `error` instead of `_error` because we don't want\n  // to have this flag this subscriber as `isStopped`. We can mimic the\n  // behavior of the RetrySubscriber (from the `retry` operator), where\n  // we unsubscribe from our source chain, reset our Subscriber flags,\n  // then subscribe to the selector result.\n  error(err: any) {\n    if (!this.isStopped) {\n      let result: any;\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err2) {\n        super.error(err2);\n        return;\n      }\n      this._unsubscribeAndRecycle();\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _catch } from '../../operator/catch';\n\nObservable.prototype.catch = _catch;\nObservable.prototype._catch = _catch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    catch: typeof _catch;\n    _catch: typeof _catch;\n  }\n}","import { CombineLatestOperator } from './combineLatest';\nimport { Observable } from '../Observable';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by waiting\n * for the outer Observable to complete, then applying {@link combineLatest}.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by applying\n * {@link combineLatest} when the Observable-of-Observables completes.</span>\n *\n * <img src=\"./img/combineAll.png\" width=\"100%\">\n *\n * Takes an Observable of Observables, and collects all Observables from it.\n * Once the outer Observable completes, it subscribes to all collected\n * Observables and combines their values using the {@link combineLatest}\n * strategy, such that:\n * - Every time an inner Observable emits, the output Observable emits.\n * - When the returned observable emits, it emits all of the latest values by:\n *   - If a `project` function is provided, it is called with each recent value\n *     from each inner Observable in whatever order they arrived, and the result\n *     of the `project` function is what is emitted by the output Observable.\n *   - If there is no `project` function, an array of all of the most recent\n *     values is emitted by the output Observable.\n *\n * @example <caption>Map two click events to a finite interval Observable, then apply combineAll</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev =>\n *   Rx.Observable.interval(Math.random()*2000).take(3)\n * ).take(2);\n * var result = higherOrder.combineAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n * @see {@link mergeAll}\n *\n * @param {function} [project] An optional function to map the most recent\n * values from each inner Observable into a new result. Takes each of the most\n * recent values from each collected inner Observable as arguments, in order.\n * @return {Observable} An Observable of projected results or arrays of recent\n * values.\n * @method combineAll\n * @owner Observable\n */\nexport function combineAll<T, R>(this: Observable<T>, project?: (...values: Array<any>) => R): Observable<R> {\n  return this.lift(new CombineLatestOperator(project));\n}\n","\nimport { Observable } from '../../Observable';\nimport { combineAll } from '../../operator/combineAll';\n\nObservable.prototype.combineAll = combineAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineAll: typeof combineAll;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nconst none = {};\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function combineLatest<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function combineLatest<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function combineLatest<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function combineLatest<T, R>(this: Observable<T>, array: ObservableInput<T>[]): Observable<Array<T>>;\nexport function combineLatest<T, TOther, R>(this: Observable<T>, array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\n  let project: (...values: Array<any>) => R = null;\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = (<any>observables[0]).slice();\n  }\n\n  observables.unshift(this);\n\n  return this.lift.call(new ArrayObservable(observables), new CombineLatestOperator(project));\n}\n\nexport class CombineLatestOperator<T, R> implements Operator<T, R> {\n  constructor(private project?: (...values: Array<any>) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private values: any[] = [];\n  private observables: any[] = [];\n  private toRespond: number;\n\n  constructor(destination: Subscriber<R>, private project?: (...values: Array<any>) => R) {\n    super(destination);\n  }\n\n  protected _next(observable: any) {\n    this.values.push(none);\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n      for (let i = 0; i < len; i++) {\n        const observable = observables[i];\n        this.add(subscribeToResult(this, observable, observable, i));\n      }\n    }\n  }\n\n  notifyComplete(unused: Subscriber<R>): void {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const values = this.values;\n    const oldVal = values[outerIndex];\n    const toRespond = !this.toRespond\n      ? 0\n      : oldVal === none ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n\n    if (toRespond === 0) {\n      if (this.project) {\n        this._tryProject(values);\n      } else {\n        this.destination.next(values.slice());\n      }\n    }\n  }\n\n  private _tryProject(values: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, values);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { combineLatest } from '../../operator/combineLatest';\n\nObservable.prototype.combineLatest = combineLatest;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineLatest: typeof combineLatest;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { concat } from '../../operator/concat';\n\nObservable.prototype.concat = concat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concat: typeof concat;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscribable } from '../Observable';\nimport { MergeAllOperator } from './mergeAll';\n\n/* tslint:disable:max-line-length */\nexport function concatAll<T>(this: Observable<T>): T;\nexport function concatAll<T, R>(this: Observable<T>): Subscribable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll<T>(this: Observable<T>): T {\n  return <any>this.lift<any>(new MergeAllOperator<T>(1));\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatAll } from '../../operator/concatAll';\n\nObservable.prototype.concatAll = concatAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatAll: typeof concatAll;\n  }\n}","import { MergeMapOperator } from './mergeMap';\nimport { Observable, ObservableInput } from '../Observable';\n\n/* tslint:disable:max-line-length */\nexport function concatMap<T, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<R>): Observable<R>;\nexport function concatMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nexport function concatMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  return this.lift(new MergeMapOperator(project, resultSelector, 1));\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatMap } from '../../operator/concatMap';\n\nObservable.prototype.concatMap = concatMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMap: typeof concatMap;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { MergeMapToOperator } from './mergeMapTo';\n\n/* tslint:disable:max-line-length */\nexport function concatMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>): Observable<R>;\nexport function concatMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nexport function concatMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return this.lift(new MergeMapToOperator(innerObservable, resultSelector, 1));\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatMapTo } from '../../operator/concatMapTo';\n\nObservable.prototype.concatMapTo = concatMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMapTo: typeof concatMapTo;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<number> {\n  return this.lift(new CountOperator(predicate, this));\n}\n\nclass CountOperator<T> implements Operator<T, number> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<number>, source: any): any {\n    return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CountSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n  private index: number = 0;\n\n  constructor(destination: Observer<number>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  }\n\n  private _tryPredicate(value: T) {\n    let result: any;\n\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.count++;\n    }\n  }\n\n  protected _complete(): void {\n    this.destination.next(this.count);\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { count } from '../../operator/count';\n\nObservable.prototype.count = count;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    count: typeof count;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(this: Observable<T>): Observable<any> {\n  return this.lift(new DeMaterializeOperator());\n}\n\nclass DeMaterializeOperator<T extends Notification<any>, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<any>, source: any): any {\n    return source.subscribe(new DeMaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DeMaterializeSubscriber<T extends Notification<any>> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    value.observe(this.destination);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { dematerialize } from '../../operator/dematerialize';\n\nObservable.prototype.dematerialize = dematerialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    dematerialize: typeof dematerialize;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(this: Observable<T>, durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T> {\n  return this.lift(new DebounceOperator(durationSelector));\n}\n\nclass DebounceOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n  private durationSubscription: Subscription = null;\n\n  constructor(destination: Subscriber<R>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    try {\n      const result = this.durationSelector.call(this, value);\n\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.emitValue();\n    this.destination.complete();\n  }\n\n  private _tryNext(value: T, duration: SubscribableOrPromise<number>): void {\n    let subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n\n    subscription = subscribeToResult(this, duration);\n    if (!subscription.closed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue(): void {\n    if (this.hasValue) {\n      const value = this.value;\n      const subscription = this.durationSubscription;\n      if (subscription) {\n        this.durationSubscription = null;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n      this.value = null;\n      this.hasValue = false;\n      super._next(value);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { debounce } from '../../operator/debounce';\n\nObservable.prototype.debounce = debounce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounce: typeof debounce;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(this: Observable<T>, dueTime: number, scheduler: IScheduler = async): Observable<T> {\n  return this.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\n\nclass DebounceTimeOperator<T> implements Operator<T, T> {\n  constructor(private dueTime: number, private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceTimeSubscriber<T> extends Subscriber<T> {\n  private debouncedSubscription: Subscription = null;\n  private lastValue: T = null;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private dueTime: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.clearDebounce();\n    this.lastValue = value;\n    this.hasValue = true;\n    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n  }\n\n  protected _complete() {\n    this.debouncedNext();\n    this.destination.complete();\n  }\n\n  debouncedNext(): void {\n    this.clearDebounce();\n\n    if (this.hasValue) {\n      this.destination.next(this.lastValue);\n      this.lastValue = null;\n      this.hasValue = false;\n    }\n  }\n\n  private clearDebounce(): void {\n    const debouncedSubscription = this.debouncedSubscription;\n\n    if (debouncedSubscription !== null) {\n      this.remove(debouncedSubscription);\n      debouncedSubscription.unsubscribe();\n      this.debouncedSubscription = null;\n    }\n  }\n}\n\nfunction dispatchNext(subscriber: DebounceTimeSubscriber<any>) {\n  subscriber.debouncedNext();\n}\n","\nimport { Observable } from '../../Observable';\nimport { debounceTime } from '../../operator/debounceTime';\n\nObservable.prototype.debounceTime = debounceTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounceTime: typeof debounceTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/* tslint:disable:max-line-length */\nexport function defaultIfEmpty<T>(this: Observable<T>, defaultValue?: T): Observable<T>;\nexport function defaultIfEmpty<T, R>(this: Observable<T>, defaultValue?: R): Observable<T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(this: Observable<T>, defaultValue: R = null): Observable<T | R> {\n  return this.lift<T>(new DefaultIfEmptyOperator(defaultValue));\n}\n\nclass DefaultIfEmptyOperator<T, R> implements Operator<T, T | R> {\n\n  constructor(private defaultValue: R) {\n  }\n\n  call(subscriber: Subscriber<T | R>, source: any): any {\n    return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DefaultIfEmptySubscriber<T, R> extends Subscriber<T> {\n  private isEmpty: boolean = true;\n\n  constructor(destination: Subscriber<T | R>, private defaultValue: R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.isEmpty = false;\n    this.destination.next(value);\n  }\n\n  protected _complete(): void {\n    if (this.isEmpty) {\n      this.destination.next(this.defaultValue);\n    }\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { defaultIfEmpty } from '../../operator/defaultIfEmpty';\n\nObservable.prototype.defaultIfEmpty = defaultIfEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    defaultIfEmpty: typeof defaultIfEmpty;\n  }\n}","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Action } from '../scheduler/Action';\nimport { Notification } from '../Notification';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(this: Observable<T>, delay: number|Date,\n                         scheduler: IScheduler = async): Observable<T> {\n  const absoluteDelay = isDate(delay);\n  const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(<number>delay);\n  return this.lift(new DelayOperator(delayFor, scheduler));\n}\n\nclass DelayOperator<T> implements Operator<T, T> {\n  constructor(private delay: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  }\n}\n\ninterface DelayState<T> {\n  source: DelaySubscriber<T>;\n  destination: PartialObserver<T>;\n  scheduler: IScheduler;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelaySubscriber<T> extends Subscriber<T> {\n  private queue: Array<DelayMessage<T>> = [];\n  private active: boolean = false;\n  private errored: boolean = false;\n\n  private static dispatch<T>(this: Action<DelayState<T>>, state: DelayState<T>): void {\n    const source = state.source;\n    const queue = source.queue;\n    const scheduler = state.scheduler;\n    const destination = state.destination;\n\n    while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      const delay = Math.max(0, queue[0].time - scheduler.now());\n      this.schedule(state, delay);\n    } else {\n      source.active = false;\n    }\n  }\n\n  constructor(destination: Subscriber<T>,\n              private delay: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  private _schedule(scheduler: IScheduler): void {\n    this.active = true;\n    this.add(scheduler.schedule<DelayState<T>>(DelaySubscriber.dispatch, this.delay, {\n      source: this, destination: this.destination, scheduler: scheduler\n    }));\n  }\n\n  private scheduleNotification(notification: Notification<T>): void {\n    if (this.errored === true) {\n      return;\n    }\n\n    const scheduler = this.scheduler;\n    const message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  }\n\n  protected _next(value: T) {\n    this.scheduleNotification(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    this.scheduleNotification(Notification.createComplete());\n  }\n}\n\nclass DelayMessage<T> {\n  constructor(public readonly time: number,\n              public readonly notification: Notification<T>) {\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { delay } from '../../operator/delay';\n\nObservable.prototype.delay = delay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delay: typeof delay;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(this: Observable<T>, delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): Observable<T> {\n  if (subscriptionDelay) {\n    return new SubscriptionDelayObservable(this, subscriptionDelay)\n      .lift(new DelayWhenOperator(delayDurationSelector));\n  }\n  return this.lift(new DelayWhenOperator(delayDurationSelector));\n}\n\nclass DelayWhenOperator<T> implements Operator<T, T> {\n  constructor(private delayDurationSelector: (value: T) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelayWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private completed: boolean = false;\n  private delayNotifierSubscriptions: Array<Subscription> = [];\n  private values: Array<T> = [];\n\n  constructor(destination: Subscriber<T>,\n              private delayDurationSelector: (value: T) => Observable<any>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    const value = this.removeSubscription(innerSub);\n    if (value) {\n      this.destination.next(value);\n    }\n    this.tryComplete();\n  }\n\n  protected _next(value: T): void {\n    try {\n      const delayNotifier = this.delayDurationSelector(value);\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.completed = true;\n    this.tryComplete();\n  }\n\n  private removeSubscription(subscription: InnerSubscriber<T, R>): T {\n    subscription.unsubscribe();\n\n    const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n    let value: T = null;\n\n    if (subscriptionIdx !== -1) {\n      value = this.values[subscriptionIdx];\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n      this.values.splice(subscriptionIdx, 1);\n    }\n\n    return value;\n  }\n\n  private tryDelay(delayNotifier: Observable<any>, value: T): void {\n    const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n\n    if (notifierSubscription && !notifierSubscription.closed) {\n      this.add(notifierSubscription);\n      this.delayNotifierSubscriptions.push(notifierSubscription);\n    }\n\n    this.values.push(value);\n  }\n\n  private tryComplete(): void {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete();\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelayObservable<T> extends Observable<T> {\n  constructor(protected source: Observable<T>, private subscriptionDelay: Observable<any>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelaySubscriber<T> extends Subscriber<T> {\n  private sourceSubscribed: boolean = false;\n\n  constructor(private parent: Subscriber<T>, private source: Observable<T>) {\n    super();\n  }\n\n  protected _next(unused: any) {\n    this.subscribeToSource();\n  }\n\n  protected _error(err: any) {\n    this.unsubscribe();\n    this.parent.error(err);\n  }\n\n  protected _complete() {\n    this.subscribeToSource();\n  }\n\n  private subscribeToSource(): void {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { delayWhen } from '../../operator/delayWhen';\n\nObservable.prototype.delayWhen = delayWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delayWhen: typeof delayWhen;\n  }\n}","import { root } from './root';\n\nexport interface ISetCtor {\n  new<T>(): ISet<T>;\n}\n\nexport interface ISet<T> {\n  add(value: T): void;\n  has(value: T): boolean;\n  size: number;\n  clear(): void;\n}\n\nexport function minimalSetImpl<T>(): ISetCtor {\n  // THIS IS NOT a full impl of Set, this is just the minimum\n  // bits of functionality we need for this library.\n  return class MinimalSet<T> implements ISet<T> {\n    private _values: T[] = [];\n\n    add(value: T): void {\n      if (!this.has(value)) {\n        this._values.push(value);\n      }\n    }\n\n    has(value: T): boolean {\n      return this._values.indexOf(value) !== -1;\n    }\n\n    get size(): number {\n      return this._values.length;\n    }\n\n    clear(): void {\n      this._values.length = 0;\n    }\n  };\n}\n\nexport const Set: ISetCtor = root.Set || minimalSetImpl();","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ISet, Set } from '../util/Set';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T, K>(this: Observable<T>,\n                               keySelector?: (value: T) => K,\n                               flushes?: Observable<any>): Observable<T> {\n  return this.lift(new DistinctOperator(keySelector, flushes));\n}\n\nclass DistinctOperator<T, K> implements Operator<T, T> {\n  constructor(private keySelector: (value: T) => K, private flushes: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class DistinctSubscriber<T, K> extends OuterSubscriber<T, T> {\n  private values: ISet<K> = new Set<K>();\n\n  constructor(destination: Subscriber<T>, private keySelector: (value: T) => K, flushes: Observable<any>) {\n    super(destination);\n\n    if (flushes) {\n      this.add(subscribeToResult(this, flushes));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values.clear();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, T>): void {\n    this._error(error);\n  }\n\n  protected _next(value: T): void {\n    if (this.keySelector) {\n      this._useKeySelector(value);\n    } else {\n      this._finalizeNext(value, value);\n    }\n  }\n\n  private _useKeySelector(value: T): void {\n    let key: K;\n    const { destination } = this;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this._finalizeNext(key, value);\n  }\n\n  private _finalizeNext(key: K|T, value: T) {\n    const { values } = this;\n    if (!values.has(<K>key)) {\n      values.add(<K>key);\n      this.destination.next(value);\n    }\n  }\n\n}\n","import { Observable } from '../../Observable';\nimport { distinct } from '../../operator/distinct';\n\nObservable.prototype.distinct = distinct;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinct: typeof distinct;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { distinctUntilChanged } from '../../operator/distinctUntilChanged';\n\nObservable.prototype.distinctUntilChanged = distinctUntilChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilChanged: typeof distinctUntilChanged;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilChanged<T>(this: Observable<T>, compare?: (x: T, y: T) => boolean): Observable<T>;\nexport function distinctUntilChanged<T, K>(this: Observable<T>, compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(this: Observable<T>, compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): Observable<T> {\n  return this.lift(new DistinctUntilChangedOperator<T, K>(compare, keySelector));\n}\n\nclass DistinctUntilChangedOperator<T, K> implements Operator<T, T> {\n  constructor(private compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DistinctUntilChangedSubscriber<T, K> extends Subscriber<T> {\n  private key: K;\n  private hasKey: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n  }\n\n  private compare(x: any, y: any): boolean {\n    return x === y;\n  }\n\n  protected _next(value: T): void {\n\n    const keySelector = this.keySelector;\n    let key: any = value;\n\n    if (keySelector) {\n      key = tryCatch(this.keySelector)(value);\n      if (key === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    }\n\n    let result: any = false;\n\n    if (this.hasKey) {\n      result = tryCatch(this.compare)(this.key, key);\n      if (result === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    } else {\n      this.hasKey = true;\n    }\n\n    if (Boolean(result) === false) {\n      this.key = key;\n      this.destination.next(value);\n    }\n  }\n}\n","import { distinctUntilChanged } from './distinctUntilChanged';\nimport { Observable } from '../Observable';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilKeyChanged<T>(this: Observable<T>, key: string): Observable<T>;\nexport function distinctUntilKeyChanged<T, K>(this: Observable<T>, key: string, compare: (x: K, y: K) => boolean): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>An example comparing the name of persons</caption>\n *\n *  interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilKeyChanged('name')\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @example <caption>An example comparing the first letters of the name</caption>\n *\n * interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo1'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo2'},\n *     { age: 6, name: 'Foo3'})\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo1' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo2' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n *\n * @param {string} key String key for object property lookup on each item.\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nexport function distinctUntilKeyChanged<T>(this: Observable<T>, key: string, compare?: (x: T, y: T) => boolean): Observable<T> {\n  return distinctUntilChanged.call(this, function(x: T, y: T) {\n    if (compare) {\n      return compare(x[key], y[key]);\n    }\n    return x[key] === y[key];\n  });\n}\n","\nimport { Observable } from '../../Observable';\nimport { distinctUntilKeyChanged } from '../../operator/distinctUntilKeyChanged';\n\nObservable.prototype.distinctUntilKeyChanged = distinctUntilKeyChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilKeyChanged: typeof distinctUntilKeyChanged;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\n\n/* tslint:disable:max-line-length */\nexport function _do<T>(this: Observable<T>, next: (x: T) => void, error?: (e: any) => void, complete?: () => void): Observable<T>;\nexport function _do<T>(this: Observable<T>, observer: PartialObserver<T>): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @method do\n * @name do\n * @owner Observable\n */\nexport function _do<T>(this: Observable<T>, nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): Observable<T> {\n  return this.lift(new DoOperator(nextOrObserver, error, complete));\n}\n\nclass DoOperator<T> implements Operator<T, T> {\n  constructor(private nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              private error?: (e: any) => void,\n              private complete?: () => void) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DoSubscriber<T> extends Subscriber<T> {\n\n  private safeSubscriber: Subscriber<T>;\n\n  constructor(destination: Subscriber<T>,\n              nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              error?: (e: any) => void,\n              complete?: () => void) {\n    super(destination);\n\n    const safeSubscriber = new Subscriber<T>(nextOrObserver, error, complete);\n    safeSubscriber.syncErrorThrowable = true;\n    this.add(safeSubscriber);\n    this.safeSubscriber = safeSubscriber;\n  }\n\n  protected _next(value: T): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.next(value);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.next(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.error(err);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.complete();\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _do } from '../../operator/do';\n\nObservable.prototype.do = _do;\nObservable.prototype._do = _do;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    do: typeof _do;\n    _do: typeof _do;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(this: Observable<T>): Observable<T> {\n  return this.lift(new SwitchFirstOperator<T>());\n}\n\nclass SwitchFirstOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SwitchFirstSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasCompleted: boolean = false;\n  private hasSubscription: boolean = false;\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, value));\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { exhaust } from '../../operator/exhaust';\n\nObservable.prototype.exhaust = exhaust;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaust: typeof exhaust;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function exhaustMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\nexport function exhaustMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                    resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return this.lift(new SwitchFirstMapOperator(project, resultSelector));\n}\n\nclass SwitchFirstMapOperator<T, I, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasSubscription: boolean = false;\n  private hasCompleted: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.tryNext(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    const index = this.index++;\n    const destination = this.destination;\n    try {\n      const result = this.project(value, index);\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, result, value, index));\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    try {\n      const result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n      destination.next(result);\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { exhaustMap } from '../../operator/exhaustMap';\n\nObservable.prototype.exhaustMap = exhaustMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaustMap: typeof exhaustMap;\n  }\n}","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function expand<T>(this: Observable<T>, project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function expand<T, R>(this: Observable<T>, project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: IScheduler): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(this: Observable<T>, project: (value: T, index: number) => Observable<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: IScheduler = undefined): Observable<R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return this.lift(new ExpandOperator(project, concurrent, scheduler));\n}\n\nexport class ExpandOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  }\n}\n\ninterface DispatchArg<T, R> {\n  subscriber: ExpandSubscriber<T, R>;\n  result: Observable<R>;\n  value: any;\n  index: number;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ExpandSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private index: number = 0;\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  private buffer: any[];\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      this.buffer = [];\n    }\n  }\n\n  private static dispatch<T, R>(arg: DispatchArg<T, R>): void {\n    const {subscriber, result, value, index} = arg;\n    subscriber.subscribeToProjection(result, value, index);\n  }\n\n  protected _next(value: any): void {\n    const destination = this.destination;\n\n    if (destination.closed) {\n      this._complete();\n      return;\n    }\n\n    const index = this.index++;\n    if (this.active < this.concurrent) {\n      destination.next(value);\n      let result = tryCatch(this.project)(value, index);\n      if (result === errorObject) {\n        destination.error(errorObject.e);\n      } else if (!this.scheduler) {\n        this.subscribeToProjection(result, value, index);\n      } else {\n        const state: DispatchArg<T, R> = { subscriber: this, result, value, index };\n        this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private subscribeToProjection(result: any, value: T, index: number): void {\n    this.active++;\n    this.add(subscribeToResult<T, R>(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { expand } from '../../operator/expand';\n\nObservable.prototype.expand = expand;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    expand: typeof expand;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(this: Observable<T>, index: number, defaultValue?: T): Observable<T> {\n  return this.lift(new ElementAtOperator(index, defaultValue));\n}\n\nclass ElementAtOperator<T> implements Operator<T, T> {\n\n  constructor(private index: number, private defaultValue?: T) {\n    if (index < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ElementAtSubscriber<T> extends Subscriber<T> {\n\n  constructor(destination: Subscriber<T>, private index: number, private defaultValue?: T) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (this.index-- === 0) {\n      this.destination.next(x);\n      this.destination.complete();\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    if (this.index >= 0) {\n      if (typeof this.defaultValue !== 'undefined') {\n        destination.next(this.defaultValue);\n      } else {\n        destination.error(new ArgumentOutOfRangeError);\n      }\n    }\n    destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { elementAt } from '../../operator/elementAt';\n\nObservable.prototype.elementAt = elementAt;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    elementAt: typeof elementAt;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { filter } from '../../operator/filter';\n\nObservable.prototype.filter = filter;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    filter: typeof filter;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { Observable } from '../Observable';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function _finally<T>(this: Observable<T>, callback: () => void): Observable<T> {\n  return this.lift(new FinallyOperator(callback));\n}\n\nclass FinallyOperator<T> implements Operator<T, T> {\n  constructor(private callback: () => void) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FinallySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<T>, callback: () => void) {\n    super(destination);\n    this.add(new Subscription(callback));\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _finally } from '../../operator/finally';\n\nObservable.prototype.finally = _finally;\nObservable.prototype._finally = _finally;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    finally: typeof _finally;\n    _finally: typeof _finally;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { find } from '../../operator/find';\n\nObservable.prototype.find = find;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    find: typeof find;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\n\n/* tslint:disable:max-line-length */\nexport function find<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number) => value is S,\n                                     thisArg?: any): Observable<S>;\nexport function find<T>(this: Observable<T>,\n                        predicate: (value: T, index: number) => boolean,\n                        thisArg?: any): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): Observable<T> {\n  if (typeof predicate !== 'function') {\n    throw new TypeError('predicate is not a function');\n  }\n  return <any>this.lift<any>(new FindValueOperator(predicate, this, false, thisArg));\n}\n\nexport class FindValueOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n  }\n\n  call(observer: Subscriber<T>, source: any): any {\n    return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class FindValueSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n    super(destination);\n  }\n\n  private notifyComplete(value: any): void {\n    const destination = this.destination;\n\n    destination.next(value);\n    destination.complete();\n  }\n\n  protected _next(value: T): void {\n    const { predicate, thisArg } = this;\n    const index = this.index++;\n    try {\n      const result = predicate.call(thisArg || this, value, index, this.source);\n      if (result) {\n        this.notifyComplete(this.yieldIndex ? index : value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(this.yieldIndex ? -1 : undefined);\n  }\n}\n","import { Observable } from '../Observable';\nimport { FindValueOperator } from './find';\n\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nexport function findIndex<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                             thisArg?: any): Observable<number> {\n  return <any>this.lift<any>(new FindValueOperator(predicate, this, true, thisArg));\n}\n","\nimport { Observable } from '../../Observable';\nimport { findIndex } from '../../operator/findIndex';\n\nObservable.prototype.findIndex = findIndex;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    findIndex: typeof findIndex;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\n\n/* tslint:disable:max-line-length */\nexport function first<T, S extends T>(this: Observable<T>,\n                                      predicate: (value: T, index: number, source: Observable<T>) => value is S): Observable<S>;\nexport function first<T, S extends T, R>(this: Observable<T>,\n                                         predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                         resultSelector: (value: S, index: number) => R, defaultValue?: R): Observable<R>;\nexport function first<T, S extends T>(this: Observable<T>,\n                                      predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                      resultSelector: void,\n                                      defaultValue?: S): Observable<S>;\nexport function first<T>(this: Observable<T>,\n                         predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\nexport function first<T, R>(this: Observable<T>,\n                            predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: (value: T, index: number) => R,\n                            defaultValue?: R): Observable<R>;\nexport function first<T>(this: Observable<T>,\n                         predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         resultSelector: void,\n                         defaultValue?: T): Observable<T>;\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, R>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: ((value: T, index: number) => R) | void,\n                            defaultValue?: R): Observable<T | R> {\n  return this.lift(new FirstOperator(predicate, resultSelector, defaultValue, this));\n}\n\nclass FirstOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FirstSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private hasCompleted: boolean = false;\n  private _emitted: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      this._emit(value, index);\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this._emit(value, index);\n    }\n  }\n\n  private _emit(value: any, index: number) {\n    if (this.resultSelector) {\n      this._tryResultSelector(value, index);\n      return;\n    }\n    this._emitFinal(value);\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this._emitFinal(result);\n  }\n\n  private _emitFinal(value: any) {\n    const destination = this.destination;\n    if (!this._emitted) {\n      this._emitted = true;\n      destination.next(value);\n      destination.complete();\n      this.hasCompleted = true;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n      destination.next(this.defaultValue);\n      destination.complete();\n    } else if (!this.hasCompleted) {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { first } from '../../operator/first';\n\nObservable.prototype.first = <any>first;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    first: typeof first;\n  }\n}","export class MapPolyfill {\n  public size = 0;\n  private _values: any[] = [];\n  private _keys: any[] = [];\n\n  get(key: any) {\n    const i = this._keys.indexOf(key);\n    return i === -1 ? undefined : this._values[i];\n  }\n\n  set(key: any, value: any) {\n    const i = this._keys.indexOf(key);\n    if (i === -1) {\n      this._keys.push(key);\n      this._values.push(value);\n      this.size++;\n    } else {\n      this._values[i] = value;\n    }\n    return this;\n  }\n\n  delete(key: any): boolean {\n    const i = this._keys.indexOf(key);\n    if (i === -1) { return false; }\n    this._values.splice(i, 1);\n    this._keys.splice(i, 1);\n    this.size--;\n    return true;\n  }\n\n  clear(): void {\n    this._keys.length = 0;\n    this._values.length = 0;\n    this.size = 0;\n  }\n\n  forEach(cb: Function, thisArg: any): void {\n    for (let i = 0; i < this.size; i++) {\n      cb.call(thisArg, this._values[i], this._keys[i]);\n    }\n  }\n}","import { root } from './root';\nimport { MapPolyfill } from './MapPolyfill';\n\nexport const Map = root.Map || (() => MapPolyfill)();","export class FastMap {\n  private values: Object = {};\n\n  delete(key: string): boolean {\n    this.values[key] = null;\n    return true;\n  }\n\n  set(key: string, value: any): FastMap {\n    this.values[key] = value;\n    return this;\n  }\n\n  get(key: string): any {\n    return this.values[key];\n  }\n\n  forEach(cb: (value: any, key: any) => void, thisArg?: any): void {\n    const values = this.values;\n    for (let key in values) {\n      if (values.hasOwnProperty(key) && values[key] !== null) {\n        cb.call(thisArg, values[key], key);\n      }\n    }\n  }\n\n  clear(): void {\n    this.values = {};\n  }\n}","import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subject } from '../Subject';\nimport { Map } from '../util/Map';\nimport { FastMap } from '../util/FastMap';\n\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(this: Observable<T>, keySelector: (value: T) => K): Observable<GroupedObservable<K, T>>;\nexport function groupBy<T, K>(this: Observable<T>, keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): Observable<GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): Observable<GroupedObservable<K, R>>;\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): Observable<GroupedObservable<K, R>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n                                 subjectSelector?: () => Subject<R>): Observable<GroupedObservable<K, R>> {\n  return this.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n}\n\nexport interface RefCountSubscription {\n  count: number;\n  unsubscribe: () => void;\n  closed: boolean;\n  attemptedToUnsubscribe: boolean;\n}\n\nclass GroupByOperator<T, K, R> implements Operator<T, GroupedObservable<K, R>> {\n  constructor(private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n  }\n\n  call(subscriber: Subscriber<GroupedObservable<K, R>>, source: any): any {\n    return source.subscribe(new GroupBySubscriber(\n      subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupBySubscriber<T, K, R> extends Subscriber<T> implements RefCountSubscription {\n  private groups: Map<K, Subject<T|R>> = null;\n  public attemptedToUnsubscribe: boolean = false;\n  public count: number = 0;\n\n  constructor(destination: Subscriber<GroupedObservable<K, R>>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    let key: K;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  }\n\n  private _group(value: T, key: K) {\n    let groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = typeof key === 'string' ? new FastMap() : new Map();\n    }\n\n    let group = groups.get(key);\n\n    let element: R;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = <any>value;\n    }\n\n    if (!group) {\n      group = this.subjectSelector ? this.subjectSelector() : new Subject<R>();\n      groups.set(key, group);\n      const groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        let duration: any;\n        try {\n          duration = this.durationSelector(new GroupedObservable<K, R>(key, <Subject<R>>group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.closed) {\n      group.next(element);\n    }\n  }\n\n  protected _error(err: any): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.error(err);\n      });\n\n      groups.clear();\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.complete();\n      });\n\n      groups.clear();\n    }\n    this.destination.complete();\n  }\n\n  removeGroup(key: K): void {\n    this.groups.delete(key);\n  }\n\n  unsubscribe() {\n    if (!this.closed) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        super.unsubscribe();\n      }\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupDurationSubscriber<K, T> extends Subscriber<T> {\n  constructor(private key: K,\n              private group: Subject<T>,\n              private parent: GroupBySubscriber<any, K, T>) {\n    super(group);\n  }\n\n  protected _next(value: T): void {\n    this.complete();\n  }\n\n  protected _unsubscribe() {\n    const { parent, key } = this;\n    this.key = this.parent = null;\n    if (parent) {\n      parent.removeGroup(key);\n    }\n  }\n}\n\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport class GroupedObservable<K, T> extends Observable<T> {\n  constructor(public key: K,\n              private groupSubject: Subject<T>,\n              private refCountSubscription?: RefCountSubscription) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const subscription = new Subscription();\n    const {refCountSubscription, groupSubject} = this;\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass InnerRefCountSubscription extends Subscription {\n  constructor(private parent: RefCountSubscription) {\n    super();\n    parent.count++;\n  }\n\n  unsubscribe() {\n    const parent = this.parent;\n    if (!parent.closed && !this.closed) {\n      super.unsubscribe();\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { groupBy } from '../../operator/groupBy';\n\nObservable.prototype.groupBy = <any>groupBy;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    groupBy: typeof groupBy;\n  }\n}","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(this: Observable<T>): Observable<T> {\n  return this.lift(new IgnoreElementsOperator());\n};\n\nclass IgnoreElementsOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IgnoreElementsSubscriber<T> extends Subscriber<T> {\n  protected _next(unused: T): void {\n    noop();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { ignoreElements } from '../../operator/ignoreElements';\n\nObservable.prototype.ignoreElements = ignoreElements;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    ignoreElements: typeof ignoreElements;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * If the source Observable is empty it returns an Observable that emits true, otherwise it emits false.\n *\n * <img src=\"./img/isEmpty.png\" width=\"100%\">\n *\n * @return {Observable} An Observable that emits a Boolean.\n * @method isEmpty\n * @owner Observable\n */\nexport function isEmpty<T>(this: Observable<T>): Observable<boolean> {\n  return this.lift(new IsEmptyOperator());\n}\n\nclass IsEmptyOperator implements Operator<any, boolean> {\n  call (observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new IsEmptySubscriber(observer));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IsEmptySubscriber extends Subscriber<any> {\n  constructor(destination: Subscriber<boolean>) {\n    super(destination);\n  }\n\n  private notifyComplete(isEmpty: boolean): void {\n    const destination = this.destination;\n\n    destination.next(isEmpty);\n    destination.complete();\n  }\n\n  protected _next(value: boolean) {\n    this.notifyComplete(false);\n  }\n\n  protected _complete() {\n    this.notifyComplete(true);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { isEmpty } from '../../operator/isEmpty';\n\nObservable.prototype.isEmpty = isEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    isEmpty: typeof isEmpty;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(this: Observable<T>, durationSelector: (value: T) => SubscribableOrPromise<any>): Observable<T> {\n  return this.lift(new AuditOperator(durationSelector));\n}\n\nclass AuditOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new AuditSubscriber<T, T>(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      const duration = tryCatch(this.durationSelector)(value);\n      if (duration === errorObject) {\n        this.destination.error(errorObject.e);\n      } else {\n        const innerSubscription = subscribeToResult(this, duration);\n        if (innerSubscription.closed) {\n          this.clearThrottle();\n        } else {\n          this.add(this.throttled = innerSubscription);\n        }\n      }\n    }\n  }\n\n  clearThrottle() {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number): void {\n    this.clearThrottle();\n  }\n\n  notifyComplete(): void {\n    this.clearThrottle();\n  }\n}\n","import { Observable } from '../../Observable';\nimport { audit } from '../../operator/audit';\n\nObservable.prototype.audit = audit;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    audit: typeof audit;\n  }\n}","import { async } from '../scheduler/async';\nimport { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nexport function auditTime<T>(this: Observable<T>, duration: number, scheduler: IScheduler = async): Observable<T> {\n  return this.lift(new AuditTimeOperator(duration, scheduler));\n}\n\nclass AuditTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new AuditTimeSubscriber(subscriber, this.duration, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditTimeSubscriber<T> extends Subscriber<T> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, this));\n    }\n  }\n\n  clearThrottle(): void {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n}\n\nfunction dispatchNext<T>(subscriber: AuditTimeSubscriber<T>): void {\n  subscriber.clearThrottle();\n}\n","import { Observable } from '../../Observable';\nimport { auditTime } from '../../operator/auditTime';\n\nObservable.prototype.auditTime = auditTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    auditTime: typeof auditTime;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\n\n/* tslint:disable:max-line-length */\nexport function last<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number, source: Observable<T>) => value is S): Observable<S>;\nexport function last<T, S extends T, R>(this: Observable<T>,\n                                        predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                        resultSelector: (value: S, index: number) => R, defaultValue?: R): Observable<R>;\nexport function last<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     resultSelector: void,\n                                     defaultValue?: S): Observable<S>;\nexport function last<T>(this: Observable<T>,\n                        predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\nexport function last<T, R>(this: Observable<T>,\n                           predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: (value: T, index: number) => R,\n                           defaultValue?: R): Observable<R>;\nexport function last<T>(this: Observable<T>,\n                        predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        resultSelector: void,\n                        defaultValue?: T): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last<T, R>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: ((value: T, index: number) => R) | void,\n                           defaultValue?: R): Observable<T | R> {\n  return this.lift(new LastOperator(predicate, resultSelector, defaultValue, this));\n}\n\nclass LastOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass LastSubscriber<T, R> extends Subscriber<T> {\n  private lastValue: T | R;\n  private hasValue: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n    if (typeof defaultValue !== 'undefined') {\n      this.lastValue = defaultValue;\n      this.hasValue = true;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.lastValue = result;\n    this.hasValue = true;\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (this.hasValue) {\n      destination.next(this.lastValue);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { last } from '../../operator/last';\n\nObservable.prototype.last = <any>last;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    last: typeof last;\n  }\n}","import { Observable } from '../Observable';\n\n/**\n * @param func\n * @return {Observable<R>}\n * @method let\n * @owner Observable\n */\nexport function letProto<T, R>(this: Observable<T>, func: (selector: Observable<T>) => Observable<R>): Observable<R> {\n  return func(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { letProto } from '../../operator/let';\n\nObservable.prototype.let = letProto;\nObservable.prototype.letBind = letProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    let: typeof letProto;\n    letBind: typeof letProto;\n  }\n}","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): Observable<boolean> {\n  return this.lift(new EveryOperator(predicate, thisArg, this));\n}\n\nclass EveryOperator<T> implements Operator<T, boolean> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass EverySubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Observer<boolean>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg: any,\n              private source?: Observable<T>) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  private notifyComplete(everyValueMatch: boolean): void {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  }\n\n  protected _next(value: T): void {\n    let result = false;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(true);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { every } from '../../operator/every';\n\nObservable.prototype.every = every;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    every: typeof every;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { map } from '../../operator/map';\n\nObservable.prototype.map = map;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    map: typeof map;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(this: Observable<T>, value: R): Observable<R> {\n  return this.lift(new MapToOperator(value));\n}\n\nclass MapToOperator<T, R> implements Operator<T, R> {\n\n  value: R;\n\n  constructor(value: R) {\n    this.value = value;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapToSubscriber(subscriber, this.value));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapToSubscriber<T, R> extends Subscriber<T> {\n\n  value: R;\n\n  constructor(destination: Subscriber<R>, value: R) {\n    super(destination);\n    this.value = value;\n  }\n\n  protected _next(x: T) {\n    this.destination.next(this.value);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mapTo } from '../../operator/mapTo';\n\nObservable.prototype.mapTo = mapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mapTo: typeof mapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(this: Observable<T>): Observable<Notification<T>> {\n  return this.lift(new MaterializeOperator());\n}\n\nclass MaterializeOperator<T> implements Operator<T, Notification<T>> {\n  call(subscriber: Subscriber<Notification<T>>, source: any): any {\n    return source.subscribe(new MaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MaterializeSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Notification<T>>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.destination.next(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    const destination = this.destination;\n    destination.next(Notification.createError(err));\n    destination.complete();\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    destination.next(Notification.createComplete());\n    destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { materialize } from '../../operator/materialize';\n\nObservable.prototype.materialize = materialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    materialize: typeof materialize;\n  }\n}","import { Observable } from '../Observable';\nimport { ReduceOperator } from './reduce';\n\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @example <caption>Get the maximal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .max()\n *   .subscribe(x => console.log(x)); // -> 8\n *\n * @example <caption>Use a comparer function to get the maximal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * }\n *\n * @see {@link min}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable} An Observable that emits item with the largest value.\n * @method max\n * @owner Observable\n */\nexport function max<T>(this: Observable<T>, comparer?: (x: T, y: T) => number): Observable<T> {\n  const max: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) > 0 ? x : y\n    : (x, y) => x > y ? x : y;\n  return this.lift(new ReduceOperator(max));\n}\n","\nimport { Observable } from '../../Observable';\nimport { max } from '../../operator/max';\n\nObservable.prototype.max = max;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    max: typeof max;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { MergeAllOperator } from './mergeAll';\nimport { isScheduler } from '../util/isScheduler';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(this: Observable<T>, scheduler?: IScheduler): Observable<T>;\nexport function merge<T>(this: Observable<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function merge<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(this: Observable<T>, ...observables: Array<ObservableInput<T> | IScheduler | number>): Observable<T>;\nexport function merge<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {ObservableInput} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} An Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nexport function merge<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R> {\n  return this.lift.call(mergeStatic<T, R>(this, ...observables));\n}\n\n/* tslint:disable:max-line-length */\nexport function mergeStatic<T>(v1: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function mergeStatic<T>(v1: ObservableInput<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function mergeStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function mergeStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2>;\nexport function mergeStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function mergeStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function mergeStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function mergeStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function mergeStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function mergeStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function mergeStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function mergeStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function mergeStatic<T>(...observables: (ObservableInput<T> | IScheduler | number)[]): Observable<T>;\nexport function mergeStatic<T, R>(...observables: (ObservableInput<any> | IScheduler | number)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nexport function mergeStatic<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R> {\n let concurrent = Number.POSITIVE_INFINITY;\n let scheduler: IScheduler = null;\n  let last: any = observables[observables.length - 1];\n  if (isScheduler(last)) {\n    scheduler = <IScheduler>observables.pop();\n    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n      concurrent = <number>observables.pop();\n    }\n  } else if (typeof last === 'number') {\n    concurrent = <number>observables.pop();\n  }\n\n  if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n    return <Observable<R>>observables[0];\n  }\n\n  return new ArrayObservable(<any>observables, scheduler).lift(new MergeAllOperator<R>(concurrent));\n}\n","\nimport { Observable } from '../../Observable';\nimport { merge } from '../../operator/merge';\n\nObservable.prototype.merge = merge;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    merge: typeof merge;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { mergeAll } from '../../operator/mergeAll';\n\nObservable.prototype.mergeAll = mergeAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeAll: typeof mergeAll;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): Observable<R>;\nexport function mergeMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): Observable<I | R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return this.lift(new MergeMapOperator(project, <any>resultSelector, concurrent));\n}\n\nexport class MergeMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<I>, source: any): any {\n    return source.subscribe(new MergeMapSubscriber(\n      observer, this.project, this.resultSelector, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<I>, value: T, index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _notifyResultSelector(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeMap } from '../../operator/mergeMap';\n\nObservable.prototype.mergeMap = <any>mergeMap;\nObservable.prototype.flatMap = <any>mergeMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMap: typeof mergeMap;\n    mergeMap: typeof mergeMap;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function mergeMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>, concurrent?: number): Observable<R>;\nexport function mergeMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return this.lift(new MergeMapToOperator(innerObservable, <any>resultSelector, concurrent));\n}\n\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\nexport class MergeMapToOperator<T, I, R> implements Operator<Observable<T>, R> {\n  constructor(private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      const resultSelector = this.resultSelector;\n      const index = this.index++;\n      const ish = this.ish;\n      const destination = this.destination;\n\n      this.active++;\n      this._innerSub(ish, destination, resultSelector, value, index);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: ObservableInput<I>,\n                    destination: PartialObserver<I>,\n                    resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n                    value: T,\n                    index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeMapTo } from '../../operator/mergeMapTo';\n\nObservable.prototype.flatMapTo = <any>mergeMapTo;\nObservable.prototype.mergeMapTo = <any>mergeMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMapTo: typeof mergeMapTo;\n    mergeMapTo: typeof mergeMapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(this: Observable<T>,\n                                accumulator: (acc: R, value: T) => Observable<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  return this.lift(new MergeScanOperator(accumulator, seed, concurrent));\n}\n\nexport class MergeScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T) => Observable<R>,\n              private seed: R,\n              private concurrent: number) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeScanSubscriber(\n      subscriber, this.accumulator, this.seed, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeScanSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasValue: boolean = false;\n  private hasCompleted: boolean = false;\n  private buffer: Observable<any>[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private accumulator: (acc: R, value: T) => Observable<R>,\n              private acc: R,\n              private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(value: any): void {\n    if (this.active < this.concurrent) {\n      const index = this.index++;\n      const ish = tryCatch(this.accumulator)(this.acc, value);\n      const destination = this.destination;\n      if (ish === errorObject) {\n        destination.error(errorObject.e);\n      } else {\n        this.active++;\n        this._innerSub(ish, value, index);\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: any, value: T, index: number): void {\n    this.add(subscribeToResult<T, R>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { destination } = this;\n    this.acc = innerValue;\n    this.hasValue = true;\n    destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeScan } from '../../operator/mergeScan';\n\nObservable.prototype.mergeScan = mergeScan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeScan: typeof mergeScan;\n  }\n}","import { Observable } from '../Observable';\nimport { ReduceOperator } from './reduce';\n\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>Get the minimal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n *\n * @example <caption>Use a comparer function to get the minimal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n *\n * @see {@link max}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable<R>} An Observable that emits item with the smallest value.\n * @method min\n * @owner Observable\n */\nexport function min<T>(this: Observable<T>, comparer?: (x: T, y: T) => number): Observable<T> {\n  const min: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) < 0 ? x : y\n    : (x, y) => x < y ? x : y;\n  return this.lift(new ReduceOperator(min));\n}\n","\nimport { Observable } from '../../Observable';\nimport { min } from '../../operator/min';\n\nObservable.prototype.min = min;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    min: typeof min;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { multicast } from '../../operator/multicast';\n\nObservable.prototype.multicast = <any>multicast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    multicast: typeof multicast;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { observeOn } from '../../operator/observeOn';\n\nObservable.prototype.observeOn = observeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    observeOn: typeof observeOn;\n  }\n}","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class PromiseObservable<T> extends Observable<T> {\n\n  public value: T;\n\n  /**\n   * Converts a Promise to an Observable.\n   *\n   * <span class=\"informal\">Returns an Observable that just emits the Promise's\n   * resolved value, then completes.</span>\n   *\n   * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n   * Observable. If the Promise resolves with a value, the output Observable\n   * emits that resolved value as a `next`, and then completes. If the Promise\n   * is rejected, then the output Observable emits the corresponding Error.\n   *\n   * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n   * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   *\n   * @param {PromiseLike<T>} promise The promise to be converted.\n   * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\n   * the delivery of the resolved value (or the rejection).\n   * @return {Observable<T>} An Observable which wraps the Promise.\n   * @static true\n   * @name fromPromise\n   * @owner Observable\n   */\n  static create<T>(promise: PromiseLike<T>, scheduler?: IScheduler): Observable<T> {\n    return new PromiseObservable(promise, scheduler);\n  }\n\n  constructor(private promise: PromiseLike<T>, private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const promise = this.promise;\n    const scheduler = this.scheduler;\n\n    if (scheduler == null) {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          subscriber.next(this.value);\n          subscriber.complete();\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.next(value);\n              subscriber.complete();\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.error(err);\n            }\n          }\n        )\n        .then(null, err => {\n          // escape the promise trap, throw unhandled errors\n          root.setTimeout(() => { throw err; });\n        });\n      }\n    } else {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber });\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchNext, 0, { value, subscriber }));\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchError, 0, { err, subscriber }));\n            }\n          })\n          .then(null, (err) => {\n            // escape the promise trap, throw unhandled errors\n            root.setTimeout(() => { throw err; });\n          });\n      }\n    }\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subscriber: Subscriber<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.next(value);\n    subscriber.complete();\n  }\n}\n\ninterface DispatchErrorArg<T> {\n  subscriber: Subscriber<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.error(err);\n  }\n}\n","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IteratorObservable<T> extends Observable<T> {\n  private iterator: any;\n\n  static create<T>(iterator: any, scheduler?: IScheduler): IteratorObservable<T> {\n    return new IteratorObservable(iterator, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, hasError, iterator, subscriber } = state;\n\n    if (hasError) {\n      subscriber.error(state.error);\n      return;\n    }\n\n    let result = iterator.next();\n    if (result.done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(result.value);\n    state.index = index + 1;\n\n    if (subscriber.closed) {\n      if (typeof iterator.return === 'function') {\n        iterator.return();\n      }\n      return;\n    }\n\n    (<any> this).schedule(state);\n  }\n\n  constructor(iterator: any, private scheduler?: IScheduler) {\n    super();\n\n    if (iterator == null) {\n      throw new Error('iterator cannot be null.');\n    }\n\n    this.iterator = getIterator(iterator);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    let index = 0;\n    const { iterator, scheduler } = this;\n\n    if (scheduler) {\n      return scheduler.schedule(IteratorObservable.dispatch, 0, {\n        index, iterator, subscriber\n      });\n    } else {\n      do {\n        let result = iterator.next();\n        if (result.done) {\n          subscriber.complete();\n          break;\n        } else {\n          subscriber.next(result.value);\n        }\n        if (subscriber.closed) {\n          if (typeof iterator.return === 'function') {\n            iterator.return();\n          }\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n\nclass StringIterator {\n  constructor(private str: string,\n              private idx: number = 0,\n              private len: number = str.length) {\n  }\n  [Symbol_iterator]() { return (this); }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.str.charAt(this.idx++)\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nclass ArrayIterator {\n  constructor(private arr: Array<any>,\n              private idx: number = 0,\n              private len: number = toLength(arr)) {\n  }\n  [Symbol_iterator]() { return this; }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.arr[this.idx++]\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nfunction getIterator(obj: any) {\n  const i = obj[Symbol_iterator];\n  if (!i && typeof obj === 'string') {\n    return new StringIterator(obj);\n  }\n  if (!i && obj.length !== undefined) {\n    return new ArrayIterator(obj);\n  }\n  if (!i) {\n    throw new TypeError('object is not iterable');\n  }\n  return obj[Symbol_iterator]();\n}\n\nconst maxSafeInteger = Math.pow(2, 53) - 1;\n\nfunction toLength(o: any) {\n  let len = +o.length;\n  if (isNaN(len)) {\n      return 0;\n  }\n  if (len === 0 || !numberIsFinite(len)) {\n      return len;\n  }\n  len = sign(len) * Math.floor(Math.abs(len));\n  if (len <= 0) {\n      return 0;\n  }\n  if (len > maxSafeInteger) {\n      return maxSafeInteger;\n  }\n  return len;\n}\n\nfunction numberIsFinite(value: any) {\n  return typeof value === 'number' && root.isFinite(value);\n}\n\nfunction sign(value: any) {\n  let valueAsNumber = +value;\n  if (valueAsNumber === 0) {\n    return valueAsNumber;\n  }\n  if (isNaN(valueAsNumber)) {\n    return valueAsNumber;\n  }\n  return valueAsNumber < 0 ? -1 : 1;\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayLikeObservable<T> extends Observable<T> {\n\n  static create<T>(arrayLike: ArrayLike<T>, scheduler?: IScheduler): Observable<T> {\n    const length = arrayLike.length;\n    if (length === 0) {\n      return new EmptyObservable<T>();\n    } else if (length === 1) {\n      return new ScalarObservable<T>(<any>arrayLike[0], scheduler);\n    } else {\n      return new ArrayLikeObservable(arrayLike, scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n    const { arrayLike, index, length, subscriber } = state;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    if (index >= length) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(arrayLike[index]);\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  private value: any;\n\n  constructor(private arrayLike: ArrayLike<T>, private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && arrayLike.length === 1) {\n      this._isScalar = true;\n      this.value = arrayLike[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const { arrayLike, scheduler } = this;\n    const length = arrayLike.length;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n        arrayLike, index, length, subscriber\n      });\n    } else {\n      for (let i = 0; i < length && !subscriber.closed; i++) {\n        subscriber.next(arrayLike[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { isArray } from '../util/isArray';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { PromiseObservable } from './PromiseObservable';\nimport { IteratorObservable } from'./IteratorObservable';\nimport { ArrayObservable } from './ArrayObservable';\nimport { ArrayLikeObservable } from './ArrayLikeObservable';\n\nimport { IScheduler } from '../Scheduler';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { ObserveOnSubscriber } from '../operator/observeOn';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromObservable<T> extends Observable<T> {\n  constructor(private ish: ObservableInput<T>, private scheduler?: IScheduler) {\n    super(null);\n  }\n\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\n  static create<T, R>(ish: ArrayLike<T>, scheduler?: IScheduler): Observable<R>;\n\n  /**\n   * Creates an Observable from an Array, an array-like object, a Promise, an\n   * iterable object, or an Observable-like object.\n   *\n   * <span class=\"informal\">Converts almost anything to an Observable.</span>\n   *\n   * <img src=\"./img/from.png\" width=\"100%\">\n   *\n   * Convert various other objects and data types into Observables. `from`\n   * converts a Promise or an array-like or an\n   * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n   * object into an Observable that emits the items in that promise or array or\n   * iterable. A String, in this context, is treated as an array of characters.\n   * Observable-like objects (contains a function named with the ES2015 Symbol\n   * for Observable) can also be converted through this operator.\n   *\n   * @example <caption>Converts an array to an Observable</caption>\n   * var array = [10, 20, 30];\n   * var result = Rx.Observable.from(array);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 10 20 30\n   *\n   * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n   * function* generateDoubles(seed) {\n   *   var i = seed;\n   *   while (true) {\n   *     yield i;\n   *     i = 2 * i; // double it\n   *   }\n   * }\n   *\n   * var iterator = generateDoubles(3);\n   * var result = Rx.Observable.from(iterator).take(10);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 3 6 12 24 48 96 192 384 768 1536\n   *\n   * @see {@link create}\n   * @see {@link fromEvent}\n   * @see {@link fromEventPattern}\n   * @see {@link fromPromise}\n   *\n   * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n   * Observable-like, an Array, an iterable or an array-like object to be\n   * converted.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * emissions of values.\n   * @return {Observable<T>} The Observable whose values are originally from the\n   * input object that was converted.\n   * @static true\n   * @name from\n   * @owner Observable\n   */\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T> {\n    if (ish != null) {\n      if (typeof ish[Symbol_observable] === 'function') {\n        if (ish instanceof Observable && !scheduler) {\n          return ish;\n        }\n        return new FromObservable<T>(ish, scheduler);\n      } else if (isArray(ish)) {\n        return new ArrayObservable<T>(ish, scheduler);\n      } else if (isPromise<T>(ish)) {\n        return new PromiseObservable<T>(ish, scheduler);\n      } else if (typeof ish[Symbol_iterator] === 'function' || typeof ish === 'string') {\n        return new IteratorObservable<T>(ish, scheduler);\n      } else if (isArrayLike(ish)) {\n        return new ArrayLikeObservable(ish, scheduler);\n      }\n    }\n\n    throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const ish = this.ish;\n    const scheduler = this.scheduler;\n    if (scheduler == null) {\n      return ish[Symbol_observable]().subscribe(subscriber);\n    } else {\n      return ish[Symbol_observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { FromObservable } from '../observable/FromObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<T, R>(this: Observable<T>, v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R> ;\nexport function onErrorResumeNext<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNext<T, R>(this: Observable<T>, array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\n\nexport function onErrorResumeNext<T, R>(this: Observable<T>, ...nextSources: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<Observable<any>>>nextSources[0];\n  }\n\n  return this.lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNextStatic<R>(v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\n\nexport function onErrorResumeNextStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNextStatic<R>(array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\n\nexport function onErrorResumeNextStatic<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                              Array<ObservableInput<any>> |\n                                                              ((...values: Array<any>) => R)>): Observable<R> {\n  let source: ObservableInput<any> = null;\n\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<ObservableInput<any>>>nextSources[0];\n  }\n  source = nextSources.shift();\n\n  return new FromObservable(source, null).lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\nclass OnErrorResumeNextOperator<T, R> implements Operator<T, R> {\n  constructor(private nextSources: Array<ObservableInput<any>>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n  }\n}\n\nclass OnErrorResumeNextSubscriber<T, R> extends OuterSubscriber<T, R> {\n  constructor(protected destination: Subscriber<T>,\n              private nextSources: Array<ObservableInput<any>>) {\n    super(destination);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _error(err: any): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _complete(): void {\n    this.subscribeToNextSource();\n  }\n\n  private subscribeToNextSource(): void {\n    const next = this.nextSources.shift();\n    if (next) {\n      this.add(subscribeToResult(this, next));\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable } from '../../Observable';\r\nimport { onErrorResumeNext } from '../../operator/onErrorResumeNext';\r\n\r\nObservable.prototype.onErrorResumeNext = onErrorResumeNext;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    onErrorResumeNext: typeof onErrorResumeNext;\r\n  }\r\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(this: Observable<T>): Observable<[T, T]> {\n  return this.lift(new PairwiseOperator());\n}\n\nclass PairwiseOperator<T> implements Operator<T, [T, T]> {\n  call(subscriber: Subscriber<[T, T]>, source: any): any {\n    return source.subscribe(new PairwiseSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass PairwiseSubscriber<T> extends Subscriber<T> {\n  private prev: T;\n  private hasPrev: boolean = false;\n\n  constructor(destination: Subscriber<[T, T]>) {\n    super(destination);\n  }\n\n  _next(value: T): void {\n    if (this.hasPrev) {\n      this.destination.next([this.prev, value]);\n    } else {\n      this.hasPrev = true;\n    }\n\n    this.prev = value;\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { pairwise } from '../../operator/pairwise';\n\nObservable.prototype.pairwise = pairwise;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pairwise: typeof pairwise;\n  }\n}","export function not(pred: Function, thisArg: any): Function {\n  function notPred(): any {\n    return !((<any> notPred).pred.apply((<any> notPred).thisArg, arguments));\n  }\n  (<any> notPred).pred = pred;\n  (<any> notPred).thisArg = thisArg;\n  return notPred;\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(this: Observable<T>,\n                                       predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): Observable<S>;\nexport function filter<T>(this: Observable<T>,\n                          predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): Observable<T> {\n  return this.lift(new FilterOperator(predicate, thisArg));\n}\n\nclass FilterOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean,\n              private thisArg?: any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FilterSubscriber<T> extends Subscriber<T> {\n\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean,\n              private thisArg: any) {\n    super(destination);\n  }\n\n  // the try catch block below is left specifically for\n  // optimization and perf reasons. a tryCatcher is not necessary here.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.destination.next(value);\n    }\n  }\n}\n","import { not } from '../util/not';\nimport { filter } from './filter';\nimport { Observable } from '../Observable';\n\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nexport function partition<T>(this: Observable<T>, predicate: (value: T) => boolean, thisArg?: any): [Observable<T>, Observable<T>] {\n  return [\n    filter.call(this, predicate, thisArg),\n    filter.call(this, not(predicate, thisArg))\n  ];\n}\n","\nimport { Observable } from '../../Observable';\nimport { partition } from '../../operator/partition';\n\nObservable.prototype.partition = partition;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    partition: typeof partition;\n  }\n}","import { Observable } from '../Observable';\nimport { map } from './map';\n\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nexport function pluck<T, R>(this: Observable<T>, ...properties: string[]): Observable<R> {\n  const length = properties.length;\n  if (length === 0) {\n    throw new Error('list of properties cannot be empty.');\n  }\n  return map.call(this, plucker(properties, length));\n}\n\nfunction plucker(props: string[], length: number): (x: string) => any {\n  const mapper = (x: string) => {\n    let currentProp = x;\n    for (let i = 0; i < length; i++) {\n      const p = currentProp[props[i]];\n      if (typeof p !== 'undefined') {\n        currentProp = p;\n      } else {\n        return undefined;\n      }\n    }\n    return currentProp;\n  };\n\n  return mapper;\n}\n","\nimport { Observable } from '../../Observable';\nimport { pluck } from '../../operator/pluck';\n\nObservable.prototype.pluck = pluck;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pluck: typeof pluck;\n  }\n}","import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/* tslint:disable:max-line-length */\nexport function publish<T>(this: Observable<T>): ConnectableObservable<T>;\nexport function publish<T>(this: Observable<T>, selector: selector<T>): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nexport function publish<T>(this: Observable<T>, selector?: (source: Observable<T>) => Observable<T>): Observable<T> | ConnectableObservable<T> {\n  return selector ? multicast.call(this, () => new Subject<T>(), selector) :\n                    multicast.call(this, new Subject<T>());\n}\n\nexport type selector<T> = (source: Observable<T>) => Observable<T>;\n","\nimport { Observable } from '../../Observable';\nimport { publish } from '../../operator/publish';\n\nObservable.prototype.publish = <any>publish;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publish: typeof publish;\n  }\n}","import { Observable } from '../Observable';\nimport { BehaviorSubject } from '../BehaviorSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nexport function publishBehavior<T>(this: Observable<T>, value: T): ConnectableObservable<T> {\n  return multicast.call(this, new BehaviorSubject<T>(value));\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishBehavior } from '../../operator/publishBehavior';\n\nObservable.prototype.publishBehavior = publishBehavior;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishBehavior: typeof publishBehavior;\n  }\n}","import { Observable } from '../Observable';\nimport { ReplaySubject } from '../ReplaySubject';\nimport { IScheduler } from '../Scheduler';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/**\n * @param bufferSize\n * @param windowTime\n * @param scheduler\n * @return {ConnectableObservable<T>}\n * @method publishReplay\n * @owner Observable\n */\nexport function publishReplay<T>(this: Observable<T>, bufferSize: number = Number.POSITIVE_INFINITY,\n                                 windowTime: number = Number.POSITIVE_INFINITY,\n                                 scheduler?: IScheduler): ConnectableObservable<T> {\n  return multicast.call(this, new ReplaySubject<T>(bufferSize, windowTime, scheduler));\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishReplay } from '../../operator/publishReplay';\n\nObservable.prototype.publishReplay = publishReplay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishReplay: typeof publishReplay;\n  }\n}","import { Observable } from '../Observable';\nimport { AsyncSubject } from '../AsyncSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/**\n * @return {ConnectableObservable<T>}\n * @method publishLast\n * @owner Observable\n */\nexport function publishLast<T>(this: Observable<T>): ConnectableObservable<T> {\n  return multicast.call(this, new AsyncSubject<T>());\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishLast } from '../../operator/publishLast';\n\nObservable.prototype.publishLast = publishLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishLast: typeof publishLast;\n  }\n}","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function race<T>(this: Observable<T>, observables: Array<Observable<T>>): Observable<T>;\nexport function race<T, R>(this: Observable<T>, observables: Array<Observable<T>>): Observable<R>;\nexport function race<T>(this: Observable<T>, ...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function race<T, R>(this: Observable<T>, ...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nexport function race<T>(this: Observable<T>, ...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `pair([obs1, obs2, ...])`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <Array<Observable<T>>>observables[0];\n  }\n\n  return this.lift.call(raceStatic<T>(this, ...observables));\n}\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function raceStatic<T>(observables: Array<Observable<T>>): Observable<T>;\nexport function raceStatic<T>(observables: Array<Observable<any>>): Observable<T>;\nexport function raceStatic<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function raceStatic<T>(...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `race([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = <Array<Observable<any>>>observables[0];\n    } else {\n      return <Observable<any>>observables[0];\n    }\n  }\n\n  return new ArrayObservable<T>(<any>observables).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (let i = 0; i < len && !this.hasFirst; i++) {\n        let observable = observables[i];\n        let subscription = subscribeToResult(this, observable, observable, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n        }\n        this.add(subscription);\n      }\n      this.observables = null;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { race } from '../../operator/race';\n\nObservable.prototype.race = race;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    race: typeof race;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\n\n/* tslint:disable:max-line-length */\nexport function reduce<T>(this: Observable<T>, accumulator: (acc: T, value: T, index: number) => T, seed?: T): Observable<T>;\nexport function reduce<T>(this: Observable<T>, accumulator: (acc: T[], value: T, index: number) => T[], seed: T[]): Observable<T[]>;\nexport function reduce<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed: R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nexport function reduce<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index?: number) => R, seed?: R): Observable<R> {\n  let hasSeed = false;\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n\n  return this.lift(new ReduceOperator(accumulator, seed, hasSeed));\n}\n\nexport class ReduceOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T, index?: number) => R, private seed?: R, private hasSeed: boolean = false) {}\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ReduceSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ReduceSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private acc: T | R;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private accumulator: (acc: R, value: T, index?: number) => R,\n              seed: R,\n              private hasSeed: boolean) {\n    super(destination);\n    this.acc = seed;\n\n    if (!this.hasSeed) {\n      this.index++;\n    }\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue || (this.hasValue = this.hasSeed)) {\n      this._tryReduce(value);\n    } else {\n      this.acc = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryReduce(value: T) {\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.acc, value, this.index++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.acc = result;\n  }\n\n  protected _complete() {\n    if (this.hasValue || this.hasSeed) {\n      this.destination.next(this.acc);\n    }\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { reduce } from '../../operator/reduce';\n\nObservable.prototype.reduce = reduce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    reduce: typeof reduce;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(this: Observable<T>, count: number = -1): Observable<T> {\n  if (count === 0) {\n    return new EmptyObservable<T>();\n  } else if (count < 0) {\n    return this.lift(new RepeatOperator(-1, this));\n  } else {\n    return this.lift(new RepeatOperator(count - 1, this));\n  }\n}\n\nclass RepeatOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  complete() {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.complete();\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { repeat } from '../../operator/repeat';\n\nObservable.prototype.repeat = repeat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeat: typeof repeat;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(this: Observable<T>, notifier: (notifications: Observable<any>) => Observable<any>): Observable<T> {\n  return this.lift(new RepeatWhenOperator(notifier));\n}\n\nclass RepeatWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (notifications: Observable<any>) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private notifications: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n  private sourceIsBeingSubscribedTo: boolean = true;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (notifications: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.sourceIsBeingSubscribedTo = true;\n    this.source.subscribe(this);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    if (this.sourceIsBeingSubscribedTo === false) {\n      return super.complete();\n    }\n  }\n\n  complete() {\n    this.sourceIsBeingSubscribedTo = false;\n\n    if (!this.isStopped) {\n      if (!this.retries) {\n        this.subscribeToRetries();\n      } else if (this.retriesSubscription.closed) {\n        return super.complete();\n      }\n\n      this._unsubscribeAndRecycle();\n      this.notifications.next();\n    }\n  }\n\n  protected _unsubscribe() {\n    const { notifications, retriesSubscription } = this;\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { notifications, retries, retriesSubscription } = this;\n    this.notifications = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n    super._unsubscribeAndRecycle();\n    this.notifications = notifications;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n    return this;\n  }\n\n  private subscribeToRetries() {\n    this.notifications = new Subject();\n    const retries = tryCatch(this.notifier)(this.notifications);\n    if (retries === errorObject) {\n      return super.complete();\n    }\n    this.retries = retries;\n    this.retriesSubscription = subscribeToResult(this, retries);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { repeatWhen } from '../../operator/repeatWhen';\n\nObservable.prototype.repeatWhen = repeatWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeatWhen: typeof repeatWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(this: Observable<T>, count: number = -1): Observable<T> {\n  return this.lift(new RetryOperator(count, this));\n}\n\nclass RetryOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetrySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  error(err: any) {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.error(err);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { retry } from '../../operator/retry';\n\nObservable.prototype.retry = retry;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retry: typeof retry;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(this: Observable<T>, notifier: (errors: Observable<any>) => Observable<any>): Observable<T> {\n  return this.lift(new RetryWhenOperator(notifier, this));\n}\n\nclass RetryWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (errors: Observable<any>) => Observable<any>,\n              protected source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetryWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private errors: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (errors: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  error(err: any) {\n    if (!this.isStopped) {\n\n      let errors = this.errors;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n        retries = tryCatch(this.notifier)(errors);\n        if (retries === errorObject) {\n          return super.error(errorObject.e);\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      errors.next(err);\n    }\n  }\n\n  protected _unsubscribe() {\n    const { errors, retriesSubscription } = this;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { errors, retries, retriesSubscription } = this;\n    this.errors = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this._unsubscribeAndRecycle();\n\n    this.errors = errors;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n\n    this.source.subscribe(this);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { retryWhen } from '../../operator/retryWhen';\n\nObservable.prototype.retryWhen = retryWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retryWhen: typeof retryWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return this.lift(new SampleOperator(notifier));\n}\n\nclass SampleOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    const sampleSubscriber = new SampleSubscriber(subscriber);\n    const subscription = source.subscribe(sampleSubscriber);\n    subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n\n  protected _next(value: T) {\n    this.value = value;\n    this.hasValue = true;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.value);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { sample } from '../../operator/sample';\n\nObservable.prototype.sample = sample;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sample: typeof sample;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(this: Observable<T>, period: number, scheduler: IScheduler = async): Observable<T> {\n  return this.lift(new SampleTimeOperator(period, scheduler));\n}\n\nclass SampleTimeOperator<T> implements Operator<T, T> {\n  constructor(private period: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleTimeSubscriber<T> extends Subscriber<T> {\n  lastValue: T;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private period: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period }));\n  }\n\n  protected _next(value: T) {\n    this.lastValue = value;\n    this.hasValue = true;\n  }\n\n  notifyNext() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.lastValue);\n    }\n  }\n}\n\nfunction dispatchNotification<T>(this: Action<any>, state: any) {\n  let { subscriber, period } = state;\n  subscriber.notifyNext();\n  this.schedule(state, period);\n}\n","\nimport { Observable } from '../../Observable';\nimport { sampleTime } from '../../operator/sampleTime';\n\nObservable.prototype.sampleTime = sampleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sampleTime: typeof sampleTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/* tslint:disable:max-line-length */\nexport function scan<T>(this: Observable<T>, accumulator: (acc: T, value: T, index: number) => T, seed?: T): Observable<T>;\nexport function scan<T>(this: Observable<T>, accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): Observable<T[]>;\nexport function scan<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed?: R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): Observable<R> {\n  let hasSeed = false;\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n\n  return this.lift(new ScanOperator(accumulator, seed, hasSeed));\n}\n\nclass ScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T, index: number) => R, private seed?: T | R, private hasSeed: boolean = false) {}\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ScanSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n\n  get seed(): T | R {\n    return this._seed;\n  }\n\n  set seed(value: T | R) {\n    this.hasSeed = true;\n    this._seed = value;\n  }\n\n  constructor(destination: Subscriber<R>, private accumulator: (acc: R, value: T, index: number) => R, private _seed: T | R,\n              private hasSeed: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSeed) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  }\n\n  private _tryNext(value: T): void {\n    const index = this.index++;\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n    this.seed = result;\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\n\nimport { scan } from '../../operator/scan';\n\nObservable.prototype.scan = scan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    scan: typeof scan;\n  }\n}","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(this: Observable<T>, compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): Observable<boolean> {\n  return this.lift(new SequenceEqualOperator(compareTo, comparor));\n}\n\nexport class SequenceEqualOperator<T> implements Operator<T, boolean> {\n  constructor(private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n  }\n\n  call(subscriber: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SequenceEqualSubscriber<T, R> extends Subscriber<T> {\n  private _a: T[] = [];\n  private _b: T[] = [];\n  private _oneComplete = false;\n\n  constructor(destination: Observer<R>,\n              private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n    super(destination);\n    this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n  }\n\n  protected _next(value: T): void {\n    if (this._oneComplete && this._b.length === 0) {\n      this.emit(false);\n    } else {\n      this._a.push(value);\n      this.checkValues();\n    }\n  }\n\n  public _complete(): void {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n  }\n\n  checkValues() {\n    const { _a, _b, comparor } = this;\n    while (_a.length > 0 && _b.length > 0) {\n      let a = _a.shift();\n      let b = _b.shift();\n      let areEqual = false;\n      if (comparor) {\n        areEqual = tryCatch(comparor)(a, b);\n        if (areEqual === errorObject) {\n          this.destination.error(errorObject.e);\n        }\n      } else {\n        areEqual = a === b;\n      }\n      if (!areEqual) {\n        this.emit(false);\n      }\n    }\n  }\n\n  emit(value: boolean) {\n    const { destination } = this;\n    destination.next(value);\n    destination.complete();\n  }\n\n  nextB(value: T) {\n    if (this._oneComplete && this._a.length === 0) {\n      this.emit(false);\n    } else {\n      this._b.push(value);\n      this.checkValues();\n    }\n  }\n}\n\nclass SequenceEqualCompareToSubscriber<T, R> extends Subscriber<T> {\n  constructor(destination: Observer<R>, private parent: SequenceEqualSubscriber<T, R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.parent.nextB(value);\n  }\n\n  protected _error(err: any): void {\n    this.parent.error(err);\n  }\n\n  protected _complete(): void {\n    this.parent._complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { sequenceEqual } from '../../operator/sequenceEqual';\n\nObservable.prototype.sequenceEqual = sequenceEqual;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sequenceEqual: typeof sequenceEqual;\n  }\n}","import { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { Subject } from '../Subject';\n\nfunction shareSubjectFactory() {\n  return new Subject();\n}\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .publish().refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport function share<T>(this: Observable<T>): Observable<T> {\n  return multicast.call(this, shareSubjectFactory).refCount();\n};\n","\nimport { Observable } from '../../Observable';\nimport { share } from '../../operator/share';\n\nObservable.prototype.share = share;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    share: typeof share;\n  }\n}","import { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable, connectableObservableDescriptor } from '../observable/ConnectableObservable';\n\n/* tslint:disable:max-line-length */\nexport function multicast<T>(this: Observable<T>, subjectOrSubjectFactory: factoryOrValue<Subject<T>>): ConnectableObservable<T>;\nexport function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: selector<T>): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T>(this: Observable<T>, subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                             selector?: (source: Observable<T>) => Observable<T>): Observable<T> | ConnectableObservable<T> {\n  let subjectFactory: () => Subject<T>;\n  if (typeof subjectOrSubjectFactory === 'function') {\n    subjectFactory = <() => Subject<T>>subjectOrSubjectFactory;\n  } else {\n    subjectFactory = function subjectFactory() {\n      return <Subject<T>>subjectOrSubjectFactory;\n    };\n  }\n\n  if (typeof selector === 'function') {\n    return this.lift(new MulticastOperator(subjectFactory, selector));\n  }\n\n  const connectable: any = Object.create(this, connectableObservableDescriptor);\n  connectable.source = this;\n  connectable.subjectFactory = subjectFactory;\n\n  return <ConnectableObservable<T>> connectable;\n}\n\nexport type factoryOrValue<T> = T | (() => T);\nexport type selector<T> = (source: Observable<T>) => Observable<T>;\n\nexport class MulticastOperator<T> implements Operator<T, T> {\n  constructor(private subjectFactory: () => Subject<T>,\n              private selector: (source: Observable<T>) => Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): any {\n    const { selector } = this;\n    const subject = this.subjectFactory();\n    const subscription = selector(subject).subscribe(subscriber);\n    subscription.add(source.subscribe(subject));\n    return subscription;\n  }\n}\n","import { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { ReplaySubject } from '../ReplaySubject';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { IScheduler } from '../Scheduler';\n\n/**\n * @method shareReplay\n * @owner Observable\n */\nexport function shareReplay<T>(\n  this: Observable<T>,\n  bufferSize?: number,\n  windowTime?: number,\n  scheduler?: IScheduler\n): Observable<T> {\n  let subject: ReplaySubject<T>;\n  const connectable = multicast.call(this, function shareReplaySubjectFactory(this: ConnectableObservable<T>) {\n    if (this._isComplete) {\n      return subject;\n    } else {\n      return (subject = new ReplaySubject<T>(bufferSize, windowTime, scheduler));\n    }\n  });\n  return connectable.refCount();\n};","\nimport { Observable } from '../../Observable';\nimport { shareReplay } from '../../operator/shareReplay';\n\nObservable.prototype.shareReplay = shareReplay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    shareReplay: typeof shareReplay;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observer } from '../Observer';\nimport { EmptyError } from '../util/EmptyError';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T> {\n  return this.lift(new SingleOperator(predicate, this));\n}\n\nclass SingleOperator<T> implements Operator<T, T> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SingleSubscriber<T> extends Subscriber<T> {\n  private seenValue: boolean = false;\n  private singleValue: T;\n  private index: number = 0;\n\n  constructor(destination: Observer<T>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  private applySingleValue(value: T): void {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n\n    if (this.predicate) {\n      this.tryNext(value, index);\n    } else {\n      this.applySingleValue(value);\n    }\n  }\n\n  private tryNext(value: T, index: number): void {\n    try {\n      if (this.predicate(value, index, this.source)) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { single } from '../../operator/single';\n\nObservable.prototype.single = single;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    single: typeof single;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(this: Observable<T>, count: number): Observable<T> {\n  return this.lift(new SkipOperator(count));\n}\n\nclass SkipOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipSubscriber<T> extends Subscriber<T> {\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (++this.count > this.total) {\n      this.destination.next(x);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { skip } from '../../operator/skip';\n\nObservable.prototype.skip = skip;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skip: typeof skip;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nexport function skipLast<T>(this: Observable<T>, count: number): Observable<T> {\n  return this.lift(new SkipLastOperator(count));\n}\n\nclass SkipLastOperator<T> implements Operator<T, T> {\n  constructor(private _skipCount: number) {\n    if (this._skipCount < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    if (this._skipCount === 0) {\n      // If we don't want to skip any values then just subscribe\n      // to Subscriber without any further logic.\n      return source.subscribe(new Subscriber(subscriber));\n    } else {\n      return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipLastSubscriber<T> extends Subscriber<T> {\n  private _ring: T[];\n  private _count: number = 0;\n\n  constructor(destination: Subscriber<T>, private _skipCount: number) {\n    super(destination);\n    this._ring = new Array<T>(_skipCount);\n  }\n\n  protected _next(value: T): void {\n    const skipCount = this._skipCount;\n    const count = this._count++;\n\n    if (count < skipCount) {\n      this._ring[count] = value;\n    } else {\n      const currentIndex = count % skipCount;\n      const ring = this._ring;\n      const oldValue = ring[currentIndex];\n\n      ring[currentIndex] = value;\n      this.destination.next(oldValue);\n    }\n  }\n}","import { Observable } from '../../Observable';\nimport { skipLast } from '../../operator/skipLast';\n\nObservable.prototype.skipLast = skipLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipLast: typeof skipLast;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return this.lift(new SkipUntilOperator(notifier));\n}\n\nclass SkipUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private hasValue: boolean = false;\n  private isInnerStopped: boolean = false;\n\n  constructor(destination: Subscriber<any>,\n              notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue) {\n      super._next(value);\n    }\n  }\n\n  protected _complete() {\n    if (this.isInnerStopped) {\n      super._complete();\n    } else {\n      this.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.hasValue = true;\n  }\n\n  notifyComplete(): void {\n    this.isInnerStopped = true;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { skipUntil } from '../../operator/skipUntil';\n\nObservable.prototype.skipUntil = skipUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipUntil: typeof skipUntil;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean): Observable<T> {\n  return this.lift(new SkipWhileOperator(predicate));\n}\n\nclass SkipWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipWhileSubscriber<T> extends Subscriber<T> {\n  private skipping: boolean = true;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    if (this.skipping) {\n      this.tryCallPredicate(value);\n    }\n\n    if (!this.skipping) {\n      destination.next(value);\n    }\n  }\n\n  private tryCallPredicate(value: T): void {\n    try {\n      const result = this.predicate(value, this.index++);\n      this.skipping = Boolean(result);\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { skipWhile } from '../../operator/skipWhile';\n\nObservable.prototype.skipWhile = skipWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipWhile: typeof skipWhile;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { Subscribable } from '../Observable';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nexport function mergeAll<T>(this: Observable<T>, concurrent?: number): T;\nexport function mergeAll<T, R>(this: Observable<T>, concurrent?: number): Subscribable<R>;\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(this: Observable<T>, concurrent: number = Number.POSITIVE_INFINITY): T {\n  return <any>this.lift<any>(new MergeAllOperator<T>(concurrent));\n}\n\nexport class MergeAllOperator<T> implements Operator<Observable<T>, T> {\n  constructor(private concurrent: number) {\n  }\n\n  call(observer: Observer<T>, source: any): any {\n    return source.subscribe(new MergeAllSubscriber(observer, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeAllSubscriber<T> extends OuterSubscriber<Observable<T>, T> {\n  private hasCompleted: boolean = false;\n  private buffer: Observable<T>[] = [];\n  private active: number = 0;\n\n  constructor(destination: Observer<T>, private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(observable: Observable<T>) {\n    if (this.active < this.concurrent) {\n      this.active++;\n      this.add(subscribeToResult<Observable<T>, T>(this, observable));\n    } else {\n      this.buffer.push(observable);\n    }\n  }\n\n  protected _complete() {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { isScheduler } from '../util/isScheduler';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { MergeAllOperator } from './mergeAll';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(this: Observable<T>, scheduler?: IScheduler): Observable<T>;\nexport function concat<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function concat<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(this: Observable<T>, ...observables: Array<ObservableInput<T> | IScheduler>): Observable<T>;\nexport function concat<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nexport function concat<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler>): Observable<R> {\n  return this.lift.call(concatStatic<T, R>(this, ...observables));\n}\n\n/* tslint:disable:max-line-length */\nexport function concatStatic<T>(v1: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function concatStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function concatStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function concatStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function concatStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concatStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concatStatic<T>(...observables: (ObservableInput<T> | IScheduler)[]): Observable<T>;\nexport function concatStatic<T, R>(...observables: (ObservableInput<any> | IScheduler)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>Concatenate an array of 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>Concatenate the same Observable to repeat it</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nexport function concatStatic<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): Observable<R> {\n  let scheduler: IScheduler = null;\n  let args = <any[]>observables;\n  if (isScheduler(args[observables.length - 1])) {\n    scheduler = args.pop();\n  }\n\n  if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n    return <Observable<R>>observables[0];\n  }\n\n  return new ArrayObservable(observables, scheduler).lift(new MergeAllOperator<R>(1));\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { ScalarObservable } from '../observable/ScalarObservable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { concatStatic } from './concat';\nimport { isScheduler } from '../util/isScheduler';\n\n/* tslint:disable:max-line-length */\nexport function startWith<T>(this: Observable<T>, v1: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, v5: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, v5: T, v6: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, ...array: Array<T | IScheduler>): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nexport function startWith<T>(this: Observable<T>, ...array: Array<T | IScheduler>): Observable<T> {\n  let scheduler = <IScheduler>array[array.length - 1];\n  if (isScheduler(scheduler)) {\n    array.pop();\n  } else {\n    scheduler = null;\n  }\n\n  const len = array.length;\n  if (len === 1) {\n    return concatStatic(new ScalarObservable<T>(<T>array[0], scheduler), <Observable<T>>this);\n  } else if (len > 1) {\n    return concatStatic(new ArrayObservable<T>(<T[]>array, scheduler), <Observable<T>>this);\n  } else {\n    return concatStatic(new EmptyObservable<T>(scheduler), <Observable<T>>this);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { startWith } from '../../operator/startWith';\n\nObservable.prototype.startWith = startWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    startWith: typeof startWith;\n  }\n}","import { Action } from '../scheduler/Action';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { asap } from '../scheduler/asap';\nimport { isNumeric } from '../util/isNumeric';\n\nexport interface DispatchArg<T> {\n  source: Observable<T>;\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class SubscribeOnObservable<T> extends Observable<T> {\n  static create<T>(source: Observable<T>, delay: number = 0, scheduler: IScheduler = asap): Observable<T> {\n    return new SubscribeOnObservable(source, delay, scheduler);\n  }\n\n  static dispatch<T>(this: Action<T>, arg: DispatchArg<T>): Subscription {\n    const { source, subscriber } = arg;\n    return this.add(source.subscribe(subscriber));\n  }\n\n  constructor(public source: Observable<T>,\n              private delayTime: number = 0,\n              private scheduler: IScheduler = asap) {\n    super();\n    if (!isNumeric(delayTime) || delayTime < 0) {\n      this.delayTime = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = asap;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const delay = this.delayTime;\n    const source = this.source;\n    const scheduler = this.scheduler;\n\n    return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {\n      source, subscriber\n    });\n  }\n}\n","import { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { SubscribeOnObservable } from '../observable/SubscribeOnObservable';\n\n/**\n * Asynchronously subscribes Observers to this Observable on the specified IScheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} scheduler - The IScheduler to perform subscription actions on.\n * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified IScheduler.\n .\n * @method subscribeOn\n * @owner Observable\n */\nexport function subscribeOn<T>(this: Observable<T>, scheduler: IScheduler, delay: number = 0): Observable<T> {\n  return this.lift(new SubscribeOnOperator<T>(scheduler, delay));\n}\n\nclass SubscribeOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler,\n              private delay: number) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return new SubscribeOnObservable(\n      source, this.delay, this.scheduler\n    ).subscribe(subscriber);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { subscribeOn } from '../../operator/subscribeOn';\n\nObservable.prototype.subscribeOn = subscribeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    subscribeOn: typeof subscribeOn;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * subscribing to only the most recently emitted of those inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * previous inner Observable once a new one appears.</span>\n *\n * <img src=\"./img/switch.png\" width=\"100%\">\n *\n * `switch` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable subscribes to the inner Observable and\n * begins emitting the items emitted by that. So far, it behaves\n * like {@link mergeAll}. However, when a new inner Observable is emitted,\n * `switch` unsubscribes from the earlier-emitted inner Observable and\n * subscribes to the new inner Observable and begins emitting items from it. It\n * continues to behave like this for subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * // Each click event is mapped to an Observable that ticks every second\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var switched = higherOrder.switch();\n * // The outcome is that `switched` is essentially a timer that restarts\n * // on every click. The interval Observables from older clicks do not merge\n * // with the current interval Observable.\n * switched.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switchMap}\n * @see {@link switchMapTo}\n * @see {@link zipAll}\n *\n * @return {Observable<T>} An Observable that emits the items emitted by the\n * Observable most recently emitted by the source Observable.\n * @method switch\n * @name switch\n * @owner Observable\n */\nexport function _switch<T>(this: Observable<T>): T {\n  return <any>this.lift<any>(new SwitchOperator());\n}\n\nclass SwitchOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new SwitchSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.unsubscribeInner();\n    this.active++;\n    this.add(this.innerSubscription = subscribeToResult(this, value));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  private unsubscribeInner(): void {\n    this.active = this.active > 0 ? this.active - 1 : 0;\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n      this.remove(innerSubscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(): void {\n    this.unsubscribeInner();\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _switch } from '../../operator/switch';\n\nObservable.prototype.switch = _switch;\nObservable.prototype._switch = _switch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switch: typeof _switch;\n    _switch: typeof _switch;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\nexport function switchMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<I | R> {\n  return this.lift(new SwitchMapOperator(project, resultSelector));\n}\n\nclass SwitchMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(result: ObservableInput<I>, value: T, index: number) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _tryNotifyNext(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): void {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { switchMap } from '../../operator/switchMap';\n\nObservable.prototype.switchMap = switchMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMap: typeof switchMap;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function switchMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>): Observable<R>;\nexport function switchMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T,\n                                                       innerValue: I,\n                                                       outerIndex: number,\n                                                       innerIndex: number) => R): Observable<I | R> {\n  return this.lift(new SwitchMapToOperator(innerObservable, resultSelector));\n}\n\nclass SwitchMapToOperator<T, I, R> implements Operator<T, I> {\n  constructor(private observable: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private inner: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: any) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, this.inner, value, this.index++));\n  }\n\n  protected _complete() {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private tryResultSelector(outerValue: T, innerValue: I,\n                            outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { switchMapTo } from '../../operator/switchMapTo';\n\nObservable.prototype.switchMapTo = switchMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMapTo: typeof switchMapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(this: Observable<T>, count: number): Observable<T> {\n  if (count === 0) {\n    return new EmptyObservable<T>();\n  } else {\n    return this.lift(new TakeOperator(count));\n  }\n}\n\nclass TakeOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const total = this.total;\n    const count = ++this.count;\n    if (count <= total) {\n      this.destination.next(value);\n      if (count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { take } from '../../operator/take';\n\nObservable.prototype.take = take;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    take: typeof take;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(this: Observable<T>, count: number): Observable<T> {\n  if (count === 0) {\n    return new EmptyObservable<T>();\n  } else {\n    return this.lift(new TakeLastOperator(count));\n  }\n}\n\nclass TakeLastOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeLastSubscriber<T> extends Subscriber<T> {\n  private ring: Array<T> = new Array();\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    let count = this.count;\n\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring  = this.ring;\n\n      for (let i = 0; i < total; i++) {\n        const idx = (count++) % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  }\n}\n","import { Observable } from '../../Observable';\nimport { takeLast } from '../../operator/takeLast';\n\nObservable.prototype.takeLast = takeLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeLast: typeof takeLast;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return this.lift(new TakeUntilOperator(notifier));\n}\n\nclass TakeUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  constructor(destination: Subscriber<any>,\n              private notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.complete();\n  }\n\n  notifyComplete(): void {\n    // noop\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { takeUntil } from '../../operator/takeUntil';\n\nObservable.prototype.takeUntil = takeUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeUntil: typeof takeUntil;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean): Observable<T> {\n  return this.lift(new TakeWhileOperator(predicate));\n}\n\nclass TakeWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeWhileSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    let result: boolean;\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this.nextOrComplete(value, result);\n  }\n\n  private nextOrComplete(value: T, predicateResult: boolean): void {\n    const destination = this.destination;\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { takeWhile } from '../../operator/takeWhile';\n\nObservable.prototype.takeWhile = takeWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeWhile: typeof takeWhile;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { throttle } from '../../operator/throttle';\n\nObservable.prototype.throttle = throttle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttle: typeof throttle;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nexport interface ThrottleConfig {\n  leading?: boolean;\n  trailing?: boolean;\n}\n\nexport const defaultThrottleConfig: ThrottleConfig = {\n  leading: true,\n  trailing: false\n};\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(this: Observable<T>,\n                            durationSelector: (value: T) => SubscribableOrPromise<number>,\n                            config: ThrottleConfig = defaultThrottleConfig): Observable<T> {\n  return this.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing));\n}\n\nclass ThrottleOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private throttled: Subscription;\n  private _trailingValue: T;\n  private _hasTrailingValue = false;\n\n  constructor(protected destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private _leading: boolean,\n              private _trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.throttled) {\n      if (this._trailing) {\n        this._hasTrailingValue = true;\n        this._trailingValue = value;\n      }\n    } else {\n      const duration = this.tryDurationSelector(value);\n      if (duration) {\n        this.add(this.throttled = subscribeToResult(this, duration));\n      }\n      if (this._leading) {\n        this.destination.next(value);\n        if (this._trailing) {\n          this._hasTrailingValue = true;\n          this._trailingValue = value;\n        }\n      }\n    }\n  }\n\n  private tryDurationSelector(value: T): SubscribableOrPromise<any> {\n    try {\n      return this.durationSelector(value);\n    } catch (err) {\n      this.destination.error(err);\n      return null;\n    }\n  }\n\n  protected _unsubscribe() {\n    const { throttled, _trailingValue, _hasTrailingValue, _trailing } = this;\n\n    this._trailingValue = null;\n    this._hasTrailingValue = false;\n\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n  }\n\n  private _sendTrailing() {\n    const { destination, throttled, _trailing, _trailingValue, _hasTrailingValue } = this;\n    if (throttled && _trailing && _hasTrailingValue) {\n      destination.next(_trailingValue);\n      this._trailingValue = null;\n      this._hasTrailingValue = false;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._sendTrailing();\n    this._unsubscribe();\n  }\n\n  notifyComplete(): void {\n    this._sendTrailing();\n    this._unsubscribe();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { ThrottleConfig, defaultThrottleConfig } from './throttle';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(this: Observable<T>,\n                                duration: number,\n                                scheduler: IScheduler = async,\n                                config: ThrottleConfig = defaultThrottleConfig): Observable<T> {\n  return this.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing));\n}\n\nclass ThrottleTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: IScheduler,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleTimeSubscriber<T> extends Subscriber<T> {\n  private throttled: Subscription;\n  private _hasTrailingValue: boolean = false;\n  private _trailingValue: T = null;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: IScheduler,\n              private leading: boolean,\n              private trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    if (this.throttled) {\n      if (this.trailing) {\n        this._trailingValue = value;\n        this._hasTrailingValue = true;\n      }\n    } else {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n      if (this.leading) {\n        this.destination.next(value);\n      }\n    }\n  }\n\n  clearThrottle() {\n    const throttled = this.throttled;\n    if (throttled) {\n      if (this.trailing && this._hasTrailingValue) {\n        this.destination.next(this._trailingValue);\n        this._trailingValue = null;\n        this._hasTrailingValue = false;\n      }\n      throttled.unsubscribe();\n      this.remove(throttled);\n      this.throttled = null;\n    }\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: ThrottleTimeSubscriber<T>;\n}\n\nfunction dispatchNext<T>(arg: DispatchArg<T>) {\n  const { subscriber } = arg;\n  subscriber.clearThrottle();\n}\n","\nimport { Observable } from '../../Observable';\nimport { throttleTime } from '../../operator/throttleTime';\n\nObservable.prototype.throttleTime = throttleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttleTime: typeof throttleTime;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { timeInterval } from '../../operator/timeInterval';\n\nObservable.prototype.timeInterval = timeInterval;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeInterval: typeof timeInterval;\n  }\n}","import { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { TimeoutError } from '../util/TimeoutError';\n\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nexport function timeout<T>(this: Observable<T>,\n                           due: number | Date,\n                           scheduler: IScheduler = async): Observable<T> {\n  const absoluteTimeout = isDate(due);\n  const waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return this.lift(new TimeoutOperator(waitFor, absoluteTimeout, scheduler, new TimeoutError()));\n}\n\nclass TimeoutOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutSubscriber<T>(\n      subscriber, this.absoluteTimeout, this.waitFor, this.scheduler, this.errorInstance\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutSubscriber<T> extends Subscriber<T> {\n\n  private action: Action<TimeoutSubscriber<T>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T>(subscriber: TimeoutSubscriber<T>): void {\n    subscriber.error(subscriber.errorInstance);\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<Action<TimeoutSubscriber<T>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<Action<TimeoutSubscriber<T>>> this.scheduler.schedule(\n        TimeoutSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  protected _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.errorInstance = null;\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeout } from '../../operator/timeout';\n\nObservable.prototype.timeout = timeout;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeout: typeof timeout;\n  }\n}","export function isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(+value);\n}\n","import { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\nimport { Observable, ObservableInput } from '../Observable';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function timeoutWith<T>(this: Observable<T>, due: number | Date, withObservable: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function timeoutWith<T, R>(this: Observable<T>, due: number | Date, withObservable: ObservableInput<R>, scheduler?: IScheduler): Observable<T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param due\n * @param withObservable\n * @param scheduler\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(this: Observable<T>, due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: IScheduler = async): Observable<T | R> {\n  let absoluteTimeout = isDate(due);\n  let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return this.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n}\n\nclass TimeoutWithOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutWithSubscriber(\n      subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutWithSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private action: Action<TimeoutWithSubscriber<T, R>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T, R>(subscriber: TimeoutWithSubscriber<T, R>): void {\n    const { withObservable } = subscriber;\n    (<any> subscriber)._unsubscribeAndRecycle();\n    subscriber.add(subscribeToResult(subscriber, withObservable));\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<Action<TimeoutWithSubscriber<T, R>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<Action<TimeoutWithSubscriber<T, R>>> this.scheduler.schedule(\n        TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  protected _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.withObservable = null;\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeoutWith } from '../../operator/timeoutWith';\n\nObservable.prototype.timeoutWith = timeoutWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeoutWith: typeof timeoutWith;\n  }\n}","import { Observable } from '../../Observable';\r\nimport { timestamp } from '../../operator/timestamp';\r\n\r\nObservable.prototype.timestamp = timestamp;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    timestamp: typeof timestamp;\r\n  }\r\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * @return {Observable<any[]>|WebSocketSubject<T>|Observable<T>}\n * @method toArray\n * @owner Observable\n */\nexport function toArray<T>(this: Observable<T>): Observable<T[]> {\n  return this.lift(new ToArrayOperator());\n}\n\nclass ToArrayOperator<T> implements Operator<T, T[]> {\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new ToArraySubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ToArraySubscriber<T> extends Subscriber<T> {\n\n  private array: T[] = [];\n\n  constructor(destination: Subscriber<T[]>) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    this.array.push(x);\n  }\n\n  protected _complete() {\n    this.destination.next(this.array);\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { toArray } from '../../operator/toArray';\n\nObservable.prototype.toArray = toArray;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    toArray: typeof toArray;\n  }\n}","import { Observable } from '../Observable';\nimport { root } from '../util/root';\n\n/* tslint:disable:max-line-length */\nexport function toPromise<T>(this: Observable<T>): Promise<T>;\nexport function toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Converts an Observable sequence to a ES2015 compliant promise.\n *\n * @example\n * // Using normal ES2015\n * let source = Rx.Observable\n *   .of(42)\n *   .toPromise();\n *\n * source.then((value) => console.log('Value: %s', value));\n * // => Value: 42\n *\n * // Rejected Promise\n * // Using normal ES2015\n * let source = Rx.Observable\n *   .throw(new Error('woops'))\n *   .toPromise();\n *\n * source\n *   .then((value) => console.log('Value: %s', value))\n *   .catch((err) => console.log('Error: %s', err));\n * // => Error: Error: woops\n *\n * // Setting via the config\n * Rx.config.Promise = RSVP.Promise;\n *\n * let source = Rx.Observable\n *   .of(42)\n *   .toPromise();\n *\n * source.then((value) => console.log('Value: %s', value));\n * // => Value: 42\n *\n * // Setting via the method\n * let source = Rx.Observable\n *   .of(42)\n *   .toPromise(RSVP.Promise);\n *\n * source.then((value) => console.log('Value: %s', value));\n * // => Value: 42\n *\n * @param {PromiseConstructor} [PromiseCtor] The constructor of the promise. If not provided,\n * it will look for a constructor first in Rx.config.Promise then fall back to\n * the native Promise constructor if available.\n * @return {Promise<T>} An ES2015 compatible promise with the last value from\n * the observable sequence.\n * @method toPromise\n * @owner Observable\n */\nexport function toPromise<T>(this: Observable<T>, PromiseCtor?: typeof Promise): Promise<T> {\n  if (!PromiseCtor) {\n    if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n      PromiseCtor = root.Rx.config.Promise;\n    } else if (root.Promise) {\n      PromiseCtor = root.Promise;\n    }\n  }\n\n  if (!PromiseCtor) {\n    throw new Error('no Promise impl found');\n  }\n\n  return new PromiseCtor((resolve, reject) => {\n    let value: any;\n    this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n  });\n}\n","\nimport { Observable } from '../../Observable';\nimport { toPromise } from '../../operator/toPromise';\n\nObservable.prototype.toPromise = toPromise;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    toPromise: typeof toPromise;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(this: Observable<T>, windowBoundaries: Observable<any>): Observable<Observable<T>> {\n  return this.lift(new WindowOperator<T>(windowBoundaries));\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowBoundaries: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    const windowSubscriber = new WindowSubscriber(subscriber);\n    const sourceSubscription = source.subscribe(windowSubscriber);\n    if (!sourceSubscription.closed) {\n      windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));\n    }\n    return sourceSubscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n\n  private window: Subject<T> = new Subject<T>();\n\n  constructor(destination: Subscriber<Observable<T>>) {\n    super(destination);\n    destination.next(this.window);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this._complete();\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.window = null;\n  }\n\n  private openWindow(): void  {\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n    const destination = this.destination;\n    const newWindow = this.window = new Subject<T>();\n    destination.next(newWindow);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { window } from '../../operator/window';\n\nObservable.prototype.window = window;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    window: typeof window;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(this: Observable<T>, windowSize: number,\n                               startWindowEvery: number = 0): Observable<Observable<T>> {\n  return this.lift(new WindowCountOperator<T>(windowSize, startWindowEvery));\n}\n\nclass WindowCountOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowSize: number,\n              private startWindowEvery: number) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowCountSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [ new Subject<T>() ];\n  private count: number = 0;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowSize: number,\n              private startWindowEvery: number) {\n    super(destination);\n    destination.next(this.windows[0]);\n  }\n\n  protected _next(value: T) {\n    const startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n    const destination = this.destination;\n    const windowSize = this.windowSize;\n    const windows = this.windows;\n    const len = windows.length;\n\n    for (let i = 0; i < len && !this.closed; i++) {\n      windows[i].next(value);\n    }\n    const c = this.count - windowSize + 1;\n    if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n      windows.shift().complete();\n    }\n    if (++this.count % startWindowEvery === 0 && !this.closed) {\n      const window = new Subject<T>();\n      windows.push(window);\n      destination.next(window);\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().error(err);\n      }\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.count = 0;\n    this.windows = null;\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowCount } from '../../operator/windowCount';\n\nObservable.prototype.windowCount = windowCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowCount: typeof windowCount;\n  }\n}","import { isArray } from '../util/isArray';\n\nexport function isNumeric(val: any): val is number {\n  // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n  // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n  // subtraction forces infinities to NaN\n  // adding 1 corrects loss of precision from parseFloat (#15100)\n  return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n};\n","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes. If `maxWindowCount` is provided, each window\n * will emit at most fixed number of values. Window will complete immediately\n * after emitting last value and next one still will open as specified by\n * `windowTimeSpan` and `windowCreationInterval` arguments.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Same as example above but with maxWindowCount instead of take</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000, 2) // each window has still at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {number} [maxWindowSize=Number.POSITIVE_INFINITY] Max number of\n * values each window can emit before completion.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(this: Observable<T>, windowTimeSpan: number,\n                              scheduler?: IScheduler): Observable<Observable<T>>;\nexport function windowTime<T>(this: Observable<T>, windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              scheduler?: IScheduler): Observable<Observable<T>>;\nexport function windowTime<T>(this: Observable<T>, windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              maxWindowSize: number,\n                              scheduler?: IScheduler): Observable<Observable<T>>;\n\nexport function windowTime<T>(this: Observable<T>,\n                              windowTimeSpan: number): Observable<Observable<T>> {\n\n  let scheduler: IScheduler = async;\n  let windowCreationInterval: number = null;\n  let maxWindowSize: number = Number.POSITIVE_INFINITY;\n\n  if (isScheduler(arguments[3])) {\n    scheduler = arguments[3];\n  }\n\n  if (isScheduler(arguments[2])) {\n    scheduler = arguments[2];\n  } else if (isNumeric(arguments[2])) {\n    maxWindowSize = arguments[2];\n  }\n\n  if (isScheduler(arguments[1])) {\n    scheduler = arguments[1];\n  } else if (isNumeric(arguments[1])) {\n    windowCreationInterval = arguments[1];\n  }\n\n  return this.lift(new WindowTimeOperator<T>(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));\n}\n\nclass WindowTimeOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowTimeSubscriber(\n      subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler\n    ));\n  }\n}\n\ninterface CreationState<T> {\n  windowTimeSpan: number;\n  windowCreationInterval: number;\n  subscriber: WindowTimeSubscriber<T>;\n  scheduler: IScheduler;\n}\n\ninterface TimeSpanOnlyState<T> {\n    window: CountedSubject<T>;\n    windowTimeSpan: number;\n    subscriber: WindowTimeSubscriber<T>;\n  }\n\ninterface CloseWindowContext<T> {\n  action: Action<CreationState<T>>;\n  subscription: Subscription;\n}\n\ninterface CloseState<T> {\n  subscriber: WindowTimeSubscriber<T>;\n  window: CountedSubject<T>;\n  context: CloseWindowContext<T>;\n}\n\nclass CountedSubject<T> extends Subject<T> {\n  private _numberOfNextedValues: number = 0;\n\n  next(value?: T): void {\n    this._numberOfNextedValues++;\n    super.next(value);\n  }\n\n  get numberOfNextedValues(): number {\n    return this._numberOfNextedValues;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowTimeSubscriber<T> extends Subscriber<T> {\n  private windows: CountedSubject<T>[] = [];\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n\n    const window = this.openWindow();\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      const closeState: CloseState<T> = { subscriber: this, window, context: <any>null };\n      const creationState: CreationState<T> = { windowTimeSpan, windowCreationInterval, subscriber: this, scheduler };\n      this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n    } else {\n      const timeSpanOnlyState: TimeSpanOnlyState<T> = { subscriber: this, window, windowTimeSpan };\n      this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  protected _next(value: T): void {\n    const windows = this.windows;\n    const len = windows.length;\n    for (let i = 0; i < len; i++) {\n      const window = windows[i];\n      if (!window.closed) {\n        window.next(value);\n        if (window.numberOfNextedValues >= this.maxWindowSize) {\n          this.closeWindow(window);\n        }\n      }\n    }\n  }\n\n  protected _error(err: any): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      windows.shift().error(err);\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      const window = windows.shift();\n      if (!window.closed) {\n        window.complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  public openWindow(): CountedSubject<T> {\n    const window = new CountedSubject<T>();\n    this.windows.push(window);\n    const destination = this.destination;\n    destination.next(window);\n    return window;\n  }\n\n  public closeWindow(window: CountedSubject<T>): void {\n    window.complete();\n    const windows = this.windows;\n    windows.splice(windows.indexOf(window), 1);\n  }\n}\n\nfunction dispatchWindowTimeSpanOnly<T>(this: Action<TimeSpanOnlyState<T>>, state: TimeSpanOnlyState<T>): void {\n  const { subscriber, windowTimeSpan, window } = state;\n  if (window) {\n    subscriber.closeWindow(window);\n  }\n  state.window = subscriber.openWindow();\n  this.schedule(state, windowTimeSpan);\n}\n\nfunction dispatchWindowCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>): void {\n  const { windowTimeSpan, subscriber, scheduler, windowCreationInterval } = state;\n  const window = subscriber.openWindow();\n  const action = this;\n  let context: CloseWindowContext<T> = { action, subscription: <any>null };\n  const timeSpanState: CloseState<T> = { subscriber, window, context };\n  context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n  action.add(context.subscription);\n  action.schedule(state, windowCreationInterval);\n}\n\nfunction dispatchWindowClose<T>(state: CloseState<T>): void {\n  const { subscriber, window, context } = state;\n  if (context && context.action && context.subscription) {\n    context.action.remove(context.subscription);\n  }\n  subscriber.closeWindow(window);\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowTime } from '../../operator/windowTime';\n\nObservable.prototype.windowTime = windowTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowTime: typeof windowTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(this: Observable<T>, openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): Observable<Observable<T>> {\n  return this.lift(new WindowToggleOperator<T, O>(openings, closingSelector));\n}\n\nclass WindowToggleOperator<T, O> implements Operator<T, Observable<T>> {\n\n  constructor(private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowToggleSubscriber(\n      subscriber, this.openings, this.closingSelector\n    ));\n  }\n}\n\ninterface WindowContext<T> {\n  window: Subject<T>;\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowToggleSubscriber<T, O> extends OuterSubscriber<T, any> {\n  private contexts: WindowContext<T>[] = [];\n  private openSubscription: Subscription;\n\n  constructor(destination: Subscriber<Observable<T>>,\n              private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n    super(destination);\n    this.add(this.openSubscription = subscribeToResult(this, openings, openings));\n  }\n\n  protected _next(value: T) {\n    const { contexts } = this;\n    if (contexts) {\n      const len = contexts.length;\n      for (let i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n\n    const { contexts } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.error(err);\n        context.subscription.unsubscribe();\n      }\n    }\n\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.complete();\n        context.subscription.unsubscribe();\n      }\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.unsubscribe();\n        context.subscription.unsubscribe();\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n\n    if (outerValue === this.openings) {\n\n      const { closingSelector } = this;\n      const closingNotifier = tryCatch(closingSelector)(innerValue);\n\n      if (closingNotifier === errorObject) {\n        return this.error(errorObject.e);\n      } else {\n        const window = new Subject<T>();\n        const subscription = new Subscription();\n        const context = { window, subscription };\n        this.contexts.push(context);\n        const innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n        if (innerSubscription.closed) {\n          this.closeWindow(this.contexts.length - 1);\n        } else {\n          (<any> innerSubscription).context = context;\n          subscription.add(innerSubscription);\n        }\n\n        this.destination.next(window);\n\n      }\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  }\n\n  notifyError(err: any): void {\n    this.error(err);\n  }\n\n  notifyComplete(inner: Subscription): void {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf((<any> inner).context));\n    }\n  }\n\n  private closeWindow(index: number): void {\n    if (index === -1) {\n      return;\n    }\n\n    const { contexts } = this;\n    const context = contexts[index];\n    const { window, subscription } = context;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowToggle } from '../../operator/windowToggle';\n\nObservable.prototype.windowToggle = windowToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowToggle: typeof windowToggle;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(this: Observable<T>, closingSelector: () => Observable<any>): Observable<Observable<T>> {\n  return this.lift(new WindowOperator<T>(closingSelector));\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n  private window: Subject<T>;\n  private closingNotification: Subscription;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openWindow();\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n    this.unsubscribeClosingNotification();\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n    this.unsubscribeClosingNotification();\n  }\n\n  private unsubscribeClosingNotification(): void {\n    if (this.closingNotification) {\n      this.closingNotification.unsubscribe();\n    }\n  }\n\n  private openWindow(innerSub: InnerSubscriber<T, any> = null): void {\n    if (innerSub) {\n      this.remove(innerSub);\n      innerSub.unsubscribe();\n    }\n\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n\n    const window = this.window = new Subject<T>();\n    this.destination.next(window);\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n    if (closingNotifier === errorObject) {\n      const err = errorObject.e;\n      this.destination.error(err);\n      this.window.error(err);\n    } else {\n      this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowWhen } from '../../operator/windowWhen';\n\nObservable.prototype.windowWhen = windowWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowWhen: typeof windowWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function withLatestFrom<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function withLatestFrom<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function withLatestFrom<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function withLatestFrom<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function withLatestFrom<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function withLatestFrom<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function withLatestFrom<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function withLatestFrom<T, R>(this: Observable<T>, array: ObservableInput<any>[]): Observable<R>;\nexport function withLatestFrom<T, R>(this: Observable<T>, array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(this: Observable<T>, ...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  let project: any;\n  if (typeof args[args.length - 1] === 'function') {\n    project = args.pop();\n  }\n  const observables = <Observable<any>[]>args;\n  return this.lift(new WithLatestFromOperator(observables, project));\n}\n\nclass WithLatestFromOperator<T, R> implements Operator<T, R> {\n  constructor(private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WithLatestFromSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private values: any[];\n  private toRespond: number[] = [];\n\n  constructor(destination: Subscriber<R>,\n              private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n    super(destination);\n    const len = observables.length;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      this.toRespond.push(i);\n    }\n\n    for (let i = 0; i < len; i++) {\n      let observable = observables[i];\n      this.add(subscribeToResult<T, R>(this, observable, <any>observable, i));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.values[outerIndex] = innerValue;\n    const toRespond = this.toRespond;\n    if (toRespond.length > 0) {\n      const found = toRespond.indexOf(outerIndex);\n      if (found !== -1) {\n        toRespond.splice(found, 1);\n      }\n    }\n  }\n\n  notifyComplete() {\n    // noop\n  }\n\n  protected _next(value: T) {\n    if (this.toRespond.length === 0) {\n      const args = [value, ...this.values];\n      if (this.project) {\n        this._tryProject(args);\n      } else {\n        this.destination.next(args);\n      }\n    }\n  }\n\n  private _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { withLatestFrom } from '../../operator/withLatestFrom';\n\nObservable.prototype.withLatestFrom = withLatestFrom;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    withLatestFrom: typeof withLatestFrom;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { zipProto } from '../../operator/zip';\n\nObservable.prototype.zip = zipProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zip: typeof zipProto;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ScalarObservable<T> extends Observable<T> {\n  static create<T>(value: T, scheduler?: IScheduler): ScalarObservable<T> {\n    return new ScalarObservable(value, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { done, value, subscriber } = state;\n\n    if (done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.done = true;\n    (<any> this).schedule(state);\n  }\n\n  _isScalar: boolean = true;\n\n  constructor(public value: T, private scheduler?: IScheduler) {\n    super();\n    if (scheduler) {\n      this._isScalar = false;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const value = this.value;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ScalarObservable.dispatch, 0, {\n        done: false, value, subscriber\n      });\n    } else {\n      subscriber.next(value);\n      if (!subscriber.closed) {\n        subscriber.complete();\n      }\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg<T> {\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class EmptyObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits a complete notification.\n   *\n   * <span class=\"informal\">Just emits 'complete', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/empty.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the complete notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then complete.</caption>\n   * var result = Rx.Observable.empty().startWith(7);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n   * );\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following to the console:\n   * // x is equal to the count on the interval eg(0,1,2,3,...)\n   * // x will occur every 1000ms\n   * // if x % 2 is equal to 1 print abc\n   * // if x % 2 is not equal to 1 nothing will be output\n   *\n   * @see {@link create}\n   * @see {@link never}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the complete notification.\n   * @return {Observable} An \"empty\" Observable: emits only the complete\n   * notification.\n   * @static true\n   * @name empty\n   * @owner Observable\n   */\n  static create<T>(scheduler?: IScheduler): Observable<T> {\n    return new EmptyObservable<T>(scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>) {\n    const { subscriber } = arg;\n    subscriber.complete();\n  }\n\n  constructor(private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber });\n    } else {\n      subscriber.complete();\n    }\n  }\n}\n","import { Scheduler } from '../Scheduler';\nexport function isScheduler(value: any): value is Scheduler {\n  return value && typeof (<any>value).schedule === 'function';\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayObservable<T> extends Observable<T> {\n\n  static create<T>(array: T[], scheduler?: IScheduler): Observable<T> {\n    return new ArrayObservable(array, scheduler);\n  }\n\n  static of<T>(item1: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, item6: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(...array: Array<T | IScheduler>): Observable<T>;\n  /**\n   * Creates an Observable that emits some values you specify as arguments,\n   * immediately one after the other, and then emits a complete notification.\n   *\n   * <span class=\"informal\">Emits the arguments you provide, then completes.\n   * </span>\n   *\n   * <img src=\"./img/of.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the arguments given, and the complete notification thereafter. It can\n   * be used for composing with other Observables, such as with {@link concat}.\n   * By default, it uses a `null` IScheduler, which means the `next`\n   * notifications are sent synchronously, although with a different IScheduler\n   * it is possible to determine when those notifications will be delivered.\n   *\n   * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n   * var numbers = Rx.Observable.of(10, 20, 30);\n   * var letters = Rx.Observable.of('a', 'b', 'c');\n   * var interval = Rx.Observable.interval(1000);\n   * var result = numbers.concat(letters).concat(interval);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link throw}\n   *\n   * @param {...T} values Arguments that represent `next` values to be emitted.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the `next` notifications.\n   * @return {Observable<T>} An Observable that emits each given input value.\n   * @static true\n   * @name of\n   * @owner Observable\n   */\n  static of<T>(...array: Array<T | IScheduler>): Observable<T> {\n    let scheduler = <IScheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len > 1) {\n      return new ArrayObservable<T>(<any>array, scheduler);\n    } else if (len === 1) {\n      return new ScalarObservable<T>(<any>array[0], scheduler);\n    } else {\n      return new EmptyObservable<T>(scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n\n    const { array, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(array[index]);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  value: any;\n\n  constructor(private array: T[], private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && array.length === 1) {\n      this._isScalar = true;\n      this.value = array[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const array = this.array;\n    const count = array.length;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayObservable.dispatch, 0, {\n        array, index, count, subscriber\n      });\n    } else {\n      for (let i = 0; i < count && !subscriber.closed; i++) {\n        subscriber.next(array[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","export const isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number');","export function isPromise<T>(value: any | Promise<T>): value is Promise<T> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index: number = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, private outerValue: T, private outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","import { root } from './root';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\nexport function subscribeToResult<T, R>(outerSubscriber: OuterSubscriber<T, R>,\n                                        result: any,\n                                        outerValue?: T,\n                                        outerIndex?: number): Subscription;\nexport function subscribeToResult<T>(outerSubscriber: OuterSubscriber<any, any>,\n                                     result: ObservableInput<T>,\n                                     outerValue?: T,\n                                     outerIndex?: number): Subscription {\n  let destination: Subscriber<any> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\n  if (destination.closed) {\n    return null;\n  }\n\n  if (result instanceof Observable) {\n    if (result._isScalar) {\n      destination.next((<any>result).value);\n      destination.complete();\n      return null;\n    } else {\n      return result.subscribe(destination);\n    }\n  } else if (isArrayLike(result)) {\n    for (let i = 0, len = result.length; i < len && !destination.closed; i++) {\n      destination.next(result[i]);\n    }\n    if (!destination.closed) {\n      destination.complete();\n    }\n  } else if (isPromise(result)) {\n    result.then(\n      (value) => {\n        if (!destination.closed) {\n          destination.next(<any>value);\n          destination.complete();\n        }\n      },\n      (err: any) => destination.error(err)\n    )\n    .then(null, (err: any) => {\n      // Escaping the Promise trap: globally throw unhandled errors\n      root.setTimeout(() => { throw err; });\n    });\n    return destination;\n  } else if (result && typeof result[Symbol_iterator] === 'function') {\n    const iterator = <any>result[Symbol_iterator]();\n    do {\n      let item = iterator.next();\n      if (item.done) {\n        destination.complete();\n        break;\n      }\n      destination.next(item.value);\n      if (destination.closed) {\n        break;\n      }\n    } while (true);\n  } else if (result && typeof result[Symbol_observable] === 'function') {\n    const obs = result[Symbol_observable]();\n    if (typeof obs.subscribe !== 'function') {\n      destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n    } else {\n      return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n    }\n  } else {\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n    const msg = `You provided ${value} where a stream was expected.`\n      + ' You can provide an Observable, Promise, Array, or Iterable.';\n    destination.error(new TypeError(msg));\n  }\n  return null;\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\n\n/* tslint:disable:max-line-length */\nexport function zipProto<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function zipProto<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipProto<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function zipProto<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipProto<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipProto<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipProto<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipProto<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function zipProto<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipProto<T, R>(this: Observable<T>, array: Array<ObservableInput<T>>): Observable<R>;\nexport function zipProto<T, TOther, R>(this: Observable<T>, array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zipProto<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  return this.lift.call(zipStatic<R>(this, ...observables));\n}\n\n/* tslint:disable:max-line-length */\nexport function zipStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function zipStatic<T, R>(v1: ObservableInput<T>, project: (v1: T) => R): Observable<R>;\nexport function zipStatic<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\nexport function zipStatic<T>(array: ObservableInput<T>[]): Observable<T[]>;\nexport function zipStatic<R>(array: ObservableInput<any>[]): Observable<R>;\nexport function zipStatic<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R): Observable<R>;\nexport function zipStatic<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n\nexport function zipStatic<T>(...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * @example <caption>Combine age and name from different sources</caption>\n *\n * let age$ = Observable.of<number>(27, 25, 29);\n * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = Observable.of<boolean>(true, true, false);\n *\n * Observable\n *     .zip(age$,\n *          name$,\n *          isDev$,\n *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))\n *     .subscribe(x => console.log(x));\n *\n * // outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n *\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  const project = <((...ys: Array<any>) => R)> observables[observables.length - 1];\n  if (typeof project === 'function') {\n    observables.pop();\n  }\n  return new ArrayObservable(observables).lift(new ZipOperator(project));\n}\n\nexport class ZipOperator<T, R> implements Operator<T, R> {\n\n  project: (...values: Array<any>) => R;\n\n  constructor(project?: (...values: Array<any>) => R) {\n    this.project = project;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ZipSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ZipSubscriber<T, R> extends Subscriber<T> {\n  private values: any;\n  private project: (...values: Array<any>) => R;\n  private iterators: LookAheadIterator<any>[] = [];\n  private active = 0;\n\n  constructor(destination: Subscriber<R>,\n              project?: (...values: Array<any>) => R,\n              values: any = Object.create(null)) {\n    super(destination);\n    this.project = (typeof project === 'function') ? project : null;\n    this.values = values;\n  }\n\n  protected _next(value: any) {\n    const iterators = this.iterators;\n    if (isArray(value)) {\n      iterators.push(new StaticArrayIterator(value));\n    } else if (typeof value[Symbol_iterator] === 'function') {\n      iterators.push(new StaticIterator(value[Symbol_iterator]()));\n    } else {\n      iterators.push(new ZipBufferIterator(this.destination, this, value));\n    }\n  }\n\n  protected _complete() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n\n    if (len === 0) {\n      this.destination.complete();\n      return;\n    }\n\n    this.active = len;\n    for (let i = 0; i < len; i++) {\n      let iterator: ZipBufferIterator<any, any> = <any>iterators[i];\n      if (iterator.stillUnsubscribed) {\n        this.add(iterator.subscribe(iterator, i));\n      } else {\n        this.active--; // not an observable\n      }\n    }\n  }\n\n  notifyInactive() {\n    this.active--;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  checkIterators() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    const destination = this.destination;\n\n    // abort if not all of them have values\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n        return;\n      }\n    }\n\n    let shouldComplete = false;\n    const args: any[] = [];\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      let result = iterator.next();\n\n      // check to see if it's completed now that you've gotten\n      // the next value.\n      if (iterator.hasCompleted()) {\n        shouldComplete = true;\n      }\n\n      if (result.done) {\n        destination.complete();\n        return;\n      }\n\n      args.push(result.value);\n    }\n\n    if (this.project) {\n      this._tryProject(args);\n    } else {\n      destination.next(args);\n    }\n\n    if (shouldComplete) {\n      destination.complete();\n    }\n  }\n\n  protected _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\ninterface LookAheadIterator<T> extends Iterator<T> {\n  hasValue(): boolean;\n  hasCompleted(): boolean;\n}\n\nclass StaticIterator<T> implements LookAheadIterator<T> {\n  private nextResult: IteratorResult<T>;\n\n  constructor(private iterator: Iterator<T>) {\n    this.nextResult = iterator.next();\n  }\n\n  hasValue() {\n    return true;\n  }\n\n  next(): IteratorResult<T> {\n    const result = this.nextResult;\n    this.nextResult = this.iterator.next();\n    return result;\n  }\n\n  hasCompleted() {\n    const nextResult = this.nextResult;\n    return nextResult && nextResult.done;\n  }\n}\n\nclass StaticArrayIterator<T> implements LookAheadIterator<T> {\n  private index = 0;\n  private length = 0;\n\n  constructor(private array: T[]) {\n    this.length = array.length;\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  next(value?: any): IteratorResult<T> {\n    const i = this.index++;\n    const array = this.array;\n    return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n  }\n\n  hasValue() {\n    return this.array.length > this.index;\n  }\n\n  hasCompleted() {\n    return this.array.length === this.index;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ZipBufferIterator<T, R> extends OuterSubscriber<T, R> implements LookAheadIterator<T> {\n  stillUnsubscribed = true;\n  buffer: T[] = [];\n  isComplete = false;\n\n  constructor(destination: PartialObserver<T>,\n              private parent: ZipSubscriber<T, R>,\n              private observable: Observable<T>) {\n    super(destination);\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n  //    this is legit because `next()` will never be called by a subscription in this case.\n  next(): IteratorResult<T> {\n    const buffer = this.buffer;\n    if (buffer.length === 0 && this.isComplete) {\n      return { value: null, done: true };\n    } else {\n      return { value: buffer.shift(), done: false };\n    }\n  }\n\n  hasValue() {\n    return this.buffer.length > 0;\n  }\n\n  hasCompleted() {\n    return this.buffer.length === 0 && this.isComplete;\n  }\n\n  notifyComplete() {\n    if (this.buffer.length > 0) {\n      this.isComplete = true;\n      this.parent.notifyInactive();\n    } else {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.buffer.push(innerValue);\n    this.parent.checkIterators();\n  }\n\n  subscribe(value: any, index: number) {\n    return subscribeToResult<any, any>(this, this.observable, this, index);\n  }\n}\n","import { ZipOperator } from './zip';\nimport { Observable } from '../Observable';\n\n/**\n * @param project\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method zipAll\n * @owner Observable\n */\nexport function zipAll<T, R>(this: Observable<T>, project?: (...values: Array<any>) => R): Observable<R> {\n  return this.lift(new ZipOperator(project));\n}\n","\nimport { Observable } from '../../Observable';\nimport { zipAll } from '../../operator/zipAll';\n\nObservable.prototype.zipAll = zipAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zipAll: typeof zipAll;\n  }\n}","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private value: T = null;\n  private hasNext: boolean = false;\n  private hasCompleted: boolean = false;\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    }\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  }\n\n  error(error: any): void {\n    if (!this.hasCompleted) {\n      super.error(error);\n    }\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { TeardownLogic } from '../Subscription';\nimport { Action } from '../scheduler/Action';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(this: Observable<T>, scheduler: IScheduler, delay: number = 0): Observable<T> {\n  return this.lift(new ObserveOnOperator(scheduler, delay));\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  static dispatch(this: Action<ObserveOnMessage>, arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n    this.unsubscribe();\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: IScheduler,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n    this.add(this.scheduler.schedule(\n      ObserveOnSubscriber.dispatch,\n      this.delay,\n      new ObserveOnMessage(notification, this.destination)\n    ));\n  }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n","import { Subject } from './Subject';\nimport { IScheduler } from './Scheduler';\nimport { queue } from './scheduler/queue';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operator/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\n/**\n * @class ReplaySubject<T>\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _events: ReplayEvent<T>[] = [];\n  private _bufferSize: number;\n  private _windowTime: number;\n\n  constructor(bufferSize: number = Number.POSITIVE_INFINITY,\n              windowTime: number = Number.POSITIVE_INFINITY,\n              private scheduler?: IScheduler) {\n    super();\n    this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n    this._windowTime = windowTime < 1 ? 1 : windowTime;\n  }\n\n  next(value: T): void {\n    const now = this._getNow();\n    this._events.push(new ReplayEvent(now, value));\n    this._trimBufferThenGetEvents();\n    super.next(value);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const _events = this._trimBufferThenGetEvents();\n    const scheduler = this.scheduler;\n    let subscription: Subscription;\n\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscription = Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscription = Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      subscription = new SubjectSubscription(this, subscriber);\n    }\n\n    if (scheduler) {\n      subscriber.add(subscriber = new ObserveOnSubscriber<T>(subscriber, scheduler));\n    }\n\n    const len = _events.length;\n    for (let i = 0; i < len && !subscriber.closed; i++) {\n      subscriber.next(_events[i].value);\n    }\n\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n    } else if (this.isStopped) {\n      subscriber.complete();\n    }\n\n    return subscription;\n  }\n\n  _getNow(): number {\n    return (this.scheduler || queue).now();\n  }\n\n  private _trimBufferThenGetEvents(): ReplayEvent<T>[] {\n    const now = this._getNow();\n    const _bufferSize = this._bufferSize;\n    const _windowTime = this._windowTime;\n    const _events = this._events;\n\n    let eventsCount = _events.length;\n    let spliceCount = 0;\n\n    // Trim events that fall out of the time window.\n    // Start at the front of the list. Break early once\n    // we encounter an event that falls within the window.\n    while (spliceCount < eventsCount) {\n      if ((now - _events[spliceCount].time) < _windowTime) {\n        break;\n      }\n      spliceCount++;\n    }\n\n    if (eventsCount > _bufferSize) {\n      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n    }\n\n    if (spliceCount > 0) {\n      _events.splice(0, spliceCount);\n    }\n\n    return _events;\n  }\n}\n\nclass ReplayEvent<T> {\n  constructor(public time: number, public value: T) {\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, ISubscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n\n/**\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<ISubscription>subscription).closed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throw this.thrownError;\n    } else if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return this._value;\n    }\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n","import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  protected _subject: Subject<T>;\n  protected _refCount: number = 0;\n  protected _connection: Subscription;\n  _isComplete = false;\n\n  constructor(protected source: Observable<T>,\n              protected subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      this._isComplete = false;\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return this.lift(new RefCountOperator<T>(this));\n  }\n}\n\nconst connectableProto = <any>ConnectableObservable.prototype;\n\nexport const connectableObservableDescriptor: PropertyDescriptorMap = {\n  operator: { value: null },\n  _refCount: { value: 0, writable: true },\n  _subject: { value: null, writable: true },\n  _connection: { value: null, writable: true },\n  _subscribe: { value: connectableProto._subscribe },\n  _isComplete: { value: connectableProto._isComplete, writable: true },\n  getSubject: { value: connectableProto.getSubject },\n  connect: { value: connectableProto.connect },\n  refCount: { value: connectableProto.refCount }\n};\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this.connectable._isComplete = true;\n    this._unsubscribe();\n    super._complete();\n  }\n  protected _unsubscribe() {\n    const connectable = <any>this.connectable;\n    if (connectable) {\n      this.connectable = null;\n      const connection = connectable._connection;\n      connectable._refCount = 0;\n      connectable._subject = null;\n      connectable._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport class EmptyError extends Error {\n  constructor() {\n    const err: any = super('no elements in sequence');\n    (<any> this).name = err.name = 'EmptyError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport class ArgumentOutOfRangeError extends Error {\n  constructor() {\n    const err: any = super('argument out of range');\n    (<any> this).name = err.name = 'ArgumentOutOfRangeError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","/**\r\n * An error thrown when duetime elapses.\r\n *\r\n * @see {@link timeout}\r\n *\r\n * @class TimeoutError\r\n */\r\nexport class TimeoutError extends Error {\r\n  constructor() {\r\n    const err: any = super('Timeout has occurred');\r\n    (<any> this).name = err.name = 'TimeoutError';\r\n    (<any> this).stack = err.stack;\r\n    (<any> this).message = err.message;\r\n  }\r\n}\r\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\n\n/**\n * @param scheduler\n * @return {Observable<TimeInterval<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timeInterval\n * @owner Observable\n */\nexport function timeInterval<T>(this: Observable<T>, scheduler: IScheduler = async): Observable<TimeInterval<T>> {\n  return this.lift(new TimeIntervalOperator(scheduler));\n}\n\nexport class TimeInterval<T> {\n  constructor(public value: T, public interval: number) {\n\n  }\n};\n\nclass TimeIntervalOperator<T> implements Operator<T, TimeInterval<T>> {\n  constructor(private scheduler: IScheduler) {\n\n  }\n\n  call(observer: Subscriber<TimeInterval<T>>, source: any): any {\n    return source.subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeIntervalSubscriber<T> extends Subscriber<T> {\n  private lastTime: number = 0;\n\n  constructor(destination: Subscriber<TimeInterval<T>>, private scheduler: IScheduler) {\n    super(destination);\n\n    this.lastTime = scheduler.now();\n  }\n\n  protected _next(value: T) {\n    let now = this.scheduler.now();\n    let span = now - this.lastTime;\n    this.lastTime = now;\n\n    this.destination.next(new TimeInterval(value, span));\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\n\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nexport function timestamp<T>(this: Observable<T>, scheduler: IScheduler = async): Observable<Timestamp<T>> {\n  return this.lift(new TimestampOperator(scheduler));\n}\n\nexport class Timestamp<T> {\n  constructor(public value: T, public timestamp: number) {\n  }\n};\n\nclass TimestampOperator<T> implements Operator<T, Timestamp<T>> {\n  constructor(private scheduler: IScheduler) {\n  }\n\n  call(observer: Subscriber<Timestamp<T>>, source: any): any {\n    return source.subscribe(new TimestampSubscriber(observer, this.scheduler));\n  }\n}\n\nclass TimestampSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Timestamp<T>>, private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const now = this.scheduler.now();\n\n    this.destination.next(new Timestamp(value, now));\n  }\n}\n","import { PartialObserver } from './Observer';\nimport { Observable } from './Observable';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return Observable.of(this.value);\n      case 'E':\n        return Observable.throw(this.error);\n      case 'C':\n        return Observable.empty<T>();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return Notification.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   */\n  static createComplete(): Notification<any> {\n    return Notification.completeNotification;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ColdObservable<T> extends Observable<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super(function (this: ColdObservable<T>, subscriber: Subscriber<any>) {\n      const observable: ColdObservable<T> = this;\n      const index = observable.logSubscribedFrame();\n      subscriber.add(new Subscription(() => {\n        observable.logUnsubscribedFrame(index);\n      }));\n      observable.scheduleMessages(subscriber);\n      return subscriber;\n    });\n    this.scheduler = scheduler;\n  }\n\n  scheduleMessages(subscriber: Subscriber<any>) {\n    const messagesLength = this.messages.length;\n    for (let i = 0; i < messagesLength; i++) {\n      const message = this.messages[i];\n      subscriber.add(\n        this.scheduler.schedule(({message, subscriber}) => { message.notification.observe(subscriber); },\n          message.frame,\n          {message, subscriber})\n      );\n    }\n  }\n}\napplyMixins(ColdObservable, [SubscriptionLoggable]);\n","/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport class ObjectUnsubscribedError extends Error {\n  constructor() {\n    const err: any = super('object unsubscribed');\n    (<any> this).name = err.name = 'ObjectUnsubscribedError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Subject } from './Subject';\nimport { Observer } from './Observer';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observer } from './Observer';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { ISubscription, Subscription, TeardownLogic } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements ISubscription {\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  protected _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { SubscriptionLog } from './SubscriptionLog';\n\nexport class SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n\n  logSubscribedFrame(): number {\n    this.subscriptions.push(new SubscriptionLog(this.scheduler.now()));\n    return this.subscriptions.length - 1;\n  }\n\n  logUnsubscribedFrame(index: number) {\n    const subscriptionLogs = this.subscriptions;\n    const oldSubscriptionLog = subscriptionLogs[index];\n    subscriptionLogs[index] = new SubscriptionLog(\n      oldSubscriptionLog.subscribedFrame,\n      this.scheduler.now()\n    );\n  }\n}\n","export function applyMixins(derivedCtor: any, baseCtors: any[]) {\n  for (let i = 0, len = baseCtors.length; i < len; i++) {\n    const baseCtor = baseCtors[i];\n    const propertyKeys = Object.getOwnPropertyNames(baseCtor.prototype);\n    for (let j = 0, len2 = propertyKeys.length; j < len2; j++) {\n      const name = propertyKeys[j];\n      derivedCtor.prototype[name] = baseCtor.prototype[name];\n    }\n  }\n}","import { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class HotObservable<T> extends Subject<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super();\n    this.scheduler = scheduler;\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    const subject: HotObservable<T> = this;\n    const index = subject.logSubscribedFrame();\n    subscriber.add(new Subscription(() => {\n      subject.logUnsubscribedFrame(index);\n    }));\n    return super._subscribe(subscriber);\n  }\n\n  setup() {\n    const subject = this;\n    const messagesLength = subject.messages.length;\n    /* tslint:disable:no-var-keyword */\n    for (var i = 0; i < messagesLength; i++) {\n      (() => {\n        var message = subject.messages[i];\n   /* tslint:enable */\n        subject.scheduler.schedule(\n          () => { message.notification.observe(subject); },\n          message.frame\n        );\n      })();\n    }\n  }\n}\napplyMixins(HotObservable, [SubscriptionLoggable]);\n","export class SubscriptionLog {\n  constructor(public subscribedFrame: number,\n              public unsubscribedFrame: number = Number.POSITIVE_INFINITY) {\n  }\n}","import { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { ColdObservable } from './ColdObservable';\nimport { HotObservable } from './HotObservable';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { Subscription } from '../Subscription';\nimport { VirtualTimeScheduler, VirtualAction } from '../scheduler/VirtualTimeScheduler';\n\nconst defaultMaxFrame: number = 750;\n\ninterface FlushableTest {\n  ready: boolean;\n  actual?: any[];\n  expected?: any[];\n}\n\nexport type observableToBeFn = (marbles: string, values?: any, errorValue?: any) => void;\nexport type subscriptionLogsToBeFn = (marbles: string | string[]) => void;\n\nexport class TestScheduler extends VirtualTimeScheduler {\n  private hotObservables: HotObservable<any>[] = [];\n  private coldObservables: ColdObservable<any>[] = [];\n  private flushTests: FlushableTest[] = [];\n\n  constructor(public assertDeepEqual: (actual: any, expected: any) => boolean | void) {\n    super(VirtualAction, defaultMaxFrame);\n  }\n\n  createTime(marbles: string): number {\n    const indexOf: number = marbles.indexOf('|');\n    if (indexOf === -1) {\n      throw new Error('marble diagram for time should have a completion marker \"|\"');\n    }\n    return indexOf * TestScheduler.frameTimeFactor;\n  }\n\n  createColdObservable<T>(marbles: string, values?: any, error?: any): ColdObservable<T> {\n    if (marbles.indexOf('^') !== -1) {\n      throw new Error('cold observable cannot have subscription offset \"^\"');\n    }\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('cold observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const cold = new ColdObservable<T>(messages, this);\n    this.coldObservables.push(cold);\n    return cold;\n  }\n\n  createHotObservable<T>(marbles: string, values?: any, error?: any): HotObservable<T> {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('hot observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const subject = new HotObservable<T>(messages, this);\n    this.hotObservables.push(subject);\n    return subject;\n  }\n\n  private materializeInnerObservable(observable: Observable<any>,\n                                     outerFrame: number): TestMessage[] {\n    const messages: TestMessage[] = [];\n    observable.subscribe((value) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createNext(value) });\n    }, (err) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createError(err) });\n    }, () => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createComplete() });\n    });\n    return messages;\n  }\n\n  expectObservable(observable: Observable<any>,\n                   unsubscriptionMarbles: string = null): ({ toBe: observableToBeFn }) {\n    const actual: TestMessage[] = [];\n    const flushTest: FlushableTest = { actual, ready: false };\n    const unsubscriptionFrame = TestScheduler\n      .parseMarblesAsSubscriptions(unsubscriptionMarbles).unsubscribedFrame;\n    let subscription: Subscription;\n\n    this.schedule(() => {\n      subscription = observable.subscribe(x => {\n        let value = x;\n        // Support Observable-of-Observables\n        if (x instanceof Observable) {\n          value = this.materializeInnerObservable(value, this.frame);\n        }\n        actual.push({ frame: this.frame, notification: Notification.createNext(value) });\n      }, (err) => {\n        actual.push({ frame: this.frame, notification: Notification.createError(err) });\n      }, () => {\n        actual.push({ frame: this.frame, notification: Notification.createComplete() });\n      });\n    }, 0);\n\n    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n      this.schedule(() => subscription.unsubscribe(), unsubscriptionFrame);\n    }\n\n    this.flushTests.push(flushTest);\n\n    return {\n      toBe(marbles: string, values?: any, errorValue?: any) {\n        flushTest.ready = true;\n        flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true);\n      }\n    };\n  }\n\n  expectSubscriptions(actualSubscriptionLogs: SubscriptionLog[]): ({ toBe: subscriptionLogsToBeFn }) {\n    const flushTest: FlushableTest = { actual: actualSubscriptionLogs, ready: false };\n    this.flushTests.push(flushTest);\n    return {\n      toBe(marbles: string | string[]) {\n        const marblesArray: string[] = (typeof marbles === 'string') ? [marbles] : marbles;\n        flushTest.ready = true;\n        flushTest.expected = marblesArray.map(marbles =>\n          TestScheduler.parseMarblesAsSubscriptions(marbles)\n        );\n      }\n    };\n  }\n\n  flush() {\n    const hotObservables = this.hotObservables;\n    while (hotObservables.length > 0) {\n      hotObservables.shift().setup();\n    }\n\n    super.flush();\n    const readyFlushTests = this.flushTests.filter(test => test.ready);\n    while (readyFlushTests.length > 0) {\n      const test = readyFlushTests.shift();\n      this.assertDeepEqual(test.actual, test.expected);\n    }\n  }\n\n  static parseMarblesAsSubscriptions(marbles: string): SubscriptionLog {\n    if (typeof marbles !== 'string') {\n      return new SubscriptionLog(Number.POSITIVE_INFINITY);\n    }\n    const len = marbles.length;\n    let groupStart = -1;\n    let subscriptionFrame = Number.POSITIVE_INFINITY;\n    let unsubscriptionFrame = Number.POSITIVE_INFINITY;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '^':\n          if (subscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          subscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        case '!':\n          if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          unsubscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        default:\n          throw new Error('there can only be \\'^\\' and \\'!\\' markers in a ' +\n            'subscription marble diagram. Found instead \\'' + c + '\\'.');\n      }\n    }\n\n    if (unsubscriptionFrame < 0) {\n      return new SubscriptionLog(subscriptionFrame);\n    } else {\n      return new SubscriptionLog(subscriptionFrame, unsubscriptionFrame);\n    }\n  }\n\n  static parseMarbles(marbles: string,\n                      values?: any,\n                      errorValue?: any,\n                      materializeInnerObservables: boolean = false): TestMessage[] {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('conventional marble diagrams cannot have the ' +\n        'unsubscription marker \"!\"');\n    }\n    const len = marbles.length;\n    const testMessages: TestMessage[] = [];\n    const subIndex = marbles.indexOf('^');\n    const frameOffset = subIndex === -1 ? 0 : (subIndex * -this.frameTimeFactor);\n    const getValue = typeof values !== 'object' ?\n      (x: any) => x :\n      (x: any) => {\n        // Support Observable-of-Observables\n        if (materializeInnerObservables && values[x] instanceof ColdObservable) {\n          return values[x].messages;\n        }\n        return values[x];\n      };\n    let groupStart = -1;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor + frameOffset;\n      let notification: Notification<any>;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '|':\n          notification = Notification.createComplete();\n          break;\n        case '^':\n          break;\n        case '#':\n          notification = Notification.createError(errorValue || 'error');\n          break;\n        default:\n          notification = Notification.createNext(getValue(c));\n          break;\n      }\n\n      if (notification) {\n        testMessages.push({ frame: groupStart > -1 ? groupStart : frame, notification });\n      }\n    }\n    return testMessages;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class VirtualTimeScheduler extends AsyncScheduler {\n\n  protected static frameTimeFactor: number = 10;\n\n  public frame: number = 0;\n  public index: number = -1;\n\n  constructor(SchedulerAction: typeof AsyncAction = VirtualAction,\n              public maxFrames: number = Number.POSITIVE_INFINITY) {\n    super(SchedulerAction, () => this.frame);\n  }\n\n  /**\n   * Prompt the Scheduler to execute all of its queued actions, therefore\n   * clearing its queue.\n   * @return {void}\n   */\n  public flush(): void {\n\n    const {actions, maxFrames} = this;\n    let error: any, action: AsyncAction<any>;\n\n    while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    }\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class VirtualAction<T> extends AsyncAction<T> {\n\n  protected active: boolean = true;\n\n  constructor(protected scheduler: VirtualTimeScheduler,\n              protected work: (this: VirtualAction<T>, state?: T) => void,\n              protected index: number = scheduler.index += 1) {\n    super(scheduler, work);\n    this.index = scheduler.index = index;\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (!this.id) {\n      return super.schedule(state, delay);\n    }\n    this.active = false;\n    // If an action is rescheduled, we save allocations by mutating its state,\n    // pushing it to the end of the scheduler queue, and recycling the action.\n    // But since the VirtualTimeScheduler is used for testing, VirtualActions\n    // must be immutable so they can be inspected later.\n    const action = new VirtualAction(this.scheduler, this.work);\n    this.add(action);\n    return action.schedule(state, delay);\n  }\n\n  protected requestAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    this.delay = scheduler.frame + delay;\n    const {actions} = scheduler;\n    actions.push(this);\n    actions.sort(VirtualAction.sortActions);\n    return true;\n  }\n\n  protected recycleAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    return undefined;\n  }\n\n  protected _execute(state: T, delay: number): any {\n    if (this.active === true) {\n      return super._execute(state, delay);\n    }\n  }\n\n  public static sortActions<T>(a: VirtualAction<T>, b: VirtualAction<T>) {\n    if (a.delay === b.delay) {\n      if (a.index === b.index) {\n        return 0;\n      } else if (a.index > b.index) {\n        return 1;\n      } else {\n        return -1;\n      }\n    } else if (a.delay > b.delay) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n}\n","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { PartialObserver, empty as emptyObserver } from '../Observer';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { PartialObserver } from './Observer';\nimport { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, AnonymousSubscription, TeardownLogic } from './Subscription';\nimport { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { IfObservable } from './observable/IfObservable';\nimport { ErrorObservable } from './observable/ErrorObservable';\nimport { observable as Symbol_observable } from './symbol/observable';\n\nexport interface Subscribable<T> {\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): AnonymousSubscription;\n}\n\nexport type SubscribableOrPromise<T> = Subscribable<T> | PromiseLike<T>;\nexport type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T>;\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  public _isScalar: boolean = false;\n\n  protected source: Observable<any>;\n  protected operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(): Subscription;\n  subscribe(observer: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n   * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n   * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n   * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n   *\n   * @example <caption>Subscribe with an Observer</caption>\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() { // We actually could just remove this method,\n   *   },        // since we do not really care about errors right now.\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   * .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Subscribe with functions</caption>\n   * let sum = 0;\n   *\n   * Rx.Observable.of(1, 2, 3)\n   * .subscribe(\n   *   function(value) {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   function() {\n   *     console.log('Sum equals: ' + sum);\n   *   }\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Cancel a subscription</caption>\n   * const subscription = Rx.Observable.interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => console.log('completed!') // Will not be called, even\n   * );                                // when cancelling subscription\n   *\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   *\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(this.source ? this._subscribe(sink) : this._trySubscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  }\n\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      sink.syncErrorThrown = true;\n      sink.syncErrorValue = err;\n      sink.error(err);\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void> {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a RefernceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words\n  static if: typeof IfObservable.create;\n  static throw: typeof ErrorObservable.create;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n}\n","export interface NextObserver<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface ErrorObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface CompletionObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}\n\nexport type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n\nexport interface Observer<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void { throw err; },\n  complete(): void { /*noop*/ }\n};\n","import { isFunction } from './util/isFunction';\nimport { Observer, PartialObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  public syncErrorValue: any = null;\n  public syncErrorThrown: boolean = false;\n  public syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.destination = (<Subscriber<any>> destinationOrNext);\n            (<any> this.destination).add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _parent, _parents } = this;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._error) {\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parentSubscriber.syncErrorValue = err;\n        _parentSubscriber.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  }\n\n  protected _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(this: Observable<T>, project: (value: T, index: number) => R, thisArg?: any): Observable<R> {\n  if (typeof project !== 'function') {\n    throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n  }\n  return this.lift(new MapOperator(project, thisArg));\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { root } from '../../util/root';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { Observable } from '../../Observable';\nimport { Subscriber } from '../../Subscriber';\nimport { TeardownLogic } from '../../Subscription';\nimport { MapOperator } from '../../operator/map';\n\nexport interface AjaxRequest {\n  url?: string;\n  body?: any;\n  user?: string;\n  async?: boolean;\n  method?: string;\n  headers?: Object;\n  timeout?: number;\n  password?: string;\n  hasContent?: boolean;\n  crossDomain?: boolean;\n  withCredentials?: boolean;\n  createXHR?: () => XMLHttpRequest;\n  progressSubscriber?: Subscriber<any>;\n  responseType?: string;\n}\n\nfunction getCORSRequest(this: AjaxRequest): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    return new root.XMLHttpRequest();\n  } else if (!!root.XDomainRequest) {\n    return new root.XDomainRequest();\n  } else {\n    throw new Error('CORS is not supported by your browser');\n  }\n}\n\nfunction getXMLHttpRequest(): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    return new root.XMLHttpRequest();\n  } else {\n    let progId: string;\n    try {\n      const progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];\n      for (let i = 0; i < 3; i++) {\n        try {\n          progId = progIds[i];\n          if (new root.ActiveXObject(progId)) {\n            break;\n          }\n        } catch (e) {\n          //suppress exceptions\n        }\n      }\n      return new root.ActiveXObject(progId);\n    } catch (e) {\n      throw new Error('XMLHttpRequest is not supported by your browser');\n    }\n  }\n}\n\nexport interface AjaxCreationMethod {\n  (urlOrRequest: string | AjaxRequest): Observable<AjaxResponse>;\n  get(url: string, headers?: Object): Observable<AjaxResponse>;\n  post(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  put(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  patch(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  delete(url: string, headers?: Object): Observable<AjaxResponse>;\n  getJSON<T>(url: string, headers?: Object): Observable<T>;\n}\n\nexport function ajaxGet(url: string, headers: Object = null) {\n  return new AjaxObservable<AjaxResponse>({ method: 'GET', url, headers });\n};\n\nexport function ajaxPost(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'POST', url, body, headers });\n};\n\nexport function ajaxDelete(url: string, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'DELETE', url, headers });\n};\n\nexport function ajaxPut(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'PUT', url, body, headers });\n};\n\nexport function ajaxPatch(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'PATCH', url, body, headers });\n};\n\nexport function ajaxGetJSON<T>(url: string, headers?: Object): Observable<T> {\n  return new AjaxObservable<AjaxResponse>({ method: 'GET', url, responseType: 'json', headers })\n    .lift<T>(new MapOperator<AjaxResponse, T>((x: AjaxResponse, index: number): T => x.response, null));\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class AjaxObservable<T> extends Observable<T> {\n  /**\n   * Creates an observable for an Ajax request with either a request object with\n   * url, headers, etc or a string for a URL.\n   *\n   * @example\n   * source = Rx.Observable.ajax('/products');\n   * source = Rx.Observable.ajax({ url: 'products', method: 'GET' });\n   *\n   * @param {string|Object} request Can be one of the following:\n   *   A string of the URL to make the Ajax call.\n   *   An object with the following properties\n   *   - url: URL of the request\n   *   - body: The body of the request\n   *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE\n   *   - async: Whether the request is async\n   *   - headers: Optional headers\n   *   - crossDomain: true if a cross domain request, else false\n   *   - createXHR: a function to override if you need to use an alternate\n   *   XMLHttpRequest implementation.\n   *   - resultSelector: a function to use to alter the output value type of\n   *   the Observable. Gets {@link AjaxResponse} as an argument.\n   * @return {Observable} An observable sequence containing the XMLHttpRequest.\n   * @static true\n   * @name ajax\n   * @owner Observable\n  */\n  static create: AjaxCreationMethod = (() => {\n    const create: any = (urlOrRequest: string | AjaxRequest) => {\n      return new AjaxObservable(urlOrRequest);\n    };\n\n    create.get = ajaxGet;\n    create.post = ajaxPost;\n    create.delete = ajaxDelete;\n    create.put = ajaxPut;\n    create.patch = ajaxPatch;\n    create.getJSON = ajaxGetJSON;\n\n    return <AjaxCreationMethod>create;\n  })();\n\n  private request: AjaxRequest;\n\n  constructor(urlOrRequest: string | AjaxRequest) {\n    super();\n\n    const request: AjaxRequest = {\n      async: true,\n      createXHR: function(this: AjaxRequest) {\n        return this.crossDomain ? getCORSRequest.call(this) : getXMLHttpRequest();\n      },\n      crossDomain: false,\n      withCredentials: false,\n      headers: {},\n      method: 'GET',\n      responseType: 'json',\n      timeout: 0\n    };\n\n    if (typeof urlOrRequest === 'string') {\n      request.url = urlOrRequest;\n    } else {\n      for (const prop in urlOrRequest) {\n        if (urlOrRequest.hasOwnProperty(prop)) {\n          request[prop] = urlOrRequest[prop];\n        }\n      }\n    }\n\n    this.request = request;\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    return new AjaxSubscriber(subscriber, this.request);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AjaxSubscriber<T> extends Subscriber<Event> {\n  private xhr: XMLHttpRequest;\n  private done: boolean = false;\n\n  constructor(destination: Subscriber<T>, public request: AjaxRequest) {\n    super(destination);\n\n    const headers = request.headers = request.headers || {};\n\n    // force CORS if requested\n    if (!request.crossDomain && !headers['X-Requested-With']) {\n      headers['X-Requested-With'] = 'XMLHttpRequest';\n    }\n\n    // ensure content type is set\n    if (!('Content-Type' in headers) && !(root.FormData && request.body instanceof root.FormData) && typeof request.body !== 'undefined') {\n      headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';\n    }\n\n    // properly serialize body\n    request.body = this.serializeBody(request.body, request.headers['Content-Type']);\n\n    this.send();\n  }\n\n  next(e: Event): void {\n    this.done = true;\n    const { xhr, request, destination } = this;\n    const response = new AjaxResponse(e, xhr, request);\n\n    destination.next(response);\n  }\n\n  private send(): XMLHttpRequest {\n    const {\n      request,\n      request: { user, method, url, async, password, headers, body }\n    } = this;\n    const createXHR = request.createXHR;\n    const xhr: XMLHttpRequest = tryCatch(createXHR).call(request);\n\n    if (<any>xhr === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      this.xhr = xhr;\n\n      // set up the events before open XHR\n      // https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest\n      // You need to add the event listeners before calling open() on the request.\n      // Otherwise the progress events will not fire.\n      this.setupEvents(xhr, request);\n      // open XHR\n      let result: any;\n      if (user) {\n        result = tryCatch(xhr.open).call(xhr, method, url, async, user, password);\n      } else {\n        result = tryCatch(xhr.open).call(xhr, method, url, async);\n      }\n\n      if (result === errorObject) {\n        this.error(errorObject.e);\n        return null;\n      }\n\n      // timeout, responseType and withCredentials can be set once the XHR is open\n      if (async) {\n        xhr.timeout = request.timeout;\n        xhr.responseType = request.responseType;\n      }\n\n      if ('withCredentials' in xhr) {\n        xhr.withCredentials = !!request.withCredentials;\n      }\n\n      // set headers\n      this.setHeaders(xhr, headers);\n\n      // finally send the request\n      result = body ? tryCatch(xhr.send).call(xhr, body) : tryCatch(xhr.send).call(xhr);\n      if (result === errorObject) {\n        this.error(errorObject.e);\n        return null;\n      }\n    }\n\n    return xhr;\n  }\n\n  private serializeBody(body: any, contentType?: string) {\n    if (!body || typeof body === 'string') {\n      return body;\n    } else if (root.FormData && body instanceof root.FormData) {\n      return body;\n    }\n\n    if (contentType) {\n      const splitIndex = contentType.indexOf(';');\n      if (splitIndex !== -1) {\n        contentType = contentType.substring(0, splitIndex);\n      }\n    }\n\n    switch (contentType) {\n      case 'application/x-www-form-urlencoded':\n        return Object.keys(body).map(key => `${encodeURI(key)}=${encodeURI(body[key])}`).join('&');\n      case 'application/json':\n        return JSON.stringify(body);\n      default:\n        return body;\n    }\n  }\n\n  private setHeaders(xhr: XMLHttpRequest, headers: Object) {\n    for (let key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key]);\n      }\n    }\n  }\n\n  private setupEvents(xhr: XMLHttpRequest, request: AjaxRequest) {\n    const progressSubscriber = request.progressSubscriber;\n\n    function xhrTimeout(this: XMLHttpRequest, e: ProgressEvent) {\n      const {subscriber, progressSubscriber, request } = (<any>xhrTimeout);\n      if (progressSubscriber) {\n        progressSubscriber.error(e);\n      }\n      subscriber.error(new AjaxTimeoutError(this, request)); //TODO: Make betterer.\n    };\n    xhr.ontimeout = xhrTimeout;\n    (<any>xhrTimeout).request = request;\n    (<any>xhrTimeout).subscriber = this;\n    (<any>xhrTimeout).progressSubscriber = progressSubscriber;\n    if (xhr.upload && 'withCredentials' in xhr) {\n      if (progressSubscriber) {\n        let xhrProgress: (e: ProgressEvent) => void;\n        xhrProgress = function(e: ProgressEvent) {\n          const { progressSubscriber } = (<any>xhrProgress);\n          progressSubscriber.next(e);\n        };\n        if (root.XDomainRequest) {\n          xhr.onprogress = xhrProgress;\n        } else {\n          xhr.upload.onprogress = xhrProgress;\n        }\n        (<any>xhrProgress).progressSubscriber = progressSubscriber;\n      }\n      let xhrError: (e: ErrorEvent) => void;\n      xhrError = function(this: XMLHttpRequest, e: ErrorEvent) {\n        const { progressSubscriber, subscriber, request } = (<any>xhrError);\n        if (progressSubscriber) {\n          progressSubscriber.error(e);\n        }\n        subscriber.error(new AjaxError('ajax error', this, request));\n      };\n      xhr.onerror = xhrError;\n      (<any>xhrError).request = request;\n      (<any>xhrError).subscriber = this;\n      (<any>xhrError).progressSubscriber = progressSubscriber;\n    }\n\n    function xhrReadyStateChange(this: XMLHttpRequest, e: ProgressEvent) {\n      const { subscriber, progressSubscriber, request } = (<any>xhrReadyStateChange);\n      if (this.readyState === 4) {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        let status: number = this.status === 1223 ? 204 : this.status;\n        let response: any = (this.responseType === 'text' ?  (\n          this.response || this.responseText) : this.response);\n\n        // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n        if (status === 0) {\n          status = response ? 200 : 0;\n        }\n\n        if (200 <= status && status < 300) {\n          if (progressSubscriber) {\n            progressSubscriber.complete();\n          }\n          subscriber.next(e);\n          subscriber.complete();\n        } else {\n          if (progressSubscriber) {\n            progressSubscriber.error(e);\n          }\n          subscriber.error(new AjaxError('ajax error ' + status, this, request));\n        }\n      }\n    };\n    xhr.onreadystatechange = xhrReadyStateChange;\n    (<any>xhrReadyStateChange).subscriber = this;\n    (<any>xhrReadyStateChange).progressSubscriber = progressSubscriber;\n    (<any>xhrReadyStateChange).request = request;\n  }\n\n  unsubscribe() {\n    const { done, xhr } = this;\n    if (!done && xhr && xhr.readyState !== 4 && typeof xhr.abort === 'function') {\n      xhr.abort();\n    }\n    super.unsubscribe();\n  }\n}\n\n/**\n * A normalized AJAX response.\n *\n * @see {@link ajax}\n *\n * @class AjaxResponse\n */\nexport class AjaxResponse {\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  /** @type {string|ArrayBuffer|Document|object|any} The response data */\n  response: any;\n\n  /** @type {string} The raw responseText */\n  responseText: string;\n\n  /** @type {string} The responseType (e.g. 'json', 'arraybuffer', or 'xml') */\n  responseType: string;\n\n  constructor(public originalEvent: Event, public xhr: XMLHttpRequest, public request: AjaxRequest) {\n    this.status = xhr.status;\n    this.responseType = xhr.responseType || request.responseType;\n\n    switch (this.responseType) {\n      case 'json':\n        if ('response' in xhr) {\n          //IE does not support json as responseType, parse it internally\n          this.response = xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || 'null');\n        } else {\n          this.response = JSON.parse(xhr.responseText || 'null');\n        }\n        break;\n      case 'xml':\n        this.response = xhr.responseXML;\n        break;\n      case 'text':\n      default:\n        this.response = ('response' in xhr) ? xhr.response : xhr.responseText;\n        break;\n    }\n  }\n}\n\n/**\n * A normalized AJAX error.\n *\n * @see {@link ajax}\n *\n * @class AjaxError\n */\nexport class AjaxError extends Error {\n  /** @type {XMLHttpRequest} The XHR instance associated with the error */\n  xhr: XMLHttpRequest;\n\n  /** @type {AjaxRequest} The AjaxRequest associated with the error */\n  request: AjaxRequest;\n\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  constructor(message: string, xhr: XMLHttpRequest, request: AjaxRequest) {\n    super(message);\n    this.message = message;\n    this.xhr = xhr;\n    this.request = request;\n    this.status = xhr.status;\n  }\n}\n\n/**\n * @see {@link ajax}\n *\n * @class AjaxTimeoutError\n */\nexport class AjaxTimeoutError extends AjaxError {\n  constructor(xhr: XMLHttpRequest, request: AjaxRequest) {\n    super('ajax timeout', xhr, request);\n  }\n}\n","/**\nSome credit for this helper goes to http://github.com/YuzuJS/setImmediate\n*/\n\nimport {  root  } from './root';\n\nexport class ImmediateDefinition {\n  setImmediate: (cb: () => void) => number;\n\n  clearImmediate: (handle: number) => void;\n\n  private identify(o: any): string {\n    return this.root.Object.prototype.toString.call(o);\n  }\n\n  tasksByHandle: any;\n\n  nextHandle: number;\n\n  currentlyRunningATask: boolean;\n\n  constructor(private root: any) {\n    if (root.setImmediate && typeof root.setImmediate === 'function') {\n      this.setImmediate = root.setImmediate.bind(root);\n      this.clearImmediate = root.clearImmediate.bind(root);\n    } else {\n      this.nextHandle = 1;\n      this.tasksByHandle = {};\n      this.currentlyRunningATask = false;\n\n      // Don't get fooled by e.g. browserify environments.\n      if (this.canUseProcessNextTick()) {\n        // For Node.js before 0.9\n        this.setImmediate = this.createProcessNextTickSetImmediate();\n      } else if (this.canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        this.setImmediate = this.createPostMessageSetImmediate();\n      } else if (this.canUseMessageChannel()) {\n        // For web workers, where supported\n        this.setImmediate = this.createMessageChannelSetImmediate();\n      } else if (this.canUseReadyStateChange()) {\n        // For IE 6–8\n        this.setImmediate = this.createReadyStateChangeSetImmediate();\n      } else {\n        // For older browsers\n        this.setImmediate = this.createSetTimeoutSetImmediate();\n      }\n\n      let ci = function clearImmediate(handle: any) {\n        delete (<any>clearImmediate).instance.tasksByHandle[handle];\n      };\n\n      (<any>ci).instance = this;\n\n      this.clearImmediate = ci;\n    }\n  }\n\n  canUseProcessNextTick() {\n    return this.identify(this.root.process) === '[object process]';\n  }\n\n  canUseMessageChannel() {\n    return Boolean(this.root.MessageChannel);\n  }\n\n  canUseReadyStateChange() {\n    const document = this.root.document;\n    return Boolean(document && 'onreadystatechange' in document.createElement('script'));\n  }\n\n  canUsePostMessage() {\n    const root = this.root;\n    // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n    // where `root.postMessage` means something completely different and can't be used for this purpose.\n    if (root.postMessage && !root.importScripts) {\n      let postMessageIsAsynchronous = true;\n      let oldOnMessage = root.onmessage;\n      root.onmessage = function() {\n        postMessageIsAsynchronous = false;\n      };\n      root.postMessage('', '*');\n      root.onmessage = oldOnMessage;\n      return postMessageIsAsynchronous;\n    }\n\n    return false;\n  }\n\n  // This function accepts the same arguments as setImmediate, but\n  // returns a function that requires no arguments.\n  partiallyApplied(handler: any, ...args: any[]) {\n    let fn = function result () {\n      const { handler, args } = <any>result;\n      if (typeof handler === 'function') {\n        handler.apply(undefined, args);\n      } else {\n        (new Function('' + handler))();\n      }\n    };\n\n    (<any>fn).handler = handler;\n    (<any>fn).args = args;\n\n    return fn;\n  }\n\n  addFromSetImmediateArguments(args: any[]) {\n    this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);\n    return this.nextHandle++;\n  }\n\n  createProcessNextTickSetImmediate() {\n    let fn = function setImmediate() {\n      const { instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createPostMessageSetImmediate() {\n    // Installs an event handler on `global` for the `message` event: see\n    // * https://developer.mozilla.org/en/DOM/window.postMessage\n    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n    const root = this.root;\n\n    let messagePrefix = 'setImmediate$' + root.Math.random() + '$';\n    let onGlobalMessage = function globalMessageHandler(event: any) {\n      const instance = (<any>globalMessageHandler).instance;\n      if (event.source === root &&\n        typeof event.data === 'string' &&\n        event.data.indexOf(messagePrefix) === 0) {\n        instance.runIfPresent(+event.data.slice(messagePrefix.length));\n      }\n    };\n    (<any>onGlobalMessage).instance = this;\n\n    root.addEventListener('message', onGlobalMessage, false);\n\n    let fn = function setImmediate() {\n      const { messagePrefix, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.postMessage(messagePrefix + handle, '*');\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n    (<any>fn).messagePrefix = messagePrefix;\n\n    return fn;\n  }\n\n  runIfPresent(handle: any) {\n    // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'\n    // So if we're currently running a task, we'll need to delay this invocation.\n    if (this.currentlyRunningATask) {\n      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n      // 'too much recursion' error.\n      this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);\n    } else {\n      let task = this.tasksByHandle[handle];\n      if (task) {\n        this.currentlyRunningATask = true;\n        try {\n          task();\n        } finally {\n          this.clearImmediate(handle);\n          this.currentlyRunningATask = false;\n        }\n      }\n    }\n  }\n\n  createMessageChannelSetImmediate() {\n    let channel = new this.root.MessageChannel();\n    channel.port1.onmessage = (event: any) => {\n      let handle = event.data;\n      this.runIfPresent(handle);\n    };\n\n    let fn = function setImmediate() {\n      const { channel, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      channel.port2.postMessage(handle);\n      return handle;\n    };\n\n    (<any>fn).channel = channel;\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createReadyStateChangeSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      const root = instance.root;\n      const doc = root.document;\n      const html = doc.documentElement;\n\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      let script = doc.createElement('script');\n      script.onreadystatechange = () => {\n        instance.runIfPresent(handle);\n        script.onreadystatechange = null;\n        html.removeChild(script);\n        script = null;\n      };\n      html.appendChild(script);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createSetTimeoutSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n}\nexport const Immediate = new ImmediateDefinition(root);\n","import { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsapAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AsapScheduler,\n              protected work: (this: AsapAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If a microtask has already been scheduled, don't schedule another\n    // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n    // the current scheduled microtask id.\n    return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested microtask and\n    // set the scheduled flag to undefined so the next AsapAction will schedule\n    // its own.\n    if (scheduler.actions.length === 0) {\n      Immediate.clearImmediate(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AsapScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n *\n * Asap Scheduler\n *\n * <span class=\"informal\">Perform task as fast as it can be performed asynchronously</span>\n *\n * `asap` scheduler behaves the same as {@link async} scheduler when you use it to delay task\n * in time. If however you set delay to `0`, `asap` will wait for current synchronously executing\n * code to end and then it will try to execute given task as fast as possible.\n *\n * `asap` scheduler will do its best to minimize time between end of currently executing code\n * and start of scheduled task. This makes it best candidate for performing so called \"deferring\".\n * Traditionally this was achieved by calling `setTimeout(deferredTask, 0)`, but that technique involves\n * some (although minimal) unwanted delay.\n *\n * Note that using `asap` scheduler does not necessarily mean that your task will be first to process\n * after currently executing code. In particular, if some task was also scheduled with `asap` before,\n * that task will execute first. That being said, if you need to schedule task asynchronously, but\n * as soon as possible, `asap` scheduler is your best bet.\n *\n * @example <caption>Compare async and asap scheduler</caption>\n *\n * Rx.Scheduler.async.schedule(() => console.log('async')); // scheduling 'async' first...\n * Rx.Scheduler.asap.schedule(() => console.log('asap'));\n *\n * // Logs:\n * // \"asap\"\n * // \"async\"\n * // ... but 'asap' goes first!\n *\n * @static true\n * @name asap\n * @owner Scheduler\n */\n\nexport const asap = new AsapScheduler(AsapAction);\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\n\nexport const async = new AsyncScheduler(AsyncAction);\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class QueueAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: QueueScheduler,\n              protected work: (this: QueueAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return (delay > 0 || this.closed) ?\n      super.execute(state, delay) :\n      this._execute(state, delay) ;\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Otherwise flush the scheduler starting with this action.\n    return scheduler.flush(this);\n  }\n}\n","import { AsyncScheduler } from './AsyncScheduler';\n\nexport class QueueScheduler extends AsyncScheduler {\n}\n","import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * @examples <caption>Schedule recursively first, then do something</caption>\n *\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n *\n *\n * @example <caption>Reschedule itself recursively</caption>\n *\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n *\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\n\nexport const queue = new QueueScheduler(QueueAction);\n","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n};\n","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport const errorObject: any = { e: {} };","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super();\n    const err: any = Error.call(this, errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (<any> this).name = err.name = 'UnsubscriptionError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n\nexport interface AnonymousSubscription {\n  unsubscribe(): void;\n}\n\nexport type TeardownLogic = AnonymousSubscription | Function | void;\n\nexport interface ISubscription extends AnonymousSubscription {\n  unsubscribe(): void;\n  readonly closed: boolean;\n}\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements ISubscription {\n  public static EMPTY: Subscription = (function(empty: any){\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  protected _parent: Subscription = null;\n  protected _parents: Subscription[] = null;\n  private _subscriptions: ISubscription[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parent, _parents, _unsubscribe, _subscriptions } = (<any> this);\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    let index = -1;\n    let len = _parents ? _parents.length : 0;\n\n    // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n    while (_parent) {\n      _parent.remove(this);\n      // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let subscription = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const subscriptions = this._subscriptions || (this._subscriptions = []);\n\n    subscriptions.push(subscription);\n    subscription._addParent(this);\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n\n  private _addParent(parent: Subscription) {\n    let { _parent, _parents } = this;\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\n\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (this: Action<T>, state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent Scheduler for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n","import { root } from '../util/root';\nimport { Action } from './Action';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsyncAction<T> extends Action<T> {\n\n  public id: any;\n  public state: T;\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler,\n              protected work: (this: AsyncAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n\n    if (this.closed) {\n      return this;\n     }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay: number = 0): any {\n    return root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay: number = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // or the action has been rescheduled before it's executed, clear the interval id\n    return root.clearInterval(id) && undefined || undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  protected _unsubscribe() {\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n    const actions = scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work  = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n\n    this.delay = null;\n  }\n}\n","import {  root  } from './root';\n\nexport class RequestAnimationFrameDefinition {\n  cancelAnimationFrame: (handle: number) => void;\n  requestAnimationFrame: (cb: () => void) => number;\n  constructor(root: any) {\n    if (root.requestAnimationFrame) {\n      this.cancelAnimationFrame = root.cancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.requestAnimationFrame.bind(root);\n    } else if (root.mozRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.mozCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.mozRequestAnimationFrame.bind(root);\n    } else if (root.webkitRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.webkitCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.webkitRequestAnimationFrame.bind(root);\n    } else if (root.msRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.msCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.msRequestAnimationFrame.bind(root);\n    } else if (root.oRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.oCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.oRequestAnimationFrame.bind(root);\n    } else {\n      this.cancelAnimationFrame = root.clearTimeout.bind(root);\n      this.requestAnimationFrame = function(cb) { return root.setTimeout(cb, 1000 / 60); };\n    }\n  }\n}\n\nexport const AnimationFrame = new RequestAnimationFrameDefinition(root);\n","import { AsyncAction } from './AsyncAction';\nimport { AnimationFrame } from '../util/AnimationFrame';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AnimationFrameAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AnimationFrameScheduler,\n              protected work: (this: AnimationFrameAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If an animation frame has already been requested, don't request another\n    // one. If an animation frame hasn't been requested yet, request one. Return\n    // the current animation frame request id.\n    return scheduler.scheduled || (scheduler.scheduled = AnimationFrame.requestAnimationFrame(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested animation frame and\n    // set the scheduled flag to undefined so the next AnimationFrameAction will\n    // request its own.\n    if (scheduler.actions.length === 0) {\n      AnimationFrame.cancelAnimationFrame(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\n\nexport interface IScheduler {\n  now(): number;\n  schedule<T>(work: (this: Action<T>, state?: T) => void, delay?: number, state?: T): Subscription;\n}\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nexport class Scheduler implements IScheduler {\n\n  public static now: () => number = Date.now ? Date.now : () => +new Date();\n\n  constructor(private SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (this: Action<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { AsyncAction } from './AsyncAction';\n\nexport class AsyncScheduler extends Scheduler {\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   */\n  public active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   */\n  public scheduled: any = undefined;\n\n  public flush(action: AsyncAction<any>): void {\n\n    const {actions} = this;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AnimationFrameScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AnimationFrameAction } from './AnimationFrameAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n *\n * Animation Frame Scheduler\n *\n * <span class=\"informal\">Perform task when `window.requestAnimationFrame` would fire</span>\n *\n * When `animationFrame` scheduler is used with delay, it will fall back to {@link async} scheduler\n * behaviour.\n *\n * Without delay, `animationFrame` scheduler can be used to create smooth browser animations.\n * It makes sure scheduled task will happen just before next browser content repaint,\n * thus performing animations as efficiently as possible.\n *\n * @example <caption>Schedule div height animation</caption>\n * const div = document.querySelector('.some-div');\n *\n * Rx.Scheduler.schedule(function(height) {\n *   div.style.height = height + \"px\";\n *\n *   this.schedule(height + 1);  // `this` references currently executing Action,\n *                               // which we reschedule with new state\n * }, 0, 0);\n *\n * // You will see .some-div element growing in height\n *\n *\n * @static true\n * @name animationFrame\n * @owner Scheduler\n */\n\nexport const animationFrame = new AnimationFrameScheduler(AnimationFrameAction);\n","import { root } from '../util/root';\n\nconst Symbol: any = root.Symbol;\n\nexport const rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n  Symbol.for('rxSubscriber') : '@@rxSubscriber';\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","import { root } from '../util/root';\n\nexport function symbolIteratorPonyfill(root: any) {\n  const Symbol: any = root.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (!Symbol.iterator) {\n      Symbol.iterator = Symbol('iterator polyfill');\n    }\n    return Symbol.iterator;\n  } else {\n    // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n    const { Set } = root;\n    if (Set && typeof new Set()['@@iterator'] === 'function') {\n      return '@@iterator';\n    }\n    const { Map } = root;\n    // required for compatability with es6-shim\n    if (Map) {\n      let keys = Object.getOwnPropertyNames(Map.prototype);\n      for (let i = 0; i < keys.length; ++i) {\n        let key = keys[i];\n        // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n        if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {\n          return key;\n        }\n      }\n    }\n    return '@@iterator';\n  }\n}\n\nexport const iterator = symbolIteratorPonyfill(root);\n\n/**\n * @deprecated use iterator instead\n */\nexport const $$iterator = iterator;\n","declare let global: any;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ndeclare var WorkerGlobalScope: any;\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\n\nconst __window = typeof window !== 'undefined' && window;\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nconst __global = typeof global !== 'undefined' && global;\nconst _root: any = __window || __global || __self;\n\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n  if (!_root) {\n    throw new Error('RxJS could not find any global context (window, self, global)');\n  }\n})();\n\nexport { _root as root };","import { root } from '../util/root';\n\nexport function getSymbolObservable(context: any) {\n  let $$observable: any;\n  let Symbol = context.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (Symbol.observable) {\n      $$observable = Symbol.observable;\n    } else {\n        $$observable = Symbol('observable');\n        Symbol.observable = $$observable;\n    }\n  } else {\n    $$observable = '@@observable';\n  }\n\n  return $$observable;\n}\n\nexport const observable = getSymbolObservable(root);\n\n/**\n * @deprecated use observable instead\n */\nexport const $$observable = observable;\n","/* tslint:disable:no-unused-variable */\n// Subject imported before Observable to bypass circular dependency issue since\n// Subject extends Observable and Observable references Subject in it's\n// definition\nexport {Subject, AnonymousSubject} from './Subject';\n/* tslint:enable:no-unused-variable */\nexport {Observable} from './Observable';\n\n// statics\n/* tslint:disable:no-use-before-declare */\nimport './add/observable/bindCallback';\nimport './add/observable/bindNodeCallback';\nimport './add/observable/combineLatest';\nimport './add/observable/concat';\nimport './add/observable/defer';\nimport './add/observable/empty';\nimport './add/observable/forkJoin';\nimport './add/observable/from';\nimport './add/observable/fromEvent';\nimport './add/observable/fromEventPattern';\nimport './add/observable/fromPromise';\nimport './add/observable/generate';\nimport './add/observable/if';\nimport './add/observable/interval';\nimport './add/observable/merge';\nimport './add/observable/race';\nimport './add/observable/never';\nimport './add/observable/of';\nimport './add/observable/onErrorResumeNext';\nimport './add/observable/pairs';\nimport './add/observable/range';\nimport './add/observable/using';\nimport './add/observable/throw';\nimport './add/observable/timer';\nimport './add/observable/zip';\n\n//dom\nimport './add/observable/dom/ajax';\nimport './add/observable/dom/webSocket';\n\n//operators\nimport './add/operator/buffer';\nimport './add/operator/bufferCount';\nimport './add/operator/bufferTime';\nimport './add/operator/bufferToggle';\nimport './add/operator/bufferWhen';\nimport './add/operator/catch';\nimport './add/operator/combineAll';\nimport './add/operator/combineLatest';\nimport './add/operator/concat';\nimport './add/operator/concatAll';\nimport './add/operator/concatMap';\nimport './add/operator/concatMapTo';\nimport './add/operator/count';\nimport './add/operator/dematerialize';\nimport './add/operator/debounce';\nimport './add/operator/debounceTime';\nimport './add/operator/defaultIfEmpty';\nimport './add/operator/delay';\nimport './add/operator/delayWhen';\nimport './add/operator/distinct';\nimport './add/operator/distinctUntilChanged';\nimport './add/operator/distinctUntilKeyChanged';\nimport './add/operator/do';\nimport './add/operator/exhaust';\nimport './add/operator/exhaustMap';\nimport './add/operator/expand';\nimport './add/operator/elementAt';\nimport './add/operator/filter';\nimport './add/operator/finally';\nimport './add/operator/find';\nimport './add/operator/findIndex';\nimport './add/operator/first';\nimport './add/operator/groupBy';\nimport './add/operator/ignoreElements';\nimport './add/operator/isEmpty';\nimport './add/operator/audit';\nimport './add/operator/auditTime';\nimport './add/operator/last';\nimport './add/operator/let';\nimport './add/operator/every';\nimport './add/operator/map';\nimport './add/operator/mapTo';\nimport './add/operator/materialize';\nimport './add/operator/max';\nimport './add/operator/merge';\nimport './add/operator/mergeAll';\nimport './add/operator/mergeMap';\nimport './add/operator/mergeMapTo';\nimport './add/operator/mergeScan';\nimport './add/operator/min';\nimport './add/operator/multicast';\nimport './add/operator/observeOn';\nimport './add/operator/onErrorResumeNext';\nimport './add/operator/pairwise';\nimport './add/operator/partition';\nimport './add/operator/pluck';\nimport './add/operator/publish';\nimport './add/operator/publishBehavior';\nimport './add/operator/publishReplay';\nimport './add/operator/publishLast';\nimport './add/operator/race';\nimport './add/operator/reduce';\nimport './add/operator/repeat';\nimport './add/operator/repeatWhen';\nimport './add/operator/retry';\nimport './add/operator/retryWhen';\nimport './add/operator/sample';\nimport './add/operator/sampleTime';\nimport './add/operator/scan';\nimport './add/operator/sequenceEqual';\nimport './add/operator/share';\nimport './add/operator/shareReplay';\nimport './add/operator/single';\nimport './add/operator/skip';\nimport './add/operator/skipLast';\nimport './add/operator/skipUntil';\nimport './add/operator/skipWhile';\nimport './add/operator/startWith';\nimport './add/operator/subscribeOn';\nimport './add/operator/switch';\nimport './add/operator/switchMap';\nimport './add/operator/switchMapTo';\nimport './add/operator/take';\nimport './add/operator/takeLast';\nimport './add/operator/takeUntil';\nimport './add/operator/takeWhile';\nimport './add/operator/throttle';\nimport './add/operator/throttleTime';\nimport './add/operator/timeInterval';\nimport './add/operator/timeout';\nimport './add/operator/timeoutWith';\nimport './add/operator/timestamp';\nimport './add/operator/toArray';\nimport './add/operator/toPromise';\nimport './add/operator/window';\nimport './add/operator/windowCount';\nimport './add/operator/windowTime';\nimport './add/operator/windowToggle';\nimport './add/operator/windowWhen';\nimport './add/operator/withLatestFrom';\nimport './add/operator/zip';\nimport './add/operator/zipAll';\n\n/* tslint:disable:no-unused-variable */\nexport {Operator} from './Operator';\nexport {Observer} from './Observer';\nexport {Subscription} from './Subscription';\nexport {Subscriber} from './Subscriber';\nexport {AsyncSubject} from './AsyncSubject';\nexport {ReplaySubject} from './ReplaySubject';\nexport {BehaviorSubject} from './BehaviorSubject';\nexport {ConnectableObservable} from './observable/ConnectableObservable';\nexport {Notification} from './Notification';\nexport {EmptyError} from './util/EmptyError';\nexport {ArgumentOutOfRangeError} from './util/ArgumentOutOfRangeError';\nexport {ObjectUnsubscribedError} from './util/ObjectUnsubscribedError';\nexport {TimeoutError} from './util/TimeoutError';\nexport {UnsubscriptionError} from './util/UnsubscriptionError';\nexport {TimeInterval} from './operator/timeInterval';\nexport {Timestamp} from './operator/timestamp';\nexport {TestScheduler} from './testing/TestScheduler';\nexport {VirtualTimeScheduler} from './scheduler/VirtualTimeScheduler';\nexport {AjaxRequest, AjaxResponse, AjaxError, AjaxTimeoutError} from './observable/dom/AjaxObservable';\n\nimport { asap } from './scheduler/asap';\nimport { async } from './scheduler/async';\nimport { queue } from './scheduler/queue';\nimport { animationFrame } from './scheduler/animationFrame';\nimport { AsapScheduler } from './scheduler/AsapScheduler';\nimport { AsyncScheduler } from './scheduler/AsyncScheduler';\nimport { QueueScheduler } from './scheduler/QueueScheduler';\nimport { AnimationFrameScheduler } from './scheduler/AnimationFrameScheduler';\nimport { rxSubscriber } from './symbol/rxSubscriber';\nimport { iterator } from './symbol/iterator';\nimport { observable } from './symbol/observable';\n\n/* tslint:enable:no-unused-variable */\n\n/**\n * @typedef {Object} Rx.Scheduler\n * @property {Scheduler} queue Schedules on a queue in the current event frame\n * (trampoline scheduler). Use this for iteration operations.\n * @property {Scheduler} asap Schedules on the micro task queue, which uses the\n * fastest transport mechanism available, either Node.js' `process.nextTick()`\n * or Web Worker MessageChannel or setTimeout or others. Use this for\n * asynchronous conversions.\n * @property {Scheduler} async Schedules work with `setInterval`. Use this for\n * time-based operations.\n * @property {Scheduler} animationFrame Schedules work with `requestAnimationFrame`.\n * Use this for synchronizing with the platform's painting\n */\nlet Scheduler = {\n  asap,\n  queue,\n  animationFrame,\n  async\n};\n\n/**\n * @typedef {Object} Rx.Symbol\n * @property {Symbol|string} rxSubscriber A symbol to use as a property name to\n * retrieve an \"Rx safe\" Observer from an object. \"Rx safety\" can be defined as\n * an object that has all of the traits of an Rx Subscriber, including the\n * ability to add and remove subscriptions to the subscription chain and\n * guarantees involving event triggering (can't \"next\" after unsubscription,\n * etc).\n * @property {Symbol|string} observable A symbol to use as a property name to\n * retrieve an Observable as defined by the [ECMAScript \"Observable\" spec](https://github.com/zenparsing/es-observable).\n * @property {Symbol|string} iterator The ES6 symbol to use as a property name\n * to retrieve an iterator from an object.\n */\nlet Symbol = {\n  rxSubscriber,\n  observable,\n  iterator\n};\n\nexport {\n    Scheduler,\n    Symbol\n};\n"]}